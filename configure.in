AC_INIT(bonobo/bonobo-moniker.h)

AM_CONFIG_HEADER(config.h)

BONOBO_MAJOR_VERSION=2
BONOBO_MINOR_VERSION=8
BONOBO_MICRO_VERSION=0
BONOBO_VERSION="$BONOBO_MAJOR_VERSION.$BONOBO_MINOR_VERSION.$BONOBO_MICRO_VERSION"

AM_INIT_AUTOMAKE(libbonobo, $BONOBO_VERSION)

AC_SUBST(BONOBO_MAJOR_VERSION)
AC_SUBST(BONOBO_MINOR_VERSION)
AC_SUBST(BONOBO_MICRO_VERSION)

AM_MAINTAINER_MODE

dnl
dnl Due to the sed scripts being split on 90 line
dnl blocks, this macro needs to be right at the beggining.
dnl
AC_PROG_INTLTOOL

dnl with higher autotools, we can set ACLOCAL_AMFLAGS to make Makefile's
dnl aware of our aclocal include dirs; but this works for automake-1.4
dnl gnome-autogen.sh sets ACLOCAL_FLAGS properly
ACLOCAL="$ACLOCAL $ACLOCAL_FLAGS"

LIBBONOBO_LT_VERSION_INFO='-version-info 0:0:0'
AC_SUBST(LIBBONOBO_LT_VERSION_INFO)
BONOBO_ACTIVATION_LT_VERSION_INFO='-version-info 4:0:0'
AC_SUBST(BONOBO_ACTIVATION_LT_VERSION_INFO)

AC_ISC_POSIX
AC_PROG_CC
AM_PROG_LEX
if [[ "$LEX" != "flex" ]]; then
        AC_MSG_ERROR([flex is required to build bonobo-activation])
fi
AC_SUBST(LFLAGS)
AC_STDC_HEADERS
AC_PROG_INSTALL
AC_PROG_LN_S
AC_PROG_MAKE_SET
AC_ISC_POSIX
AC_LIBTOOL_WIN32_DLL
AM_PROG_LIBTOOL
AC_PROG_YACC
AC_PATH_PROGS(PATH_TO_XRDB, "xrdb")
AC_CHECK_FUNCS(bind_textdomain_codeset)

GETTEXT_PACKAGE=libbonobo-2.0
AC_SUBST(GETTEXT_PACKAGE)
AC_DEFINE_UNQUOTED(GETTEXT_PACKAGE,"$GETTEXT_PACKAGE",[gettext package name])
gnomelocaledir='${prefix}/${DATADIRNAME}/locale'
AC_SUBST(gnomelocaledir)

ALL_LINGUAS="am ar az be bg bn bs ca cs cy da de el en_CA en_GB eo es eu fa fi fr ga gl gu he hi hr hu id is it ja ko li lt lv mk ml mn ms nb ne nl nn no pa pl pt pt_BR ro ru sk sl sq sr sr@Latn sv ta tr uk vi wa yi zh_CN zh_TW"
AM_GLIB_GNU_GETTEXT

GNOME_COMPILE_WARNINGS

dnl Test for dladdr
AC_MSG_CHECKING(for dladdr)
have_dladdr=false
AC_TRY_COMPILE([
#define _GNU_SOURCE
#include <dlfcn.h>], [
{
	Dl_info info;
	int     a;
	a = dladdr ("SHLIB_ID", &info);
}], have_dladdr=true)

if $have_dladdr; then
	AC_MSG_RESULT(found)
else
	AC_MSG_RESULT(not found - no auto shlib factory unloads)
fi

AC_DEFINE(HAVE_DLADDR,$have_dladdr,[whether we have dladdr])

dnl Checks for library functions
AC_CHECK_FUNCS(usleep nanosleep)

#
# Start of pkg-config checks
#
ORBIT_VERSION=2.9.2
GLIB_VERSION=2.3.2

PKG_CHECK_MODULES(LIBBONOBO, \
	ORBit-2.0 >= $ORBIT_VERSION \
	ORBit-CosNaming-2.0 >= $ORBIT_VERSION \
	glib-2.0 >= $GLIB_VERSION \
	gobject-2.0 >= $GLIB_VERSION \
	gthread-2.0 >= $GLIB_VERSION)
AC_SUBST(LIBBONOBO_CFLAGS)
AC_SUBST(LIBBONOBO_LIBS)

PKG_CHECK_MODULES(SERVER, \
	gmodule-2.0 >= 2.0.1 \
	ORBit-2.0 >= 2.4.0 \
	ORBit-CosNaming-2.0 >= 2.4.0 \
	libxml-2.0 >= 2.4.20)
AC_SUBST(SERVER_LIBS)
AC_SUBST(SERVER_CFLAGS)

# orbit-idl
ORBIT_IDL="`$PKG_CONFIG --variable=orbit_idl ORBit-2.0`"
AC_SUBST(ORBIT_IDL)

# popt
AC_CHECK_LIB(popt, poptStrippedArgv, POPT_LIBS=-lpopt, AC_MSG_ERROR([You must have popt version 1.5 or greater installed.]))
AC_SUBST(POPT_LIBS)
AC_CHECK_HEADER(popt.h,,AC_MSG_ERROR([Failed to find popt.h - you may have to adjust your environment]))

# checks for getaddrinfo()

have_getaddrinfo=no
AC_CHECK_FUNC(getaddrinfo, have_getaddrinfo=yes)
if test $have_getaddrinfo != yes; then
# getaddrinfo is not in the default libraries. See if it is in some other.
  for lib in bsd socket inet; do
    AC_CHECK_LIB($lib, getaddrinfo, [LIBS="$LIBS -l$lib";have_getaddrinfo=yes;break])
  done
fi
if test $have_getaddrinfo = yes; then
  AC_DEFINE(HAVE_GETADDRINFO)
fi

#end checks for getaddrinfo

# glib-genmarshal
AC_PATH_PROG(GLIB_GENMARSHAL, glib-genmarshal)

GTK_DOC_CHECK([1.0])

AC_ARG_ENABLE(debug, 
  [  --enable-debug   Enable debugging code [default=disabled]],
  enable_debug="$enableval",
  enable_debug=no)

if test x$enable_debug = xyes; then
  AC_DEFINE(G_ENABLE_DEBUG, 1, [Defined if debugging code should be compiled])
fi

bonobo_activation_debug_default=no;

AC_ARG_ENABLE(bonobo-activation-debug, [
  --enable-bonobo-activation-debug=[no/yes] turn on debugging [default=$bonobo_activation_debug_default]
],enable_bonobo_activation_debug=$enableval,enable_bonobo_activation_debug=$debug_default)

if test "x$enable_bonobo_activation_debug" = "xyes"; then
	AC_DEFINE(BONOBO_ACTIVATION_DEBUG)
fi

AC_PATH_PROG(PERL_PATH, perl)
if test -n "$PERL_PATH"; then
	BONOBO_SLAY=bonobo-slay
	AC_PATH_PROG(PS_PATH, ps)
	AC_CACHE_CHECK([for POSIX ps], ac_cv_prog_ps_posix, [
		USER=${USER:-${LOGNAME:-`logname`}}
		if $PS_PATH -U $USER -opid,args >/dev/null 2>&1; then
			ac_cv_prog_ps_posix=yes
		else
			ac_cv_prog_ps_posix=no
		fi
	])
	if test "$ac_cv_prog_ps_posix" = yes; then
		IF_BSD_PS=#
	else
		IF_POSIX_PS=#
	fi
fi
AC_SUBST(PERL_PATH)
AC_SUBST(BONOBO_SLAY)
AC_SUBST(PS_PATH)
AC_SUBST(IF_BSD_PS)
AC_SUBST(IF_POSIX_PS)

AC_OUTPUT([
Makefile
po/Makefile.in
idl/Makefile
bonobo/Makefile
bonobo/libbonobo-2.0.pc
bonobo/libbonobo-2.0-uninstalled.pc
bonobo-activation/Makefile
bonobo-activation/bonobo-activation-2.0.pc
bonobo-activation/bonobo-activation-2.0-uninstalled.pc
bonobo-activation/bonobo-activation-version.h
activation-server/Makefile
monikers/Makefile
samples/Makefile
samples/echo/Makefile
utils/Makefile
utils/bonobo-slay
tests/Makefile
tests/test-activation/Makefile
tests/models/Makefile
doc/Makefile
doc/api/Makefile
doc/api/figures/Makefile
doc/activation/Makefile
doc/activation-api/Makefile
])

