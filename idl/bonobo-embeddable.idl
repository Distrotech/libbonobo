/*
 * Bonobo Objects
 *
 * A Bonobo object is an object that can be embedded into
 * a container application.
 *
 * Bonobo Objects are also refered as servers.
 */

module GNOME {

interface View : GNOME::obj {
	typedef unsigned long windowid;

	/**
	 * size_allocate:
	 * @width: width given to the view
	 * @height: height given to the view.
	 */
	void size_allocate (in short width, in short height);

	/**
	 * set_window:
	 *
	 * Sets the window ID that should be used for the plug
	 * of this window
	 */
	void set_window (in windowid id);

};

/* Equivalent to IOleObject */
interface Component : GNOME::obj {

	typedef long Verb;
	const Verb PRIMARY = 0; // Action invoked when user double clicks on
				// this object.  Triggers inplace editing if this
				// object supports it.

	const Verb SHOW = -1;	// The object should be shown to the user, for 
				// editing or viewing.  Used during initial editing

	const Verb OPEN = -2;	// Edit the object in a separate window.

	const Verb HIDE = -3;	// Hide any open separate windows.

	const Verb INPLACE_UIA = -4; // Activate in place and negotiate toolbars and menus

	const Verb INPLACE = -5; // Activate in place but do not merge UI elements.

	const Verb DISCARDUNDO=-6; // Discard any pending Undo information in this object.
		
	/**
	 * do_verb:
	 * @verb: verb identifier
	 * @verbname: string that activated the verb
	 *
	 *
	 * Performs the @verb.  Standard verbs include:
	 * "open": open in a separate editing window.
	 * "edit": edit inplace (or open, if inplace is not supported).
	 */
	void do_verb (in short verb, in string verb_name);

	/**
	 * set_client_site:
	 * @client_site: the client site for this Object
	 *
	 * Sets the client site for this object
	 */
	void set_client_site (in ClientSite client_site);

	/**
	 * get_client_site:
	 * 
	 * Returns the current client site
	 */
	ClientSite get_client_site ();

	/**
	 * set_host_name:
	 * @name: Text
	 * @appname: name of the container application
	 *
	 * Sets the text that should be displayed on the window title
	 * when this object is opened in a separate window for editing
	 */
	void set_host_name (in string name, in string appname);

	/**
	 * close:
	 * @mode: Save mode.
	 *
	 * Close the Bonobo Object
	 */
	exception UserCancelledSave {};

	enum CloseMode {
		SAVE_IF_DIRTY,
		NO_SAVE,
		PROMPT_SAVE
	};
	void close (in CloseMode mode)
		raises (UserCancelledSave);
	
	/**
	 * set_moniker:
	 * @moniker: Moniker to set
	 * @which:   Which moniker is this
	 *
	 * Informs the application its moniker name
	 * or its container moniker's name.
	 */
	void set_moniker (in Moniker mon, in Moniker::type which);

	/** 
	 * get_moniker:
	 * FIXME
	 *
	 */

	struct VerbInfo {
		short  verb;
		string verb_desc;
	};

	typedef sequence<VerbInfo> verb_list;

	/**
	 * get_verbs_list:
	 * 
	 * Returns a list of the supported verbs
	 */
	verb_list get_verb_list ();

	/**
	 * advise:
	 * @sink: Where can the object inform of state changes
	 *
	 * Sets the object AdviseSink to @advise.  This is used
	 * to allow the Object to notify its container of any state
	 * changes like:
	 * close, save, rename, lik source change events.
	 */
	void advise (in AdviseSink advise);

	/**
	 * unadvise:
	 * 
	 * Informs the object that the AdviseSink set with ::advise
	 * is no longer valid
	 */
	void unadvise ();

	/**
	 * get_misc_status:
	 * @type: type
	 */
	long get_misc_status (in long type);

	/**
	 * new_view:
	 * 
	 * This returns a new window-id to provide a view of the
	 * object.
	 * 
	 * BonoboObjects should be able to produce as many views
	 * of the same data as requested.
	 */
	View new_view ();

};

interface InPlaceComponent : Component {
	/**
	 * deactivate:
	 *
	 * deactivates the object and discards the object's undo state.
	 * if UI is still active, the object should call its own
	 * ui_deactivate.
	 */
        void deactivate ();

	/**
	 * ui_deactivate:
	 *
	 * Deactivates the object and removes the GUI components
	 * for this object (this is done in the containee by calling 
	 * InPlaceSite::ui_state_notify (FALSE).
	 */
	void ui_deactivate ();

	/**
	 * reactivate_and_undo:
	 * 
	 * Activates the object and undoes the last operation.
	 */
	void reactivate_and_undo ();

	/**
	 * status_notify
	 * @type
	 *
	 * Notifies of the server of a state change on the container 
	 */
	enum Status {
		FOCUS_OUT,
		FOCUS_IN
	};
	void status_notify (in Status status);

	/**
	 * frame_window_activate_notify:
	 * @state: TRUE if frame window has been activated.
	 */
        void frame_window_activate_notify (in boolean state);

	/**
	 * doc_window_activated_notify:
	 * @state: TRUE if the document window has been activated
	 */
	void doc_window_activated_notify (in boolean state);

};

interface ComponentFactory : GNOME::GenericFactory {
	Component create_path (in string path);
};

};
