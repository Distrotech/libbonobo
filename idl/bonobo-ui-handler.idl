/*
 * The Bonobo::UIHandler Interface
 *
 * The UIHandler interface provides a CORBA service for
 * managing menus and toolbars.  It allows both the top-
 * level container and embedded BonoboObjects to
 * manipulate the application's menu and toolbar items.
 *
 * Authors:
 *    Nat Friedman  (nat@nat.org)
 *    Michael Meeks (mmeeks@gnu.org)
 */


module Bonobo {

	/* Forward declaration. */
	interface Control;

       	interface UIHandler : Bonobo::Unknown {
		typedef sequence<string> StringSeq;
		typedef sequence<octet> iobuf;

		enum PixmapType {
			PixmapTypeNone,
			PixmapTypeStock,
			PixmapTypeFilename,
			PixmapTypeXPMData,
			PixmapTypeRGBData,
			PixmapTypeRGBAData
		};

       		enum MenuType {
			MenuTypeEnd,
			MenuTypeItem,
			MenuTypeSubtree,
			MenuTypeRadioItem,
			MenuTypeRadioGroup,
			MenuTypeToggleItem,
			MenuTypeSeparator
       		};
       
       		/*
       		 * Containee ==> Container
       		 */
       
       		/**
		 * register_containee:
		 * @uih: The UIHandler CORBA interface of the
		 * containee which is being registered.
		 *
       		 * This method is used by an embedded component to register
       		 * its BonoboUIHandler with the container's BonoboUIHandler.
		 */
       		void register_containee (in UIHandler uih);
       
       		/**
		 * unregister_containee:
		 * @uih: The UIHandler of the containee which is being
		 * unregistered
		 *
       		 * This method is used by an embedded component to unregister
       		 * its BonoboUIHandler with the container's BonoboUIHandler.
       		 * The container will then
		 */
       		void unregister_containee (in UIHandler uih);

		/**
		 *
		 */
		UIHandler get_toplevel ();
       
       		/*
       		 *
		 * Menu.
		 *
		 * These routines are for the creation and
		 * manipulation of menu items.
		 *
		 */

		/**
		 * menu_create:
		 */
       		void menu_create (in UIHandler containee, in string path, in MenuType type, in string label,
				  in string hint, in long pos, in PixmapType pixmap_type, in iobuf pixmap_data,
				  in unsigned long accelerator_key, in long modifier);

		/**
		 * menu_remove:
		 */
		exception MenuItemNotFound {};
       		void menu_remove (in UIHandler containee_uih, in string path)
			raises (MenuItemNotFound);

		/**
		 * menu_fetch:
		 */
       		boolean menu_fetch (in string path, out MenuType type, out string label,
				    out string hint, out long pos, out PixmapType pixmap_type,
				    out iobuf pixmap_data, out unsigned long accelerator_key,
				    out long modifier);

		/**
		 * menu_get_children:
		 */
		boolean menu_get_children (in string path, out StringSeq children);

		/**
		 * menu_set_attributes: small data entries.
		 */
		void menu_set_attributes (in  UIHandler containee, in string path,
					  in  boolean sensitivity,
					  in  long pos,
					  in  string label,
					  in  string hint,
					  in  long accelerator_key, in  long ac_mods,
					  in  boolean toggle_state);

		/**
		 * menu_get_attributes: small data entries.
		 */
		void menu_get_attributes (in  UIHandler containee, in string path,
					  out boolean sensitivity,
					  out long pos,
					  out string label,
					  out string hint,
					  out long accelerator_key, out long ac_mods,
					  out boolean toggle_state);


		/**
		 * menu_set_data: chunky data entries.
		 */
		void menu_set_data       (in  UIHandler containee, in string path,
					  in  PixmapType pixmap_type, in  iobuf pixmap_data);

		/**
		 * menu_get_data: chunky data entries.
		 */
		void menu_get_data       (in  UIHandler containee, in string path,
					  out PixmapType pixmap_type, out iobuf pixmap_data);


       		/*
       		 *
		 * Toolbars.
		 *
		 * These routines are for the creation and
		 * manipulation of toolbar items.
       		 *
		 */
		/*
		 * Toolbars.
		 */
		void toolbar_create (in UIHandler containee, in string name);

		void toolbar_remove (in UIHandler containee, in string name);

		boolean toolbar_get_children (in string path, out StringSeq children);

		enum ToolbarOrientation {
			ToolbarOrientationHorizontal,
			ToolbarOrientationVertical
		};

       		enum ToolbarType {
			ToolbarTypeEnd,
			ToolbarTypeItem,
			ToolbarTypeRadioItem,
			ToolbarTypeRadioGroup,
			ToolbarTypeToggleItem,
			ToolbarTypeSeparator,
			ToolbarTypeControl
       		};

		enum ToolbarStyle {
			ToolbarStyleIcons,
			ToolbarStyleText,
			ToolbarStyleBoth
		};

		enum ToolbarSpaceStyle {
			ToolbarSpaceEmpty,
			ToolbarSpageLine
		};

		enum ReliefStyle {
			ReliefNormal,
			ReliefHalf,
			ReliefNone
		};

		/**
		 * toolbar_set_attributes: toolbar attribute passing.
		 */
		void toolbar_set_attributes (in  UIHandler containee, in string name,
					     in  ToolbarOrientation  orientation,
					     in  ToolbarStyle        style,
					     in  ToolbarSpaceStyle   space_style,
					     in  ReliefStyle         relief_style,
					     in  long                space_size,
					     in  boolean             sensitive);

		/**
		 * toolbar_get_attributes: toolbar attribute passing.
		 */
		void toolbar_get_attributes (in  UIHandler containee, in string name,
					     out ToolbarOrientation  orientation,
					     out ToolbarStyle        style,
					     out ToolbarSpaceStyle   space_style,
					     out ReliefStyle         relief_style,
					     out long                space_size,
					     out boolean             sensitive);

		/*
		 * TODO: what needs doing;
		 * 
		 * stuff needs renaming: toolbar_ to toolbar_item,
		 * a few bits need setting for toolbar's that don't apply to toolbar_items,,
		 * the toolbar_item stuff needs cleaning.
		 */

		/*
		 * Toolbar items.
		 */
		void toolbar_create_item (in UIHandler containee, in string path, in ToolbarType type,
					  in string label, in string hint, in long pos, in Control control,
					  in PixmapType pixmap_type, in iobuf pixmap_data,
					  in unsigned long accelerator_key, in long modifier);

		exception ToolbarItemNotFound {};
		void toolbar_remove_item (in UIHandler containee, in string path)
			raises (ToolbarItemNotFound);

		boolean toolbar_fetch_item (in string path, out ToolbarType type, out string label,
					    out string hint, out long pos, out PixmapType pixmap_type,
					    out iobuf pixmap_data, out unsigned long accelerator_key,
					    out long modifier);

		/**
		 * toolbar_item_set_attributes: small data entries.
		 */
		void toolbar_item_set_attributes (in  UIHandler containee, in string path,
						  in  boolean sensitive,
						  in  boolean active,
						  in  long    pos,
						  in  string  label,
						  in  string  hint,
						  in  long    accelerator_key,
						  in  long    ac_mods,
						  in  boolean toggle_state);

		/**
		 * toolbar_item_get_attributes: small data entries.
		 */
		void toolbar_item_get_attributes (in  UIHandler containee, in string path,
						  out boolean sensitive,
						  out boolean active,
						  out long    pos,
						  out string  label,
						  out string  hint,
						  out long    accelerator_key,
						  out long    ac_mods,
						  out boolean toggle_state);

		/**
		 * toolbar_item_set_data: chunky data entries.
		 */
		void toolbar_item_set_data (in  UIHandler containee, in string path,
					    in  PixmapType pixmap_type, in  iobuf pixmap_data);

		/**
		 * toolbar_item_get_data: chunky data entries.
		 */
		void toolbar_item_get_data (in  UIHandler containee, in string path,
					    out PixmapType pixmap_type, out iobuf pixmap_data);


       		/*
       		 * Container ==> Containee
       		 */
       
       		/*
       		 * These methods are used by containers to notify containees
       		 * that a menu or toolbar item has been activated or
       		 * overridden.
       		 */
       
       		void menu_activated  (in string path);
       		void menu_removed    (in string path);
       		void menu_overridden (in string path);
       		void menu_reinstated (in string path);

       		void toolbar_activated  (in string path);
       		void toolbar_removed    (in string path);
       		void toolbar_overridden (in string path);
       		void toolbar_reinstated (in string path);
       	};
       
} ;

