/*
 * Bonobo Objects
 *
 * A Bonobo object is an object that can be embedded into
 * a container application.
 *
 * Bonobo Objects are also referred to as servers.
 */

module Bonobo {

interface View : Control {

	/**
	 * set_zoom_factor:
	 * @zoom: zoom factor
	 *
	 * Requests that the view be running at zoom factor
	 */
	void set_zoom_factor (in double zoom);

	/**
	 * do_verb:
	 * @verb_name: string that identifies the verb.
	 *
	 *
	 * Performs the @verb.
	 */
	void do_verb (in string verb_name);
};

interface ViewFrame : ControlFrame {

	/**
	 * get_client_site:
	 *
	 * Returns: The Bonobo::ClientSite interface associated
	 * with this ViewFrame.
	 */
	ClientSite get_client_site ();

};

/* Similar to IOleObject */
interface Embeddable : Bonobo::Unknown {

	/**
	 * set_client_site:
	 * @client_site: the client site for this Object
	 *
	 * Sets the client site for this object
	 */
	void set_client_site (in ClientSite client_site);

	/**
	 * get_client_site:
	 * 
	 * Returns the current client site
	 */
	ClientSite get_client_site ();

	/**
	 * set_host_name:
	 * @name: Text
	 * @appname: name of the container application
	 *
	 * Sets the text that should be displayed on the window title
	 * when this object is opened in a separate window for editing
	 */
	void set_host_name (in string name, in string appname);

	/**
	 * set_uri:
	 * @uri: the uri that this component represents.
	 */
	void set_uri (in string uri);

	/**
	 * close:
	 * @mode: Save mode.
	 *
	 * Close the Bonobo Object
	 */
	exception UserCancelledSave {};

	enum CloseMode {
		SAVE_IF_DIRTY,
		NO_SAVE,
		PROMPT_SAVE
	};

	void close (in CloseMode mode)
		raises (UserCancelledSave);
	
	/**
	 * set_moniker:
	 * @moniker: Moniker to set
	 * @which:   Which moniker is this
	 *
	 * Informs the application its moniker name
	 * or its container moniker's name.
	 *	void set_moniker (in Moniker mon, in Moniker::type which);
	 */

	struct GnomeVerb {
		string name;
		string label;
		string hint;
	};

	typedef sequence<GnomeVerb> verb_list;

	/**
	 * get_verb_list:
	 * 
	 * Returns a list of the supported verbs
	 */
	verb_list get_verb_list ();

	/**
	 * advise:
	 * @sink: Where can the object inform of state changes
	 *
	 * Sets the object AdviseSink to @advise.  This is used
	 * to allow the Object to notify its container of any state
	 * changes like:
	 * close, save, rename, lik source change events.
	 */
	void advise (in AdviseSink advise);

	/**
	 * unadvise:
	 * 
	 * Informs the object that the AdviseSink set with ::advise
	 * is no longer valid
	 */
	void unadvise ();

	/**
	 * get_misc_status:
	 * @type: type
	 */
	long get_misc_status (in long type);

	/**
	 * new_view:
	 * @frame: the View frame containing this view.
	 *
	 * This returns a new View object.
	 * 
	 * BonoboObjects should be able to produce as many views
	 * of the same data as requested.
	 */
	View new_view (in ViewFrame frame) ;

	/**
	 * new_canvas_item:
	 * @aa: Whether the item should be an AA-item or not
	 * @proxy: The Proxy used to notify of requested updates.
	 *
	 * Returns a Bonobo::Canvas::Component interface, or
	 * CORBA_OBJECT_NIL if this object does not support the
	 * Canvas::Component interface.
	 */
	Canvas::Component new_canvas_item (in boolean                aa,
					   in Canvas::ComponentProxy proxy);
};


interface EmbeddableFactory : Bonobo::GenericFactory {
	Embeddable create_path (in string path);
};

};
