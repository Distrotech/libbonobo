/*
 * Bonobo Objects
 *
 * A Bonobo object is an object that can be embedded into
 * a container application.
 *
 * Bonobo Objects are also referred to as servers.
 */

module GNOME {

interface View : GNOME::Unknown {
	typedef unsigned long windowid;

	/**
	 * size_allocate:
	 * @width: width given to the view
	 * @height: height given to the view.
	 *
	 * Informs the View of the size assigned by its container application
	 */
	void size_allocate (in short width, in short height);

	/**
	 * size_request:
	 * @desired_width: In this value you should return the desired width you want.
	 * @desired_height: In this value you should return the desired height you want.
	 *
	 */
	void size_request (out short desired_width, out short desired_height);

	/**
	 * set_window:
	 *
	 * Sets the window ID that should be used for the plug
	 * of this window
	 */
	void set_window (in windowid id);

	/**
	 * activate:
	 *
	 * Activates or deactivates this in-place View.
	 */
	void activate (in boolean activated);

	/**
	 * reactivate_and_undo:
	 * 
	 * Activates the object and undoes the last operation.
	 */
	void reactivate_and_undo ();

	/**
	 * Some standard verbs in Bonobo:
	 * "bonobo_primary":
	 *     Action invoked when user double clicks on
	 *     this object.  Triggers inplace editing if this
	 *     object supports it.
	 *
	 * "bonobo_show":
	 *     The object should be shown to the user, for 
	 *     editing or viewing.  Used during initial editing
	 *
	 * "bonobo_open":
	 *     Edit the object in a separate window.
	 *
	 * "bonobo_hide":
	 *     Hide any open separate windows.
	 *
	 * "bonobo_activate_inplace_uia":
	 *     Activate in place and negotiate toolbars and menus
	 *
	 * "bonobo_activate_inplace":	
	 *     Activate in place but do not merge UI elements.
	 *
	 * "bonobo_deactivate"
	 *     Deactivate, often when another component has been
	 *     activated.
	 *
	 * "bonobo_discardundo"
	 *     Discard any pending Undo information in this object.
	 */
		
	/**
	 * do_verb:
	 * @verb_name: string that identifies the verb.
	 *
	 *
	 * Performs the @verb.
	 */
	void do_verb (in string verb_name);

	/**
	 * set_zoom_factor:
	 * @zoom: zoom factor
	 *
	 * Requests that the view be running at zoom factor
	 */
	void set_zoom_factor (in double zoom);
};

interface ViewFrame : GNOME::Unknown {
	typedef sequence<octet> pixbuf;

	/**
	 * get_client_site:
	 *
	 * Returns: The GNOME::ClientSite interface associated
	 * with this ViewFrame.
	 */
	ClientSite get_client_site ();

	/**
	 * get_ui_handler:
	 *
	 * Returns: The GNOME::UIHandler interface to be used for
	 * menu/toolbar item merging.
	 */
	UIHandler get_ui_handler ();

	/**
	 * view_activated:
	 * @state: TRUE if the view has been activated, FALSE if
	 * it just became inactive.
	 */
	void view_activated (in boolean state);

	/**
	 * deactivate_and_undo:
	 *
	 * This is called by the active object if it has just been activated
	 * and the undo operation has been called
	 */
	void deactivate_and_undo ();

	/** 
	 * request_resize:
	 * @new_width: New requested width
	 * @new_height: New requested height
	 *
	 * Requests the parent container to assign @new_width and
	 * @new_height.  
	 *
	 * Returns FALSE on failure, TRUE on success.
	 */
	void request_resize (in short new_width, in short new_height);
};

/* Equivalent to IOleObject */
interface Embeddable : GNOME::Unknown {

	/**
	 * set_client_site:
	 * @client_site: the client site for this Object
	 *
	 * Sets the client site for this object
	 */
	void set_client_site (in ClientSite client_site);

	/**
	 * get_client_site:
	 * 
	 * Returns the current client site
	 */
	ClientSite get_client_site ();

	/**
	 * set_host_name:
	 * @name: Text
	 * @appname: name of the container application
	 *
	 * Sets the text that should be displayed on the window title
	 * when this object is opened in a separate window for editing
	 */
	void set_host_name (in string name, in string appname);

	/**
	 * close:
	 * @mode: Save mode.
	 *
	 * Close the Bonobo Object
	 */
	exception UserCancelledSave {};

	enum CloseMode {
		SAVE_IF_DIRTY,
		NO_SAVE,
		PROMPT_SAVE
	};

	void close (in CloseMode mode)
		raises (UserCancelledSave);
	
	/**
	 * set_moniker:
	 * @moniker: Moniker to set
	 * @which:   Which moniker is this
	 *
	 * Informs the application its moniker name
	 * or its container moniker's name.
	 *	void set_moniker (in Moniker mon, in Moniker::type which);
	 */

	struct GnomeVerb {
		string name;
		string label;
		string hint;
	};

	typedef sequence<GnomeVerb> verb_list;

	/**
	 * get_verb_list:
	 * 
	 * Returns a list of the supported verbs
	 */
	verb_list get_verb_list ();

	/**
	 * advise:
	 * @sink: Where can the object inform of state changes
	 *
	 * Sets the object AdviseSink to @advise.  This is used
	 * to allow the Object to notify its container of any state
	 * changes like:
	 * close, save, rename, lik source change events.
	 */
	void advise (in AdviseSink advise);

	/**
	 * unadvise:
	 * 
	 * Informs the object that the AdviseSink set with ::advise
	 * is no longer valid
	 */
	void unadvise ();

	/**
	 * get_misc_status:
	 * @type: type
	 */
	long get_misc_status (in long type);

	/**
	 * new_view:
	 * @frame: the View frame containing this view.
	 *
	 * This returns a new window-id to provide a view of the
	 * object.
	 * 
	 * BonoboObjects should be able to produce as many views
	 * of the same data as requested.
	 */
	View new_view (in ViewFrame frame);

};


interface EmbeddableFactory : GNOME::GenericFactory {
	Embeddable create_path (in string path);
};

};
