module GNOME {

	interface BindContext : obj {
		/**
		 * register_object:
		 *
		 * Keeps track of the object withing the
		 * context.  The object is ref()ed
		 */
		void register_object (in obj object);
		
		/**
		 * drop_one_object:
		 * @object: Forgets about the object
		 *
		 * Applications usually call drop_objects.
		 */
		void drop_one_object (in obj object);

		/**
		 * drop_objects:
		 *
		 * Drops all the objects that were tied in this binding
		 * context
		 */
		void drop_objects ();
	};

	interface Moniker : PersistStream {
		
		enum type {
			CONTAINER,	// Return the Container's moniker.
			OBJ_RELATIVE,	// Return a relative moniker to the object
			OBJ_FULL	// Return an absolute moniker for this object.
		};

		exception InterfaceNotFound {
			string interface_name;
		};
	       
		exception TimeOut {
			string interface_name;
		};

		exception MissingInterface {
			string interface_name;
			string object_name;
		};

		/**
		 * bind_to_object:
		 * @bind_context: a BindContext
		 * @left_moniker: moniker for the left side
		 * @requested_interface: which interface we want in the end
		 *
		 * Binds a moniker under bind_context, the left
		 * moniker (ie, the parent moniker is left_moniker), once the
		 * service has been registered, it will attempt to get
		 * the @requester_interface
		 */

		Object bind_to_object (in Object bind_context, 
				       in Moniker left_moniker,
				       in string requested_interface)
			raises (InterfaceNotFound, TimeOut, MissingInterface);

		/**
		 * bind_to_storage:
		 * @bind_context: binding context
		 * @left_moniker: parent moniker (left side)
		 * @persistent_interface_name: the name of the persistent
		 * object (GNOME::Storage, GNOME::Stream, GNOME::Lockbytes).
		 */
		Object bind_to_storage (in Object bind_context,
					in Moniker left_moniker,
					in string persistent_interface_name);

		Moniker compose_with (in Moniker right, in boolean only_if_exists);

		typedef sequence<Moniker> MonikerList;

		MonikerList enum_pieces (in Moniker composite_moniker);

		/**
		 * get_display_name:
		 * 
		 * Returns a representation of the Moniker
		 */
		string get_display_name (in Object bind_context,
					 in Moniker left);

		/**
		 * parse_display_name:
		 *
		 * Returns a moniker from the string representation
		 */
		Moniker parse_display_name (in Object bind_context,
					    in Moniker left,
					    in string display_name,
					    out short display_name_bytes_parsed);
					    
	};

	interface ParseDisplayName : obj {
		Moniker parse_display_name (in Object bind_context,
					    in string display_name,
					    out short display_name_bytes_parsed);
	};

};
