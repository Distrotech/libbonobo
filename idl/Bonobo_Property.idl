/*
 * The Bonobo Property interfaces.
 *
 * Author:
 *   Nat Friedman (nat@nat.org)
 *
 * Copyright 1999, Helix Code, Inc.
 */
 /*
  * The Property-manipulation interfaces here are based in large part
  * on suggestions from Chuck Jazdzewski <cjazdzewski@inprise.com>.
 */

module Bonobo {

interface Listener;

interface Property {
	/**
	 * get_name:
	 * 
	 * Returns the name of the property.
	 *
	 * Do not confuse this with the human-readable string which
	 * should be presented to the user in a property editor.  A
	 * property name is a human-language-independent key used to
	 * identify a property.  See get_docstring() for more
	 * information about human-readable property descriptors.
	 */
	string get_name ();

	/**
	 * get_type:
	 * 
	 * Returns this Property's type.
	 */
#if defined(__ORBIT_IDL__)
	/* Bug filed */
	TypeCode get_type ();
#else
	CORBA::TypeCode get_type ();
#endif
	/**
	 * get_value:
	 *
	 * Returns the current value for this property.  The value
	 * is returned
	 */
	any get_value ();

	/**
	 * set_value:
	 * 
	 * Sets the value for this object to @value
	 */
	exception InvalidValue {};
	exception ReadOnlyProperty {};
	void set_value (in any value) raises (InvalidValue, ReadOnlyProperty);

	/**
	 * get_default:
	 *
	 * Returns the default value for this property.
	 *
	 * The purpose of this method is twofold.  First, Property
	 * editors can use it to implement a "set property value to
	 * default" mechanism.
	 *
	 */
	any get_default ();

	/**
	 * get_doc_string:
	 *
	 * Returns a string describing this property.
	 */
	string get_doc_string ();

	/** 
	 * get_flags:
	 * 
	 * Returns this property's flags,
	 * see bonobo-property-bag.h
	 *
	 * BONOBO_PROPERTY_UNSTORED        = 1,
	 * BONOBO_PROPERTY_READABLE        = 2,
	 * BONOBO_PROPERTY_WRITEABLE       = 4,
	 * BONOBO_PROPERTY_USE_DEFAULT_OPT = 8
	 * 
	 */
	long get_flags ();

};

typedef sequence<string> PropertyNames;
typedef sequence<Property> PropertyList;

interface PropertyBag : Bonobo::Unknown {
	/**
	 * get_properties:
	 *
	 * Returns: All of the properties in this property bag.
	 */
	PropertyList get_properties ();

	/**
	 * get_property:
	 * @name: A string which uniquely identifies a given property.
	 *
	 * Returns: The single property in this PropertyBag identified
	 * by @name.
	 */
	exception PropertyNotFound {};
	Property get_property (in string name)
		raises (PropertyNotFound);

	/**
	 * get_property_names:
	 *
	 * Returns: The names of the properties available in this
	 * PropertyBag.
	 *
	 * There's no particular need for this function, but without
	 * it the only way to get a list of all the property names in
	 * a given PropertyBag, you have to iterate through all the
	 * properties, and that will cause the Property servants to be
	 * incarnated, which is not very resource-conscious.
	 */
	PropertyNames get_property_names ();

	/**
	 * add_change_listener:
	 * @name: Property name.  Use empty string ("") to listen to all
	 * properties in the bag.
	 * @listener: Listener Interface to notify when changes occur.
	 *
	 * This method attaches a listener for changes to any property in 
	 * the bag. 
	 */
	void add_change_listener (in string name, in Listener listener);

	/**
	 * remove_change_listener:
	 * @name: Property name.  Use empty string ("") to remove a general
	 * bag listener.
	 * @listener: Listener Interface to be removed.
	 *
	 * This method removes a bag listener from the bag. 
	 */
	void remove_change_listener (in string name, in Listener listener);


};

};

