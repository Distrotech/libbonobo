/*
 * Bonobo::Persist interfaces
 *
 * Author:
 *    Miguel de Icaza (miguel@gnu.org)
 */

module GNOME {

	interface Persist : obj {
		enum Status {
			SAVE_OK,
			SAVE_CANCEL,
			SAVE_FAILED
		};

		string get_class_id ();
		
		exception WrongDataType {};		
	};
	
	/*
	 * PersistFile interface is usually implemented by object
	 * applications and sometimes by containers.
	 *
	 * This allows applications to load and save documents stored
	 * in disk files.  This is used to bind a linked object.
	 */
	interface PersistFile : Persist {

	        exception NoCurrentName {
			string extension;
		};

		/**
		 * load:
		 * @path: filename to load from
		 * 
		 * Loads the document object from the file
		 * pointed in by @path
		 */
		void load (in string path) raises (WrongDataType);

		/**
		 * save:
		 * @path:
		 * saves the document object to the file 
		 * pointed in by @path
		 */
		void save (in string path);
	
		/**
		 * is_dirty:
		 * 
		 * returns whether the document needs to be
		 * saved
		 */
		boolean is_dirty ();
	
		/**
		 * get_current_file:
		 * 
		 * Returns the name of the current file. 
		 */
		string get_current_file () raises (NoCurrentName);
	};

	/*
	 * PersistStorage is implemented by BonoboObjects.
	 * 
	 * The methods are used by Bonobo and the container
	 * applications to manipulate the storage of a componet
	 */
	interface PersistStorage : Persist {
		
		/**
		 * is_dirty:
		 * 
		 * returns whether the document needs to be
		 * saved
		 */
		boolean is_dirty ();
	
		/**
		 * load:
		 * @storage: The storage to load the state from
		 *
		 * The bonobo_object should load its state from the
		 * @storage provided
		 */
		void load (in Storage storage) raises (WrongDataType);

		/**
		 * save:
		 * @storage: The storage in which to save the state
		 * of the bonobo_object
		 * @same_as_loaded: if TRUE, this means the object
		 * is being saved to the same source used to load the object
		 *
		 * BonoboObjects should save their sate in the @storage
		 */
		void save (in Storage storage, in boolean same_as_loaded);
	
		/**
		 * init_new:
		 * @storage: A storage that is provided for this object
		 *
		 * BonoboObjects do have access to a valid storage through
		 * their entire life.  This is a chance given to initialize such 
		 * storage and keep it around (users should addref it).
		 */
		void init_new (in Storage storage);

	};
	
	/*
	 * This interface is used by items which only need to store 
	 * information in a Stream ( monikers are the primary
	 * users of this ).  
	 *
	 * Unlike PersistStorage, the Stream passed is only valid
	 * during these calls (ie, you should not incref these
	 * and used them after this).
	 */

	interface PersistStream : Persist {
		boolean is_dirty ();
		
		/**
		 * load:
		 * @stream: Where to load the state from
		 *
		 * Loads the status of the object from @stream
		 */
		void load (in Stream stream) raises (WrongDataType);

		/**
		 * save:
		 * @stream: Where to save the state to.
		 *
		 * Saves the state of the object to the @stream
		 */
		void save (in Stream stream);

		/**
		 * get_size_max:
		 *
		 * Should return the number of bytes requested to save
		 * this object, or -1 if it is not known.
		 */
		long get_size_max ();
	};

};
	






