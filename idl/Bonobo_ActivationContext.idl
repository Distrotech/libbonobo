#include "gnome-factory.idl"

module OAF {
  typedef string ImplementationID;
  typedef string ActivationID;
  interface ActivationContext;

  typedef long ActivationFlags;
  const ActivationFlags FLAG_NO_LOCAL = 1<<0; // No shared libraries
  const ActivationFlags FLAG_IGNORE_EXISTING = 1<<1;

  /* ActivationResult */
  enum ActivationResultType { RESULT_OBJECT, RESULT_SHLIB, RESULT_NONE };

  union ActivationResult switch(ActivationResultType) {
  case RESULT_OBJECT:
    Object res_object;
  case RESULT_SHLIB:
    GNOME::stringlist res_shlib;
  };

  /* Attribute */
  enum AttributeType { A_STRING, A_NUMBER, A_BOOLEAN, A_STRINGV };
  union AttributeValue switch(AttributeType) {
  case A_STRING:
    string value_string;
  case A_NUMBER:
    double value_number;
  case A_BOOLEAN:
    boolean value_boolean;
  case A_STRINGV:
    GNOME::stringlist value_stringv;
  };
  struct Attribute {
    string name;
    AttributeValue v;
  };

  /* Server */
  struct ServerInfo {
    ImplementationID iid;

    string server_type;
    string location_info;
    string username, hostname, domain;
		
    sequence<Attribute> attrs;
  };
  typedef sequence<ServerInfo> ServerInfoList;

  typedef long long CacheTime;

  union ServerInfoListCache switch(boolean) {
  case TRUE:
    ServerInfoList server_list;
  };

  union ServerStateCache switch(boolean) {
  case TRUE:
    sequence<ImplementationID> active_servers;
  };

  /* Interfaces */
  interface ObjectDirectory {
    ServerInfoListCache get_servers(in CacheTime only_if_newer);
    ServerStateCache get_active_servers(in CacheTime only_if_newer);

    readonly attribute string username, hostname, domain;

    Object activate(in ImplementationID iid, in ActivationContext ac, in ActivationFlags flags)
      context("username", "hostname", "domain");

    /* Ensures consistency for activations of publicly advertised objects */
    void lock();
    oneway void unlock();
  };

  typedef sequence<ObjectDirectory> ObjectDirectoryList;

  interface ActivationContext {
    exception NotListed {};
    exception AlreadyListed {};
    exception ParseFailed { string description; };

    readonly attribute ObjectDirectoryList directories;
    void add_directory(in ObjectDirectory dir) raises(AlreadyListed);
    void remove_directory(in ObjectDirectory dir) raises(NotListed);

    ActivationResult activate(in string requirements,
			      in GNOME::stringlist selection_order,
			      in ActivationFlags flags)
      raises(ParseFailed)
      context("username", "hostname", "domain");

    readonly attribute ServerInfoList servers;
    ServerInfoList query(in string requirements,
			 in GNOME::stringlist selection_order)
      raises(ParseFailed)
      context("username", "hostname", "domain");

    ActivationResult activate_from_id(in ActivationID aid, in ActivationFlags flags)
      context("username", "hostname", "domain");
  };
};
