/*
 * Interfaces for in-place editing support on the 
 * container side
 *
 */
module GNOME {

/**
 * InPlaceSite:
 * 
 * This interface must be implemented by container applications
 */
interface InPlaceSite : ClientSite {

	/**
	 * can_activate_in_place:
	 *
	 * Returns whether it is ok for an in-place object
	 * to activate itself inside its parent
	 */
	boolean can_activate_in_place ();

	/**
	 * in_place_notify:
	 * @status: whether this object is being activated in place
	 *
	 * Notifies the container of an in-place-activation status change 
	 * of a server process
	 */
	void in_place_notify (in boolean status);

	/**
	 * ui_state_notify:
	 * @status: TRUE if the the containee is merging its menus or 
	 * FALSE when it is going away.
	 * 
	 * the container is expected to destroy its menus and create
	 * its default ones.
	 */
	void ui_state_notify (in boolean status);

	/**
	 * deactivate_and_undo:
	 *
	 * This is called by the active object if it has just been activated
	 * and the undo operation has been called
	 */
	void deactivate_and_undo ();

	/** 
	 * request_resize:
	 * @new_width: New requested width
	 * @new_height: New requested height
	 *
	 * Requests the parent container to assign @new_width and
	 * @new_height.  
	 *
	 * Returns FALSE on failure, TRUE on success.
	 */
	void request_resize (in short new_width, in short new_height);
};

interface InPlaceUIWindow {
};

interface InPlaceFrame : InPlaceUIWindow {
	typedef string Menu;

        /**
	 * set_active_object:
	 * @object: points to the object being activated
	 * @active: TRUE if the object is being activated, false otherwise
	 *
	 * Called when an in-place object is being activated to notify
	 * that menus are about to be merged, toolbars merged, space
	 * requested.
	 */
        void set_active_object (in InPlaceComponent object, in boolean active);

	/** 
	 * dock:
	 *
	 * Dock control.  Add new dockable widgets here
	 */
	void dock ();

	/**
	 * attach_menu:
	 *
	 * Called by the containee to transfer its desired
	 * menu to the parent.
	 *
	 * The parent can manipulate this menu and should create
	 * a shared menu
	 */
	void attach_menu (in Menu menu);

	/**
	 * set_status_text:
	 * @text: status message.
	 *
	 * Request to set the status text to @text
	 */
	void set_status_text (in string text);

	/**
	 * modal_state_notify:
	 * @state: the modal state (TRUE modal, FALSE non-modal)
	 * 
	 * Informs the container when the child goes into modal state
	 * and when it leaves modal state.  This is required to
	 * disable event processing on the containee.
	 */
	void modal_state_notify (in boolean state);

};

};
