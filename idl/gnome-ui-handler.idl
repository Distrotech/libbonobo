/*
 * The GNOME::UIHandler Interface
 *
 * The UIHandler interface provides a CORBA service for
 * managing menus and toolbars.  It allows both the top-
 * level container and embedded BonoboObjects to
 * manipulate the application's menu and toolbar items.
 *
 * Author:
 *    Nat Friedman (nat@gnome-support.com)
 */


module GNOME {

       	interface UIHandler : GNOME::Unknown {
		typedef sequence<string> StringSeq;
		typedef sequence<octet> iobuf;

		enum PixmapType {
			PixmapTypeNone,
			PixmapTypeStock,
			PixmapTypeFilename,
			PixmapTypeXPMData,
			PixmapTypeRGBData,
			PixmapTypeRGBAData
		};

       		enum MenuType {
			MenuTypeEnd,
			MenuTypeItem,
			MenuTypeSubtree,
			MenuTypeRadioItem,
			MenuTypeRadioGroup,
			MenuTypeToggleItem,
			MenuTypeSeparator
       		};
       
       		enum ToolbarType {
			ToolbarTypeEnd,
			ToolbarTypeItem,
			ToolbarTypeRadioItem,
			ToolbarTypeRadioGroup,
			ToolbarTypeToggleItem,
			ToolbarTypeSeparator
       		};
       
       		/*
       		 * Containee ==> Container
       		 */
       
       		/**
		 * register_containee:
		 * @uih: The UIHandler CORBA interface of the
		 * containee which is being registered.
		 *
       		 * This method is used by an embedded component to register
       		 * its GnomeUIHandler with the container's GnomeUIHandler.
		 */
       		void register_containee (in UIHandler uih);
       
       		/**
		 * unregister_containee:
		 * @uih: The UIHandler of the containee which is being
		 * unregistered
		 *
       		 * This method is used by an embedded component to unregister
       		 * its GnomeUIHandler with the container's GnomeUIHandler.
       		 * The container will then
		 */
       		void unregister_containee (in UIHandler uih);

		/**
		 *
		 */
		UIHandler get_toplevel ();
       
       		/*
       		 *
		 * Menu.
		 *
		 * These routines are for the creation and
		 * manipulation of menu items.
		 *
		 */

		/**
		 * menu_create:
		 */
       		void menu_create (in UIHandler containee, in string path, in MenuType type, in string label,
				  in string hint, in long pos, in PixmapType pixmap_type, in iobuf pixmap_data,
				  in unsigned long accelerator_key, in long modifier);

		/**
		 * menu_item_remove:
		 */
		exception MenuItemNotFound {};
       		void menu_remove (in UIHandler containee_uih, in string path)
			raises (MenuItemNotFound);

		/**
		 * menu_fetch:
		 */
       		boolean menu_fetch (in string path, out MenuType type, out string label,
				    out string hint, out long pos, out PixmapType pixmap_type,
				    out iobuf pixmap_data, out unsigned long accelerator_key,
				    out long modifier);

		/**
		 * menu_get_children:
		 */
		boolean menu_get_children (in string path, out StringSeq children);

		/**
		 * menu_item_get_pos:
		 * FIXME: set pos?
		 */
       		long menu_get_pos (in string path);
		void menu_set_pos (in UIHandler containee, in long pos);

		/**
		 * menu_item_set_sensitivity:
		 */
       		void menu_set_sensitivity (in UIHandler containee, in string path, in boolean sensitivity);
       		boolean menu_get_sensitivity (in string path);

		void menu_set_label (in UIHandler containee, in string path, in string label);		
		string menu_get_label (in string path);

		void menu_set_hint (in UIHandler containee, in string path, in string hint);		
		string menu_get_hint (in string path);

		void menu_set_pixmap (in UIHandler containee, in string path,
				      in PixmapType pixmap_type, in iobuf pixmap_data);
		void menu_get_pixmap (in string path, out PixmapType pixmap_type, out iobuf pixmap_data);

		void menu_set_accel (in UIHandler containee, in string path,
				     in long accelerator_key, in long ac_mods);
		void menu_get_accel (in string path, out long accelerator_key, out long ac_mods);

       		void menu_set_toggle_state (in UIHandler containee, in string path, in boolean state);
       		boolean menu_get_toggle_state (in string path);
       

       		/*
       		 *
		 * Toolbars.
		 *
		 * These routines are for the creation and
		 * manipulation of toolbar items.
       		 *
		 */

		/*
		 * Toolbars.
		 */
		void toolbar_create (in UIHandler containee, in string name);

		void toolbar_remove (in UIHandler containee, in string name);

		boolean toolbar_get_children (in string path, out StringSeq children);

		enum ToolbarOrientation {
			TOOLBAR_ORIENTATION_HORIZONTAL,
			TOOLBAR_ORIENTATION_VERTICAL
		};

		void toolbar_set_orientation (in UIHandler containee, in string name, in ToolbarOrientation orientation);
		ToolbarOrientation toolbar_get_orientation (in string name);

		void toolbar_set_style (in UIHandler containee, in string name, in long style);
		long toolbar_get_style (in string name);

		/*
		 * Toolbar items.
		 */
		void toolbar_create_item (in UIHandler containee, in string path, in ToolbarType type,
					  in string label, in string hint, in long pos, in PixmapType pixmap_type,
					  in iobuf pixmap_data, in unsigned long accelerator_key, in long modifier);

		exception ToolbarItemNotFound {};
		void toolbar_remove_item (in UIHandler containee, in string path)
			raises (ToolbarItemNotFound);

		boolean toolbar_fetch_item (in string path, out ToolbarType type, out string label,
					    out string hint, out long pos, out PixmapType pixmap_type,
					    out iobuf pixmap_data, out unsigned long accelerator_key,
					    out long modifier);

		void toolbar_set_sensitivity (in UIHandler containee, in string path, in boolean sensitivity);

		boolean toolbar_get_sensitivity (in string path);

		void toolbar_set_label (in UIHandler containee, in string path, in string label);
		string toolbar_get_label (in string path);

		void toolbar_set_pixmap (in UIHandler containee, in string path,
					 in PixmapType pixmap_type, in iobuf pixmap_data);
		void toolbar_get_pixmap (in string path, out PixmapType pixmap_type, out iobuf pixmap_data);

		void toolbar_set_accel (in UIHandler containee, in string path,
					in long accelerator_key, in long ac_mods);
		void toiolbar_get_accel (in string path, out long accelerator_key, out long ac_mods);

		void toolbar_set_toggle_state (in UIHandler containee, in string path, in boolean state);
		boolean toolbar_get_toggle_state (in UIHandler containee, in string path);

		long toolbar_get_pos (in string path);
		void toolbar_set_pos (in UIHandler containee, in long pos);
		
       
       		long toolbar_item_get_pos (in string path);
       
       		void toolbar_item_set_sensitivity (in string path, in boolean sensitivity);
       		boolean toolbar_item_get_sensitivity ();
       
       		void toolbar_item_set_hidden (in string path, in boolean hidden);
       		boolean toolbar_item_get_hidden (in string path);
       
       		void toolbar_item_set_label (in string path, in string label);
       		string toolbar_item_get_label (in string path);
       
       		void toolbar_item_set_pixmap (in string path, in iobuf data);
       		void toolbar_item_get_pixmap (in string path, out iobuf data);
       
       		void toolbar_item_set_accel (in string path, in unsigned long accelerator_key, in long ac_mods);
       		void toolbar_item_get_accel (in string path, out unsigned long accelerator_key, out long ac_mods);
       
       		void toolbar_item_toggle_set_state (in string path, in boolean state);
       		boolean toolbar_item_toggle_get_state (in string path);
       
       		void toolbar_item_radio_set_state (in string path, in boolean state);
       		boolean toolbar_item_radio_get_state (in string path);
       
       		/*
       		 * These methods allow embedded components to create UI groups
       		 * and manipulate them.
       		 */
       		long group_create ();
       		void group_destroy (in long gid);


       		void group_add_menu_items (in long gid, in StringSeq paths);
       		void group_add_toolbar_items (in long gid, in StringSeq paths);
       
       		void group_get_members (in long gid, out StringSeq paths);
       
       		void group_set_sensitivity (in long gid, in boolean sensitivity);
       		void group_set_hidden (in long gid, in boolean sensitivity);
       
       		/*
       		 * Container ==> Containee
       		 */
       
       		/*
       		 * These methods are used by containers to notify containees
       		 * that a menu or toolbar item has been activated or
       		 * overriden.
       		 */
       
       		void menu_activated (in string path);
       		void menu_removed   (in string path);
       		void menu_overriden (in string path);
       		void menu_reinstated (in string path);

       		void toolbar_activated (in string path);
       		void toolbar_removed   (in string path);
       		void toolbar_overriden (in string path);
       		void toolbar_reinstated (in string path);
       	};
       
} ;

