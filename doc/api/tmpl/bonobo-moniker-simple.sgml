<!-- ##### SECTION Title ##### -->
BonoboMonikerSimple

<!-- ##### SECTION Short_Description ##### -->
A super easy to use moniker implementation wrapper

<!-- ##### SECTION Long_Description ##### -->
<para>
BonoboMonikerSimple makes writing monikers really extremely
easy. To implement a moniker you only have to write 1 function.
To register create the moniker object you have to use only 1
call. It can't get much simpler. If you want to use monikers
instead of implementing them, you probably want to see
#bonobo-moniker-util instead.
</para>

<para>
Few people need to implement monikers, but if they do, this
is how they should do it:
  <example>
    <title>A cut down file: moniker implementation</title>
    <programlisting>
Bonobo_Unknown
bonobo_moniker_file_resolve (BonoboMoniker               *moniker,
			     const Bonobo_ResolveOptions *options,
			     const CORBA_char            *requested_interface,
			     CORBA_Environment           *ev)
{
	const char    *fname = bonobo_moniker_get_name (moniker);
	Bonobo_Unknown retval;

	g_warning ("Fname '%s'", fname);

	if (!strcmp (requested_interface, "IDL:Bonobo/Stream:1.0")) {
		BonoboStream *stream;

		stream = bonobo_stream_open ("fs", fname,
					     Bonobo_Storage_READ, 0664);

		if (!stream) {
			g_warning ("Failed to open stream '%s'", fname);
			CORBA_exception_set (ev, CORBA_USER_EXCEPTION,
					     ex_Bonobo_Moniker_InterfaceNotFound, NULL);
			return CORBA_OBJECT_NIL;
		}

		return CORBA_Object_duplicate (BONOBO_OBJREF (stream), ev);
	}
	
	return CORBA_OBJECT_NIL;
}
    </programlisting>
  </example>
  After implementing the resolve function, you need to create the new moniker
in your standard factory:
  <example>
    <title>Creating a new simple moniker</title>
    <programlisting>
static BonoboObject *
bonobo_std_moniker_factory (BonoboGenericFactory *this,
			    const char           *object_id,
			    void                 *data)
{
	g_return_val_if_fail (object_id != NULL, NULL);

	if (!strcmp (object_id, "OAFIID:Bonobo_Moniker_File"))

		return BONOBO_OBJECT (bonobo_moniker_simple_new (
			"file:", bonobo_moniker_file_resolve));
	else
		return NULL;
}
    </programlisting>
  </example>
</para>

<!-- ##### SECTION See_Also ##### -->
<para>
#BonoboMoniker, #BonoboMonikerSimple, #bonobo-moniker-util, #BonoboMonikerExtender
</para>

<!-- ##### MACRO BONOBO_MONIKER_SIMPLE_TYPE ##### -->
<para>

</para>



<!-- ##### MACRO BONOBO_TYPE_RESOLVE_FLAG ##### -->
<para>

</para>



<!-- ##### MACRO BONOBO_RESOLVE_FLAG_TYPE ##### -->
<para>

</para>



<!-- ##### STRUCT BonoboMonikerSimple ##### -->
<para>

</para>


<!-- ##### STRUCT BonoboMonikerSimplePrivate ##### -->
<para>

</para>


<!-- ##### USER_FUNCTION BonoboMonikerSimpleResolveFn ##### -->
<para>

</para>

@moniker: 
@options: 
@requested_interface: 
@ev: 
@Returns: 


<!-- ##### TYPEDEF BonoboMonikerSimpleClass ##### -->
<para>

</para>


<!-- ##### FUNCTION bonobo_moniker_simple_get_type ##### -->
<para>

</para>

@Returns: 


<!-- ##### FUNCTION bonobo_moniker_simple_construct ##### -->
<para>

</para>

@moniker: 
@name: 
@resolve_closure: 
@Returns: 
<!-- # Unused Parameters # -->
@resolve_fn: 


<!-- ##### FUNCTION bonobo_moniker_simple_new ##### -->
<para>

</para>

@name: 
@resolve_fn: 
@Returns: 


<!-- ##### FUNCTION bonobo_moniker_simple_new_closure ##### -->
<para>

</para>

@name: 
@resolve_closure: 
@Returns: 


