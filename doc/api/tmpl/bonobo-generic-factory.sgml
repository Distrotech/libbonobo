<!-- ##### SECTION Title ##### -->
BonoboGenericFactory

<!-- ##### SECTION Short_Description ##### -->
The basic, generic Bonobo object factory implementation

<!-- ##### SECTION Long_Description ##### -->
<para>
The vast majority of Bonobo objects are created by the
#BonoboGenericFactory implementation. This provides a
very simple C sugar wrapper of the GNOME::ObjectFactory
IDL interface, used by OAF to instantiate new objects.
</para>

<para>
Most applications when they start up will register their
Bonobo object factory with OAF, this can be done like this:
  <example>
    <title>How to register a factory with OAF</title>
    <programlisting>
BonoboGenericFactory *factory;

factory = bonobo_generic_factory_new_multi (
	"OAFIID:GNOME_MyApp_myId",
	my_factory_function, NULL);
bonobo_running_context_auto_exit_unref (BONOBO_OBJECT (factory));
    </programlisting>
  </example>
  This registers the factory with OAF, associated with your
factory's OAFIID ( as specified in the installed .oaf file ).
The running_context_auto_exit_unref function is used to ensure
that the program exits the gtk main loop when all of the factory's
( or any derived ) objects are destroyed.
</para>
<para>
When an object that is created by your factory is demanded from
OAF the my_factory_function will be called:
  <example>
    <title>A simple factory</title>
    <programlisting>
static BonoboObject *
my_factory_fn (BonoboGenericFactory *this,
               const char           *object_id,
               void                 *data)
{
	BonoboObject *object = NULL;
	
	g_return_val_if_fail (object_id != NULL, NULL);

	if (!strcmp (object_id, "OAFIID:Bonobo_Sample_Clock"))
		object = bonobo_clock_control_new ();
	else
		g_warning ("Unknown OAFIID '%s'", object_id);

	return object;
}
     </programlisting>
  </example>
  This will return the newly constructed object via OAF to
the Object requestor.
</para>

<para>
The generic factory works in two modes, multi and plain,
it is recommended that the multi mode be used. Also, there
is a macro that can be used for simple components to remove
the burden of writing the main function and getting the
initialization correct, see #BONOBO_OAF_FACTORY_MULTI.
</para>

<!-- ##### SECTION See_Also ##### -->
<para>

</para>

<!-- ##### MACRO BONOBO_GENERIC_FACTORY_TYPE ##### -->
<para>

</para>



<!-- ##### STRUCT BonoboGenericFactoryPrivate ##### -->
<para>

</para>


<!-- ##### STRUCT BonoboGenericFactory ##### -->
<para>

</para>

@base: 
@priv: 

<!-- ##### USER_FUNCTION BonoboFactoryCallback ##### -->
<para>

</para>

@factory: 
@component_id: 
@closure: 
@Returns: 


<!-- ##### TYPEDEF BonoboGenericFactoryClass ##### -->
<para>

</para>


<!-- ##### FUNCTION bonobo_generic_factory_new ##### -->
<para>

</para>

@act_iid: 
@factory_cb: 
@user_data: 
@Returns: 
<!-- # Unused Parameters # -->
@oaf_iid: 
@factory: 
@component_id: 
@data: 
@goad_id: 


<!-- ##### FUNCTION bonobo_generic_factory_new_closure ##### -->
<para>

</para>

@act_iid: 
@factory_closure: 
@Returns: 


<!-- ##### FUNCTION bonobo_generic_factory_construct ##### -->
<para>

</para>

@factory: 
@act_iid: 
@factory_cb: 
@Returns: 
<!-- # Unused Parameters # -->
@oaf_iid: 
@c_factory: 
@corba_factory: 
@user_data: 
@component_id: 
@data: 
@goad_id: 


<!-- ##### FUNCTION bonobo_generic_factory_construct_noreg ##### -->
<para>

</para>

@factory: 
@act_iid: 
@factory_cb: 


<!-- ##### FUNCTION bonobo_generic_factory_main ##### -->
<para>

</para>

@act_iid: 
@factory_cb: 
@user_data: 
@Returns: 


<!-- ##### MACRO BONOBO_FACTORY_INIT ##### -->
<para>

</para>

@descr: 
@version: 
@argcp: 
@argv: 


<!-- ##### MACRO BONOBO_OAF_FACTORY ##### -->
<para>

</para>

@oafiid: 
@descr: 
@version: 
@callback: 
@data: 
<!-- # Unused Parameters # -->
@fn: 


<!-- ##### MACRO BONOBO_OAF_FACTORY_MULTI ##### -->
<para>

</para>

@oafiid: 
@descr: 
@version: 
@callback: 
@data: 
<!-- # Unused Parameters # -->
@fn: 


<!-- ##### MACRO BONOBO_ACTIVATION_FACTORY ##### -->
<para>

</para>

@oafiid: 
@descr: 
@version: 
@callback: 
@data: 


