<!-- ##### SECTION Title ##### -->
BonoboPropertyBag

<!-- ##### SECTION Short_Description ##### -->
Implements a generic property storage interface

<!-- ##### SECTION Long_Description ##### -->
<para>
The PropertyBag is used for many things, particularly for
the customization of controls. The important thing to
remember about the BonoboPropertyBag implementation is that
no live data is stored in the bag. ie. the Model for the 
properties is your code.
</para>

<para>
Consequently when someone requests a properties value,
or sets a property the callbacks you supply at bag
construction time are called, and the code therein must
supply the property. Similarly, when a property changes
value inside your object you need to notify the property
bag's listeners that it has changed with a call to
<function>bonobo_property_bag_notify_listeners</function>.
</para>

<para>
Here is a simple example use of the property bag:
  <example>
     <title>Callbacks</title>
     <programlisting>
enum {
	PROP_RUNNING,
	PROP_COLOUR
} MyArgs;

static void
get_prop (BonoboPropertyBag *bag,
	  BonoboArg         *arg,
	  guint              arg_id,
	  CORBA_Environment *ev,
	  gpointer           user_data)
{
	GtkObject *clock = user_data;

	switch (arg_id) {

	case PROP_RUNNING:
		BONOBO_ARG_SET_BOOLEAN (arg, clock->is_running);
		break;

	case PROP_COLOUR:
		BONOBO_ARG_SET_STRING (arg, clock->color);
		break;

	default:
		bonobo_exception_set (ev, ex_Bonobo_PropertyBag_NotFound);
		break;
	}
}

static void
set_prop (BonoboPropertyBag *bag,
	  const BonoboArg   *arg,
	  guint              arg_id,
	  CORBA_Environment *ev,
	  gpointer           user_data)
{
	GtkClock *clock = user_data;

	switch (arg_id) {

	case PROP_RUNNING: {
		guint i = BONOBO_ARG_GET_BOOLEAN (arg);

		if (i)
			gtk_clock_start (clock);
		else
			gtk_clock_stop (clock);
		break;
	}

	case PROP_COLOUR:
		gtk_clock_set_color (clock, BONOBO_ARG_GET_STRING (arg));

	default:
		bonobo_exception_set (ev, ex_Bonobo_PropertyBag_NotFound);
		break;
	}
}
     </programlisting>
  </example>
</para>
<para>
Then to instantiate the property bag interface and associate it with
a control perhaps we do:
  <example>
     <title></title>
     <programlisting>
	BonoboPropertyBag *pb;

	pb = bonobo_property_bag_new (get_prop, set_prop, clock);
	bonobo_control_set_properties (control, pb);

	bonobo_property_bag_add (pb, "running", PROP_RUNNING,
				 BONOBO_ARG_BOOLEAN, NULL,
				 _("Whether or not the clock is running"),
				 0);

	bonobo_property_bag_add (pb, "colour", PROP_COLOUR,
				 BONOBO_ARG_STRING, NULL,
				 _("The colour of the clock face"),
				 0);

	bonobo_object_unref (BONOBO_OBJECT (pb));
     </programlisting>
  </example>
And finally we need to notify listeners of changes in various properties
so we could perhaps do:
  <example>
     <title></title>
     <programlisting>
static void
signal_handler (GtkClock *clock, BonoboPropertyBag *pb)
{
	BonoboArg *arg = bonobo_arg_new (TC_string);

	BONOBO_ARG_SET_STRING (arg, gtk_clock_get_color (clock));

	bonobo_property_bag_notify_listeners (
		pb, "colour", arg, NULL);

	bonobo_arg_release (arg);
}
...
	gtk_signal_connect (GTK_OBJECT (clock), "color_changed",
			    GTK_SIGNAL_FUNC (signal_handler), pb);
     </programlisting>
  </example>
  See also #BonoboArg.
</para>

<!-- ##### SECTION See_Also ##### -->
<para>

</para>

<!-- ##### MACRO BONOBO_PROPERTY_READABLE ##### -->
<para>

</para>



<!-- ##### MACRO BONOBO_PROPERTY_WRITEABLE ##### -->
<para>

</para>



<!-- ##### MACRO BONOBO_PROPERTY_NO_LISTENING ##### -->
<para>

</para>



<!-- ##### MACRO BONOBO_PROPERTY_NO_AUTONOTIFY ##### -->
<para>

</para>



<!-- ##### STRUCT BonoboPropertyBagPrivate ##### -->
<para>

</para>


<!-- ##### STRUCT BonoboPropertyBag ##### -->
<para>

</para>

@parent: 
@priv: 
@es: 

<!-- ##### STRUCT BonoboProperty ##### -->
<para>

</para>

@name: 
@idx: 
@type: 
@default_value: 
@doctitle: 
@docstring: 
@flags: 
@priv: 

<!-- ##### STRUCT BonoboPropertyPrivate ##### -->
<para>

</para>


<!-- ##### USER_FUNCTION BonoboPropertyGetFn ##### -->
<para>

</para>

@bag: 
@arg: 
@arg_id: 
@ev: 
@user_data: 


<!-- ##### USER_FUNCTION BonoboPropertySetFn ##### -->
<para>

</para>

@bag: 
@arg: 
@arg_id: 
@ev: 
@user_data: 


<!-- ##### TYPEDEF BonoboPropertyBagClass ##### -->
<para>

</para>


<!-- ##### MACRO BONOBO_PROPERTY_BAG_TYPE ##### -->
<para>

</para>



<!-- ##### FUNCTION bonobo_property_bag_new ##### -->
<para>

</para>

@get_prop_cb: 
@set_prop_cb: 
@user_data: 
@Returns: 
<!-- # Unused Parameters # -->
@get_prop: 
@set_prop: 


<!-- ##### FUNCTION bonobo_property_bag_new_closure ##### -->
<para>

</para>

@get_prop: 
@set_prop: 
@Returns: 


<!-- ##### FUNCTION bonobo_property_bag_new_full ##### -->
<para>

</para>

@get_prop: 
@set_prop: 
@event_source: 
@Returns: 
<!-- # Unused Parameters # -->
@user_data: 


<!-- ##### FUNCTION bonobo_property_bag_construct ##### -->
<para>

</para>

@pb: 
@get_prop: 
@set_prop: 
@event_source: 
@Returns: 
<!-- # Unused Parameters # -->
@user_data: 


<!-- ##### FUNCTION bonobo_property_bag_add ##### -->
<para>

</para>

@pb: 
@name: 
@idx: 
@type: 
@default_value: 
@doctitle: 
@flags: 
<!-- # Unused Parameters # -->
@docstring: 


<!-- ##### FUNCTION bonobo_property_bag_add_full ##### -->
<para>

</para>

@pb: 
@name: 
@idx: 
@type: 
@default_value: 
@doctitle: 
@docstring: 
@flags: 
@get_prop: 
@set_prop: 
<!-- # Unused Parameters # -->
@user_data: 


<!-- ##### FUNCTION bonobo_property_bag_remove ##### -->
<para>

</para>

@pb: 
@name: 


<!-- ##### FUNCTION bonobo_property_bag_map_params ##### -->
<para>

</para>

@pb: 
@on_instance: 
@pspecs: 
@n_params: 


<!-- ##### FUNCTION bonobo_property_bag_get_prop_list ##### -->
<para>

</para>

@pb: 
@Returns: 


