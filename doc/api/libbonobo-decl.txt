<MACRO>
<NAME>BONOBO_TYPE_MONIKER_EXTENDER</NAME>
#define BONOBO_TYPE_MONIKER_EXTENDER        (bonobo_moniker_extender_get_type ())
</MACRO>
<MACRO>
<NAME>BONOBO_MONIKER_EXTENDER_TYPE</NAME>
#define BONOBO_MONIKER_EXTENDER_TYPE        BONOBO_TYPE_MONIKER_EXTENDER /* deprecated, you should use BONOBO_TYPE_MONIKER_EXTENDER */
</MACRO>
<MACRO>
<NAME>BONOBO_MONIKER_EXTENDER</NAME>
#define BONOBO_MONIKER_EXTENDER(o)          (G_TYPE_CHECK_INSTANCE_CAST ((o), BONOBO_TYPE_MONIKER_EXTENDER, BonoboMonikerExtender))
</MACRO>
<MACRO>
<NAME>BONOBO_MONIKER_EXTENDER_CLASS</NAME>
#define BONOBO_MONIKER_EXTENDER_CLASS(k)    (G_TYPE_CHECK_CLASS_CAST((k), BONOBO_TYPE_MONIKER_EXTENDER, BonoboMonikerExtenderClass))
</MACRO>
<MACRO>
<NAME>BONOBO_IS_MONIKER_EXTENDER</NAME>
#define BONOBO_IS_MONIKER_EXTENDER(o)       (G_TYPE_CHECK_INSTANCE_TYPE ((o), BONOBO_TYPE_MONIKER_EXTENDER))
</MACRO>
<MACRO>
<NAME>BONOBO_IS_MONIKER_EXTENDER_CLASS</NAME>
#define BONOBO_IS_MONIKER_EXTENDER_CLASS(k) (G_TYPE_CHECK_CLASS_TYPE ((k), BONOBO_TYPE_MONIKER_EXTENDER))
</MACRO>
<STRUCT>
<NAME>BonoboMonikerExtender</NAME>
</STRUCT>
<USER_FUNCTION>
<NAME>BonoboMonikerExtenderFn</NAME>
<RETURNS>Bonobo_Unknown </RETURNS>
BonoboMonikerExtender       *extender,
						   const Bonobo_Moniker         parent,
						   const Bonobo_ResolveOptions *options,
						   const CORBA_char            *display_name,
						   const CORBA_char            *requested_interface,
						   CORBA_Environment           *ev
</USER_FUNCTION>
<STRUCT>
<NAME>BonoboMonikerExtender</NAME>
struct BonoboMonikerExtender {
        BonoboObject           object;
	BonoboMonikerExtenderFn resolve;
	gpointer                data;
};
</STRUCT>
<TYPEDEF>
<NAME>BonoboMonikerExtenderClass</NAME>
typedef struct {
	BonoboObjectClass      parent_class;

	POA_Bonobo_MonikerExtender__epv epv;
	
	BonoboMonikerExtenderFn resolve;
} BonoboMonikerExtenderClass;
</TYPEDEF>
<FUNCTION>
<NAME>bonobo_moniker_extender_get_type</NAME>
<RETURNS>GType  </RETURNS>
void
</FUNCTION>
<FUNCTION>
<NAME>bonobo_moniker_extender_new</NAME>
<RETURNS>BonoboMonikerExtender  *</RETURNS>
BonoboMonikerExtenderFn      resolve,gpointer                     data
</FUNCTION>
<FUNCTION>
<NAME>bonobo_moniker_find_extender</NAME>
<RETURNS>Bonobo_MonikerExtender  </RETURNS>
const gchar                 *name,const gchar                 *interface,CORBA_Environment           *opt_ev
</FUNCTION>
<FUNCTION>
<NAME>bonobo_moniker_use_extender</NAME>
<RETURNS>Bonobo_Unknown  </RETURNS>
const gchar                 *extender_oafiid,BonoboMoniker               *moniker,const Bonobo_ResolveOptions *options,const CORBA_char            *requested_interface,CORBA_Environment           *opt_ev
</FUNCTION>
<MACRO>
<NAME>BONOBO_TYPE_ITEM_CONTAINER</NAME>
#define BONOBO_TYPE_ITEM_CONTAINER        (bonobo_item_container_get_type ())
</MACRO>
<MACRO>
<NAME>BONOBO_ITEM_CONTAINER_TYPE</NAME>
#define BONOBO_ITEM_CONTAINER_TYPE        BONOBO_TYPE_ITEM_CONTAINER /* deprecated, you should use BONOBO_TYPE_ITEM_CONTAINER */
</MACRO>
<MACRO>
<NAME>BONOBO_ITEM_CONTAINER</NAME>
#define BONOBO_ITEM_CONTAINER(o)          (G_TYPE_CHECK_INSTANCE_CAST ((o), BONOBO_TYPE_ITEM_CONTAINER, BonoboItemContainer))
</MACRO>
<MACRO>
<NAME>BONOBO_ITEM_CONTAINER_CLASS</NAME>
#define BONOBO_ITEM_CONTAINER_CLASS(k)    (G_TYPE_CHECK_CLASS_CAST((k), BONOBO_TYPE_ITEM_CONTAINER, BonoboItemContainerClass))
</MACRO>
<MACRO>
<NAME>BONOBO_IS_ITEM_CONTAINER</NAME>
#define BONOBO_IS_ITEM_CONTAINER(o)       (G_TYPE_CHECK_INSTANCE_TYPE ((o), BONOBO_TYPE_ITEM_CONTAINER))
</MACRO>
<MACRO>
<NAME>BONOBO_IS_ITEM_CONTAINER_CLASS</NAME>
#define BONOBO_IS_ITEM_CONTAINER_CLASS(k) (G_TYPE_CHECK_CLASS_TYPE ((k), BONOBO_TYPE_ITEM_CONTAINER))
</MACRO>
<TYPEDEF>
<NAME>BonoboClientSiteList</NAME>
typedef GList BonoboClientSiteList;
</TYPEDEF>
<STRUCT>
<NAME>BonoboItemContainerPrivate</NAME>
</STRUCT>
<TYPEDEF>
<NAME>BonoboItemContainer</NAME>
typedef struct {
	BonoboObject base;

	BonoboItemContainerPrivate *priv;
} BonoboItemContainer;
</TYPEDEF>
<TYPEDEF>
<NAME>BonoboItemContainerClass</NAME>
typedef struct {
	BonoboObjectClass parent_class;

	POA_Bonobo_ItemContainer__epv epv;

	Bonobo_Unknown (*get_object) (BonoboItemContainer *item_container,
				      CORBA_char          *item_name,
				      CORBA_boolean        only_if_exists,
				      CORBA_Environment   *ev);
} BonoboItemContainerClass;
</TYPEDEF>
<FUNCTION>
<NAME>bonobo_item_container_get_type</NAME>
<RETURNS>GType  </RETURNS>
void
</FUNCTION>
<FUNCTION>
<NAME>bonobo_item_container_new</NAME>
<RETURNS>BonoboItemContainer  *</RETURNS>
void
</FUNCTION>
<FUNCTION>
<NAME>bonobo_item_container_add</NAME>
<RETURNS>void  </RETURNS>
BonoboItemContainer *container,const char          *name,BonoboObject        *object
</FUNCTION>
<FUNCTION>
<NAME>bonobo_item_container_remove_by_name</NAME>
<RETURNS>void  </RETURNS>
BonoboItemContainer *container,const char          *name
</FUNCTION>
<FUNCTION>
<NAME>bonobo_marshal_BOXED__STRING_BOOLEAN_BOXED</NAME>
<RETURNS>void  </RETURNS>
GClosure     *closure,GValue       *return_value,guint         n_param_values,const GValue *param_values,gpointer      invocation_hint,gpointer      marshal_data
</FUNCTION>
<FUNCTION>
<NAME>bonobo_marshal_VOID__STRING_BOXED_BOXED</NAME>
<RETURNS>void  </RETURNS>
GClosure     *closure,GValue       *return_value,guint         n_param_values,const GValue *param_values,gpointer      invocation_hint,gpointer      marshal_data
</FUNCTION>
<FUNCTION>
<NAME>bonobo_marshal_VOID__BOXED_UINT_BOXED</NAME>
<RETURNS>void  </RETURNS>
GClosure     *closure,GValue       *return_value,guint         n_param_values,const GValue *param_values,gpointer      invocation_hint,gpointer      marshal_data
</FUNCTION>
<FUNCTION>
<NAME>bonobo_marshal_OBJECT__STRING</NAME>
<RETURNS>void  </RETURNS>
GClosure     *closure,GValue       *return_value,guint         n_param_values,const GValue *param_values,gpointer      invocation_hint,gpointer      marshal_data
</FUNCTION>
<MACRO>
<NAME>BONOBO_TYPE_MONIKER_SIMPLE</NAME>
#define BONOBO_TYPE_MONIKER_SIMPLE        (bonobo_moniker_simple_get_type ())
</MACRO>
<MACRO>
<NAME>BONOBO_MONIKER_SIMPLE_TYPE</NAME>
#define BONOBO_MONIKER_SIMPLE_TYPE        BONOBO_TYPE_MONIKER_SIMPLE /* deprecated, you should use BONOBO_TYPE_MONIKER_SIMPLE */
</MACRO>
<MACRO>
<NAME>BONOBO_MONIKER_SIMPLE</NAME>
#define BONOBO_MONIKER_SIMPLE(o)          (G_TYPE_CHECK_INSTANCE_CAST ((o), BONOBO_TYPE_MONIKER_SIMPLE, BonoboMonikerSimple))
</MACRO>
<MACRO>
<NAME>BONOBO_MONIKER_SIMPLE_CLASS</NAME>
#define BONOBO_MONIKER_SIMPLE_CLASS(k)    (G_TYPE_CHECK_CLASS_CAST((k), BONOBO_TYPE_MONIKER_SIMPLE, BonoboMonikerSimpleClass))
</MACRO>
<MACRO>
<NAME>BONOBO_IS_MONIKER_SIMPLE</NAME>
#define BONOBO_IS_MONIKER_SIMPLE(o)       (G_TYPE_CHECK_INSTANCE_TYPE ((o), BONOBO_TYPE_MONIKER_SIMPLE))
</MACRO>
<MACRO>
<NAME>BONOBO_IS_MONIKER_SIMPLE_CLASS</NAME>
#define BONOBO_IS_MONIKER_SIMPLE_CLASS(k) (G_TYPE_CHECK_CLASS_TYPE ((k), BONOBO_TYPE_MONIKER_SIMPLE))
</MACRO>
<MACRO>
<NAME>BONOBO_TYPE_RESOLVE_FLAG</NAME>
#define BONOBO_TYPE_RESOLVE_FLAG          (bonobo_resolve_flag_get_type ())
</MACRO>
<MACRO>
<NAME>BONOBO_RESOLVE_FLAG_TYPE</NAME>
#define BONOBO_RESOLVE_FLAG_TYPE        BONOBO_TYPE_RESOLVE_FLAG /* deprecated, you should use BONOBO_TYPE_RESOLVE_FLAG */
</MACRO>
<FUNCTION>
<NAME>bonobo_resolve_flag_get_type</NAME>
<RETURNS>GType  </RETURNS>
void
</FUNCTION>
<STRUCT>
<NAME>BonoboMonikerSimple</NAME>
</STRUCT>
<STRUCT>
<NAME>BonoboMonikerSimplePrivate</NAME>
</STRUCT>
<USER_FUNCTION>
<NAME>BonoboMonikerSimpleResolveFn</NAME>
<RETURNS>Bonobo_Unknown </RETURNS>
BonoboMoniker               *moniker,
							const Bonobo_ResolveOptions *options,
							const CORBA_char            *requested_interface,
							CORBA_Environment           *ev
</USER_FUNCTION>
<STRUCT>
<NAME>BonoboMonikerSimple</NAME>
struct BonoboMonikerSimple {
        BonoboMoniker                moniker;

	BonoboMonikerSimplePrivate  *priv;
};
</STRUCT>
<TYPEDEF>
<NAME>BonoboMonikerSimpleClass</NAME>
typedef struct {
	BonoboMonikerClass parent_class;
} BonoboMonikerSimpleClass;
</TYPEDEF>
<FUNCTION>
<NAME>bonobo_moniker_simple_get_type</NAME>
<RETURNS>GType  </RETURNS>
void
</FUNCTION>
<FUNCTION>
<NAME>bonobo_moniker_simple_construct</NAME>
<RETURNS>BonoboMoniker  *</RETURNS>
BonoboMonikerSimple         *moniker,const char                  *name,GClosure                    *resolve_closure
</FUNCTION>
<FUNCTION>
<NAME>bonobo_moniker_simple_new</NAME>
<RETURNS>BonoboMoniker  *</RETURNS>
const char                  *name,BonoboMonikerSimpleResolveFn resolve_fn
</FUNCTION>
<FUNCTION>
<NAME>bonobo_moniker_simple_new_closure</NAME>
<RETURNS>BonoboMoniker  *</RETURNS>
const char                  *name,GClosure                    *resolve_closure
</FUNCTION>
<FUNCTION>
<NAME>bonobo_object_save_to_stream</NAME>
<RETURNS>void  </RETURNS>
Bonobo_Unknown     object,Bonobo_Stream      stream,CORBA_Environment *opt_ev
</FUNCTION>
<FUNCTION>
<NAME>bonobo_object_from_stream</NAME>
<RETURNS>Bonobo_Unknown  </RETURNS>
Bonobo_Stream      stream,CORBA_Environment *opt_ev
</FUNCTION>
<FUNCTION>
<NAME>bonobo_get_object</NAME>
<RETURNS>Bonobo_Unknown  </RETURNS>
const CORBA_char        *name,const char              *interface_name,CORBA_Environment       *opt_ev
</FUNCTION>
<FUNCTION>
<NAME>bonobo_moniker_client_new_from_name</NAME>
<RETURNS>Bonobo_Moniker  </RETURNS>
const CORBA_char        *name,CORBA_Environment       *opt_ev
</FUNCTION>
<FUNCTION>
<NAME>bonobo_moniker_client_get_name</NAME>
<RETURNS>CORBA_char          *</RETURNS>
Bonobo_Moniker     moniker,CORBA_Environment *opt_ev
</FUNCTION>
<FUNCTION>
<NAME>bonobo_moniker_client_resolve_default</NAME>
<RETURNS>Bonobo_Unknown  </RETURNS>
Bonobo_Moniker     moniker,const char        *interface_name,CORBA_Environment *opt_ev
</FUNCTION>
<FUNCTION>
<NAME>bonobo_moniker_client_equal</NAME>
<RETURNS>gboolean  </RETURNS>
Bonobo_Moniker     moniker,const CORBA_char  *name,CORBA_Environment *opt_ev
</FUNCTION>
<USER_FUNCTION>
<NAME>BonoboMonikerAsyncFn</NAME>
<RETURNS>void </RETURNS>
Bonobo_Unknown     object,
				      CORBA_Environment *ev,
				      gpointer           user_data
</USER_FUNCTION>
<FUNCTION>
<NAME>bonobo_get_object_async</NAME>
<RETURNS>void  </RETURNS>
const CORBA_char        *name,const char              *interface_name,CORBA_Environment       *ev,BonoboMonikerAsyncFn     cb,gpointer                 user_data
</FUNCTION>
<FUNCTION>
<NAME>bonobo_moniker_client_new_from_name_async</NAME>
<RETURNS>void  </RETURNS>
const CORBA_char        *name,CORBA_Environment       *ev,BonoboMonikerAsyncFn     cb,gpointer                 user_data
</FUNCTION>
<FUNCTION>
<NAME>bonobo_moniker_resolve_async</NAME>
<RETURNS>void  </RETURNS>
Bonobo_Moniker           moniker,Bonobo_ResolveOptions   *options,const char              *interface_name,CORBA_Environment       *ev,BonoboMonikerAsyncFn     cb,gpointer                 user_data
</FUNCTION>
<FUNCTION>
<NAME>bonobo_moniker_resolve_async_default</NAME>
<RETURNS>void  </RETURNS>
Bonobo_Moniker           moniker,const char              *interface_name,CORBA_Environment       *ev,BonoboMonikerAsyncFn     cb,gpointer                 user_data
</FUNCTION>
<FUNCTION>
<NAME>bonobo_moniker_util_get_parent_name</NAME>
<RETURNS>CORBA_char     *</RETURNS>
Bonobo_Moniker     moniker,CORBA_Environment *opt_ev
</FUNCTION>
<FUNCTION>
<NAME>bonobo_moniker_util_qi_return</NAME>
<RETURNS>Bonobo_Unknown  </RETURNS>
Bonobo_Unknown     object,const CORBA_char  *requested_interface,CORBA_Environment *ev
</FUNCTION>
<FUNCTION>
<NAME>bonobo_moniker_util_parse_name</NAME>
<RETURNS>const char     *</RETURNS>
const char        *name,int               *plen
</FUNCTION>
<FUNCTION>
<NAME>bonobo_moniker_util_seek_std_separator</NAME>
<RETURNS>int  </RETURNS>
const CORBA_char  *str,int                min_idx
</FUNCTION>
<FUNCTION>
<NAME>bonobo_moniker_util_escape</NAME>
<RETURNS>char           *</RETURNS>
const char        *string,int                offset
</FUNCTION>
<FUNCTION>
<NAME>bonobo_moniker_util_unescape</NAME>
<RETURNS>char           *</RETURNS>
const char        *string,int                num_chars
</FUNCTION>
<FUNCTION>
<NAME>bonobo_url_register</NAME>
<RETURNS>void  </RETURNS>
char              *oafiid,char              *url,char              *mime_type,Bonobo_Unknown     object,CORBA_Environment *ev
</FUNCTION>
<FUNCTION>
<NAME>bonobo_url_unregister</NAME>
<RETURNS>void  </RETURNS>
char              *oafiid,char              *url,CORBA_Environment *ev
</FUNCTION>
<FUNCTION>
<NAME>bonobo_url_lookup</NAME>
<RETURNS>Bonobo_Unknown  </RETURNS>
char              *oafiid,char              *url,CORBA_Environment *ev
</FUNCTION>
<MACRO>
<NAME>BONOBO_TYPE_PERSIST</NAME>
#define BONOBO_TYPE_PERSIST        (bonobo_persist_get_type ())
</MACRO>
<MACRO>
<NAME>BONOBO_PERSIST_TYPE</NAME>
#define BONOBO_PERSIST_TYPE        BONOBO_TYPE_PERSIST /* deprecated, you should use BONOBO_TYPE_PERSIST */
</MACRO>
<MACRO>
<NAME>BONOBO_PERSIST</NAME>
#define BONOBO_PERSIST(o)          (G_TYPE_CHECK_INSTANCE_CAST ((o), BONOBO_TYPE_PERSIST, BonoboPersist))
</MACRO>
<MACRO>
<NAME>BONOBO_PERSIST_CLASS</NAME>
#define BONOBO_PERSIST_CLASS(k)    (G_TYPE_CHECK_CLASS_CAST((k), BONOBO_TYPE_PERSIST, BonoboPersistClass))
</MACRO>
<MACRO>
<NAME>BONOBO_IS_PERSIST</NAME>
#define BONOBO_IS_PERSIST(o)       (G_TYPE_CHECK_INSTANCE_TYPE ((o), BONOBO_TYPE_PERSIST))
</MACRO>
<MACRO>
<NAME>BONOBO_IS_PERSIST_CLASS</NAME>
#define BONOBO_IS_PERSIST_CLASS(k) (G_TYPE_CHECK_CLASS_TYPE ((k), BONOBO_TYPE_PERSIST))
</MACRO>
<STRUCT>
<NAME>BonoboPersistPrivate</NAME>
</STRUCT>
<TYPEDEF>
<NAME>BonoboPersist</NAME>
typedef struct {
	BonoboObject object;

	BonoboPersistPrivate *priv;
} BonoboPersist;
</TYPEDEF>
<TYPEDEF>
<NAME>BonoboPersistClass</NAME>
typedef struct {
	BonoboObjectClass      parent_class;

	POA_Bonobo_Persist__epv epv;

	Bonobo_Persist_ContentTypeList *
	                      (*get_content_types) (BonoboPersist     *persist,
						    CORBA_Environment *ev);
} BonoboPersistClass;
</TYPEDEF>
<FUNCTION>
<NAME>bonobo_persist_get_type</NAME>
<RETURNS>GType  </RETURNS>
void
</FUNCTION>
<FUNCTION>
<NAME>bonobo_persist_generate_content_types</NAME>
<RETURNS>Bonobo_Persist_ContentTypeList  *</RETURNS>
int num,...
</FUNCTION>
<FUNCTION>
<NAME>bonobo_persist_construct</NAME>
<RETURNS>BonoboPersist                   *</RETURNS>
BonoboPersist *persist,const gchar   *iid
</FUNCTION>
<FUNCTION>
<NAME>bonobo_persist_set_dirty</NAME>
<RETURNS>void 	</RETURNS>
BonoboPersist *persist,gboolean dirty
</FUNCTION>
<TYPEDEF>
<NAME>BonoboArg</NAME>
typedef CORBA_any      BonoboArg;
</TYPEDEF>
<TYPEDEF>
<NAME>BonoboArgType</NAME>
typedef CORBA_TypeCode BonoboArgType;
</TYPEDEF>
<MACRO>
<NAME>BONOBO_ARG_NULL</NAME>
#define BONOBO_ARG_NULL     TC_null
</MACRO>
<MACRO>
<NAME>BONOBO_ARG_BOOLEAN</NAME>
#define BONOBO_ARG_BOOLEAN  TC_CORBA_boolean
</MACRO>
<MACRO>
<NAME>BONOBO_ARG_SHORT</NAME>
#define BONOBO_ARG_SHORT    TC_CORBA_short
</MACRO>
<MACRO>
<NAME>BONOBO_ARG_INT</NAME>
#define BONOBO_ARG_INT      TC_CORBA_long
</MACRO>
<MACRO>
<NAME>BONOBO_ARG_LONG</NAME>
#define BONOBO_ARG_LONG     TC_CORBA_long
</MACRO>
<MACRO>
<NAME>BONOBO_ARG_LONGLONG</NAME>
#define BONOBO_ARG_LONGLONG TC_CORBA_long_long
</MACRO>
<MACRO>
<NAME>BONOBO_ARG_FLOAT</NAME>
#define BONOBO_ARG_FLOAT    TC_CORBA_float
</MACRO>
<MACRO>
<NAME>BONOBO_ARG_DOUBLE</NAME>
#define BONOBO_ARG_DOUBLE   TC_CORBA_double
</MACRO>
<MACRO>
<NAME>BONOBO_ARG_CHAR</NAME>
#define BONOBO_ARG_CHAR     TC_CORBA_char
</MACRO>
<MACRO>
<NAME>BONOBO_ARG_STRING</NAME>
#define BONOBO_ARG_STRING   TC_CORBA_string
</MACRO>
<MACRO>
<NAME>BONOBO_ARG_GET_GENERAL</NAME>
#	define BONOBO_ARG_GET_GENERAL(a,c,t,e)   (g_assert (bonobo_arg_type_is_equal ((a)->_type, c, e)),\
					          *((t *)((a)->_value)))
</MACRO>
<MACRO>
<NAME>BONOBO_ARG_SET_GENERAL</NAME>
#	define BONOBO_ARG_SET_GENERAL(a,v,c,t,e) (g_assert (bonobo_arg_type_is_equal ((a)->_type, c, e)),\
					          *((t *)((a)->_value)) = (t)(v))
</MACRO>
<MACRO>
<NAME>BONOBO_ARG_GET_GENERAL</NAME>
#	define BONOBO_ARG_GET_GENERAL(a,c,t,e)   (*((t *)((a)->_value)))
</MACRO>
<MACRO>
<NAME>BONOBO_ARG_SET_GENERAL</NAME>
#	define BONOBO_ARG_SET_GENERAL(a,v,c,t,e) (*((t *)((a)->_value)) = (v))
</MACRO>
<MACRO>
<NAME>BONOBO_ARG_GET_BOOLEAN</NAME>
#define BONOBO_ARG_GET_BOOLEAN(a)   (BONOBO_ARG_GET_GENERAL (a, TC_CORBA_boolean, CORBA_boolean, NULL))
</MACRO>
<MACRO>
<NAME>BONOBO_ARG_SET_BOOLEAN</NAME>
#define BONOBO_ARG_SET_BOOLEAN(a,v) (BONOBO_ARG_SET_GENERAL (a, v, TC_CORBA_boolean, CORBA_boolean, NULL))
</MACRO>
<MACRO>
<NAME>BONOBO_ARG_GET_SHORT</NAME>
#define BONOBO_ARG_GET_SHORT(a)     (BONOBO_ARG_GET_GENERAL (a, TC_CORBA_short, CORBA_short, NULL))
</MACRO>
<MACRO>
<NAME>BONOBO_ARG_SET_SHORT</NAME>
#define BONOBO_ARG_SET_SHORT(a,v)   (BONOBO_ARG_SET_GENERAL (a, v, TC_CORBA_short, CORBA_short, NULL))
</MACRO>
<MACRO>
<NAME>BONOBO_ARG_GET_INT</NAME>
#define BONOBO_ARG_GET_INT(a)       (BONOBO_ARG_GET_GENERAL (a, TC_CORBA_long, CORBA_long, NULL))
</MACRO>
<MACRO>
<NAME>BONOBO_ARG_SET_INT</NAME>
#define BONOBO_ARG_SET_INT(a,v)     (BONOBO_ARG_SET_GENERAL (a, v, TC_CORBA_long, CORBA_long, NULL))
</MACRO>
<MACRO>
<NAME>BONOBO_ARG_GET_LONG</NAME>
#define BONOBO_ARG_GET_LONG(a)      (BONOBO_ARG_GET_GENERAL (a, TC_CORBA_long, CORBA_long, NULL))
</MACRO>
<MACRO>
<NAME>BONOBO_ARG_SET_LONG</NAME>
#define BONOBO_ARG_SET_LONG(a,v)    (BONOBO_ARG_SET_GENERAL (a, v, TC_CORBA_long, CORBA_long, NULL))
</MACRO>
<MACRO>
<NAME>BONOBO_ARG_GET_LONGLONG</NAME>
#define BONOBO_ARG_GET_LONGLONG(a)  (BONOBO_ARG_GET_GENERAL (a, TC_CORBA_long_long, CORBA_long_long, NULL))
</MACRO>
<MACRO>
<NAME>BONOBO_ARG_SET_LONGLONG</NAME>
#define BONOBO_ARG_SET_LONGLONG(a,v) (BONOBO_ARG_SET_GENERAL (a, v, TC_CORBA_long_long, CORBA_long_long, NULL))
</MACRO>
<MACRO>
<NAME>BONOBO_ARG_GET_FLOAT</NAME>
#define BONOBO_ARG_GET_FLOAT(a)     (BONOBO_ARG_GET_GENERAL (a, TC_CORBA_float, CORBA_float, NULL))
</MACRO>
<MACRO>
<NAME>BONOBO_ARG_SET_FLOAT</NAME>
#define BONOBO_ARG_SET_FLOAT(a,v)   (BONOBO_ARG_SET_GENERAL (a, v, TC_CORBA_float, CORBA_float, NULL))
</MACRO>
<MACRO>
<NAME>BONOBO_ARG_GET_DOUBLE</NAME>
#define BONOBO_ARG_GET_DOUBLE(a)    (BONOBO_ARG_GET_GENERAL (a, TC_CORBA_double, CORBA_double, NULL))
</MACRO>
<MACRO>
<NAME>BONOBO_ARG_SET_DOUBLE</NAME>
#define BONOBO_ARG_SET_DOUBLE(a,v)  (BONOBO_ARG_SET_GENERAL (a, v, TC_CORBA_double, CORBA_double, NULL))
</MACRO>
<MACRO>
<NAME>BONOBO_ARG_GET_CHAR</NAME>
#define BONOBO_ARG_GET_CHAR(a)      (BONOBO_ARG_GET_GENERAL (a, TC_CORBA_char, CORBA_char, NULL))
</MACRO>
<MACRO>
<NAME>BONOBO_ARG_SET_CHAR</NAME>
#define BONOBO_ARG_SET_CHAR(a,v)    (BONOBO_ARG_SET_GENERAL (a, v, TC_CORBA_char, CORBA_char, NULL))
</MACRO>
<MACRO>
<NAME>BONOBO_ARG_GET_STRING</NAME>
#define BONOBO_ARG_GET_STRING(a)    (g_assert ((a)->_type->kind == CORBA_tk_string),\
				     *((CORBA_char **)(a->_value)))
</MACRO>
<MACRO>
<NAME>BONOBO_ARG_SET_STRING</NAME>
#define BONOBO_ARG_SET_STRING(a,v)  (g_assert ((a)->_type->kind == CORBA_tk_string), CORBA_free (*(char **)a->_value),\
				     *((CORBA_char **)(a->_value)) = CORBA_string_dup ((v)?(v):""))
</MACRO>
<MACRO>
<NAME>BONOBO_ARG_GET_STRING</NAME>
#define BONOBO_ARG_GET_STRING(a)    (*((CORBA_char **)(a->_value)))
</MACRO>
<MACRO>
<NAME>BONOBO_ARG_SET_STRING</NAME>
#define BONOBO_ARG_SET_STRING(a,v)  (CORBA_free (*(char **)a->_value),\
				     *((CORBA_char **)(a->_value)) = CORBA_string_dup ((v)?(v):""))
</MACRO>
<FUNCTION>
<NAME>bonobo_arg_new</NAME>
<RETURNS>BonoboArg     *</RETURNS>
BonoboArgType      t
</FUNCTION>
<FUNCTION>
<NAME>bonobo_arg_new_from</NAME>
<RETURNS>BonoboArg     *</RETURNS>
BonoboArgType      t,gconstpointer      data
</FUNCTION>
<FUNCTION>
<NAME>bonobo_arg_release</NAME>
<RETURNS>void  </RETURNS>
BonoboArg         *arg
</FUNCTION>
<FUNCTION>
<NAME>bonobo_arg_copy</NAME>
<RETURNS>BonoboArg     *</RETURNS>
const BonoboArg   *arg
</FUNCTION>
<FUNCTION>
<NAME>bonobo_arg_from_gvalue</NAME>
<RETURNS>void  </RETURNS>
BonoboArg         *a,const GValue      *value
</FUNCTION>
<FUNCTION>
<NAME>bonobo_arg_type_from_gtype</NAME>
<RETURNS>BonoboArgType  </RETURNS>
GType              t
</FUNCTION>
<FUNCTION>
<NAME>bonobo_arg_to_gvalue</NAME>
<RETURNS>void  </RETURNS>
GValue            *value,const BonoboArg   *arg
</FUNCTION>
<FUNCTION>
<NAME>bonobo_arg_type_to_gtype</NAME>
<RETURNS>GType  </RETURNS>
BonoboArgType      id
</FUNCTION>
<FUNCTION>
<NAME>bonobo_arg_is_equal</NAME>
<RETURNS>gboolean  </RETURNS>
const BonoboArg   *a,const BonoboArg   *b,CORBA_Environment *opt_ev
</FUNCTION>
<FUNCTION>
<NAME>bonobo_arg_type_is_equal</NAME>
<RETURNS>gboolean  </RETURNS>
BonoboArgType      a,BonoboArgType      b,CORBA_Environment *opt_ev
</FUNCTION>
<MACRO>
<NAME>ORBIT_IDL_SERIAL</NAME>
#define ORBIT_IDL_SERIAL 19
</MACRO>
<MACRO>
<NAME>ex_Bonobo_NotSupported</NAME>
#define ex_Bonobo_NotSupported "IDL:Bonobo/NotSupported:1.0"
</MACRO>
<MACRO>
<NAME>TC_IMPL_TC_Bonobo_NotSupported_0</NAME>
#define TC_IMPL_TC_Bonobo_NotSupported_0 'B'
</MACRO>
<MACRO>
<NAME>TC_IMPL_TC_Bonobo_NotSupported_1</NAME>
#define TC_IMPL_TC_Bonobo_NotSupported_1 'o'
</MACRO>
<MACRO>
<NAME>TC_IMPL_TC_Bonobo_NotSupported_2</NAME>
#define TC_IMPL_TC_Bonobo_NotSupported_2 'n'
</MACRO>
<MACRO>
<NAME>TC_IMPL_TC_Bonobo_NotSupported_3</NAME>
#define TC_IMPL_TC_Bonobo_NotSupported_3 'o'
</MACRO>
<MACRO>
<NAME>TC_IMPL_TC_Bonobo_NotSupported_4</NAME>
#define TC_IMPL_TC_Bonobo_NotSupported_4 'b'
</MACRO>
<MACRO>
<NAME>TC_IMPL_TC_Bonobo_NotSupported_5</NAME>
#define TC_IMPL_TC_Bonobo_NotSupported_5 'o'
</MACRO>
<MACRO>
<NAME>TC_Bonobo_NotSupported</NAME>
#define TC_Bonobo_NotSupported ((CORBA_TypeCode)&TC_Bonobo_NotSupported_struct)
</MACRO>
<MACRO>
<NAME>Bonobo_NotSupported__alloc</NAME>
#define Bonobo_NotSupported__alloc() ((Bonobo_NotSupported *)ORBit_small_alloc (TC_Bonobo_NotSupported))
</MACRO>
<MACRO>
<NAME>Bonobo_NotSupported__freekids</NAME>
#define Bonobo_NotSupported__freekids(m,d) ORBit_small_freekids (TC_Bonobo_NotSupported,(m),(d))
</MACRO>
<MACRO>
<NAME>ex_Bonobo_NotImplemented</NAME>
#define ex_Bonobo_NotImplemented "IDL:Bonobo/NotImplemented:1.0"
</MACRO>
<MACRO>
<NAME>TC_IMPL_TC_Bonobo_NotImplemented_0</NAME>
#define TC_IMPL_TC_Bonobo_NotImplemented_0 'B'
</MACRO>
<MACRO>
<NAME>TC_IMPL_TC_Bonobo_NotImplemented_1</NAME>
#define TC_IMPL_TC_Bonobo_NotImplemented_1 'o'
</MACRO>
<MACRO>
<NAME>TC_IMPL_TC_Bonobo_NotImplemented_2</NAME>
#define TC_IMPL_TC_Bonobo_NotImplemented_2 'n'
</MACRO>
<MACRO>
<NAME>TC_IMPL_TC_Bonobo_NotImplemented_3</NAME>
#define TC_IMPL_TC_Bonobo_NotImplemented_3 'o'
</MACRO>
<MACRO>
<NAME>TC_IMPL_TC_Bonobo_NotImplemented_4</NAME>
#define TC_IMPL_TC_Bonobo_NotImplemented_4 'b'
</MACRO>
<MACRO>
<NAME>TC_IMPL_TC_Bonobo_NotImplemented_5</NAME>
#define TC_IMPL_TC_Bonobo_NotImplemented_5 'o'
</MACRO>
<MACRO>
<NAME>TC_Bonobo_NotImplemented</NAME>
#define TC_Bonobo_NotImplemented ((CORBA_TypeCode)&TC_Bonobo_NotImplemented_struct)
</MACRO>
<MACRO>
<NAME>Bonobo_NotImplemented__alloc</NAME>
#define Bonobo_NotImplemented__alloc() ((Bonobo_NotImplemented *)ORBit_small_alloc (TC_Bonobo_NotImplemented))
</MACRO>
<MACRO>
<NAME>Bonobo_NotImplemented__freekids</NAME>
#define Bonobo_NotImplemented__freekids(m,d) ORBit_small_freekids (TC_Bonobo_NotImplemented,(m),(d))
</MACRO>
<MACRO>
<NAME>ex_Bonobo_IOError</NAME>
#define ex_Bonobo_IOError "IDL:Bonobo/IOError:1.0"
</MACRO>
<MACRO>
<NAME>TC_IMPL_TC_Bonobo_IOError_0</NAME>
#define TC_IMPL_TC_Bonobo_IOError_0 'B'
</MACRO>
<MACRO>
<NAME>TC_IMPL_TC_Bonobo_IOError_1</NAME>
#define TC_IMPL_TC_Bonobo_IOError_1 'o'
</MACRO>
<MACRO>
<NAME>TC_IMPL_TC_Bonobo_IOError_2</NAME>
#define TC_IMPL_TC_Bonobo_IOError_2 'n'
</MACRO>
<MACRO>
<NAME>TC_IMPL_TC_Bonobo_IOError_3</NAME>
#define TC_IMPL_TC_Bonobo_IOError_3 'o'
</MACRO>
<MACRO>
<NAME>TC_IMPL_TC_Bonobo_IOError_4</NAME>
#define TC_IMPL_TC_Bonobo_IOError_4 'b'
</MACRO>
<MACRO>
<NAME>TC_IMPL_TC_Bonobo_IOError_5</NAME>
#define TC_IMPL_TC_Bonobo_IOError_5 'o'
</MACRO>
<MACRO>
<NAME>TC_Bonobo_IOError</NAME>
#define TC_Bonobo_IOError ((CORBA_TypeCode)&TC_Bonobo_IOError_struct)
</MACRO>
<MACRO>
<NAME>Bonobo_IOError__alloc</NAME>
#define Bonobo_IOError__alloc() ((Bonobo_IOError *)ORBit_small_alloc (TC_Bonobo_IOError))
</MACRO>
<MACRO>
<NAME>Bonobo_IOError__freekids</NAME>
#define Bonobo_IOError__freekids(m,d) ORBit_small_freekids (TC_Bonobo_IOError,(m),(d))
</MACRO>
<MACRO>
<NAME>ex_Bonobo_BadArg</NAME>
#define ex_Bonobo_BadArg "IDL:Bonobo/BadArg:1.0"
</MACRO>
<MACRO>
<NAME>TC_IMPL_TC_Bonobo_BadArg_0</NAME>
#define TC_IMPL_TC_Bonobo_BadArg_0 'B'
</MACRO>
<MACRO>
<NAME>TC_IMPL_TC_Bonobo_BadArg_1</NAME>
#define TC_IMPL_TC_Bonobo_BadArg_1 'o'
</MACRO>
<MACRO>
<NAME>TC_IMPL_TC_Bonobo_BadArg_2</NAME>
#define TC_IMPL_TC_Bonobo_BadArg_2 'n'
</MACRO>
<MACRO>
<NAME>TC_IMPL_TC_Bonobo_BadArg_3</NAME>
#define TC_IMPL_TC_Bonobo_BadArg_3 'o'
</MACRO>
<MACRO>
<NAME>TC_IMPL_TC_Bonobo_BadArg_4</NAME>
#define TC_IMPL_TC_Bonobo_BadArg_4 'b'
</MACRO>
<MACRO>
<NAME>TC_IMPL_TC_Bonobo_BadArg_5</NAME>
#define TC_IMPL_TC_Bonobo_BadArg_5 'o'
</MACRO>
<MACRO>
<NAME>TC_Bonobo_BadArg</NAME>
#define TC_Bonobo_BadArg ((CORBA_TypeCode)&TC_Bonobo_BadArg_struct)
</MACRO>
<MACRO>
<NAME>Bonobo_BadArg__alloc</NAME>
#define Bonobo_BadArg__alloc() ((Bonobo_BadArg *)ORBit_small_alloc (TC_Bonobo_BadArg))
</MACRO>
<MACRO>
<NAME>Bonobo_BadArg__freekids</NAME>
#define Bonobo_BadArg__freekids(m,d) ORBit_small_freekids (TC_Bonobo_BadArg,(m),(d))
</MACRO>
<TYPEDEF>
<NAME>Bonobo_ResolveFlag</NAME>
   typedef CORBA_long Bonobo_ResolveFlag;
</TYPEDEF>
<MACRO>
<NAME>Bonobo_ResolveFlag_marshal</NAME>
#define Bonobo_ResolveFlag_marshal(x,y,z) CORBA_long_marshal((x),(y),(z))
</MACRO>
<MACRO>
<NAME>Bonobo_ResolveFlag_demarshal</NAME>
#define Bonobo_ResolveFlag_demarshal(x,y,z,i) CORBA_long_demarshal((x),(y),(z),(i))
</MACRO>
<MACRO>
<NAME>TC_IMPL_TC_Bonobo_ResolveFlag_0</NAME>
#define TC_IMPL_TC_Bonobo_ResolveFlag_0 'B'
</MACRO>
<MACRO>
<NAME>TC_IMPL_TC_Bonobo_ResolveFlag_1</NAME>
#define TC_IMPL_TC_Bonobo_ResolveFlag_1 'o'
</MACRO>
<MACRO>
<NAME>TC_IMPL_TC_Bonobo_ResolveFlag_2</NAME>
#define TC_IMPL_TC_Bonobo_ResolveFlag_2 'n'
</MACRO>
<MACRO>
<NAME>TC_IMPL_TC_Bonobo_ResolveFlag_3</NAME>
#define TC_IMPL_TC_Bonobo_ResolveFlag_3 'o'
</MACRO>
<MACRO>
<NAME>TC_IMPL_TC_Bonobo_ResolveFlag_4</NAME>
#define TC_IMPL_TC_Bonobo_ResolveFlag_4 'b'
</MACRO>
<MACRO>
<NAME>TC_IMPL_TC_Bonobo_ResolveFlag_5</NAME>
#define TC_IMPL_TC_Bonobo_ResolveFlag_5 'o'
</MACRO>
<MACRO>
<NAME>TC_Bonobo_ResolveFlag</NAME>
#define TC_Bonobo_ResolveFlag ((CORBA_TypeCode)&TC_Bonobo_ResolveFlag_struct)
</MACRO>
<MACRO>
<NAME>Bonobo_ResolveFlag__alloc</NAME>
#define Bonobo_ResolveFlag__alloc() ((Bonobo_ResolveFlag *)ORBit_small_alloc (TC_CORBA_long))
</MACRO>
<MACRO>
<NAME>Bonobo_ResolveFlag__freekids</NAME>
#define Bonobo_ResolveFlag__freekids(m,d) ORBit_small_freekids (TC_CORBA_long,(m),(d))
</MACRO>
<MACRO>
<NAME>Bonobo_MONIKER_ALLOW_USER_INTERACTION</NAME>
#define Bonobo_MONIKER_ALLOW_USER_INTERACTION 1
</MACRO>
<MACRO>
<NAME>TC_IMPL_TC_Bonobo_ResolveOptions_0</NAME>
#define TC_IMPL_TC_Bonobo_ResolveOptions_0 'B'
</MACRO>
<MACRO>
<NAME>TC_IMPL_TC_Bonobo_ResolveOptions_1</NAME>
#define TC_IMPL_TC_Bonobo_ResolveOptions_1 'o'
</MACRO>
<MACRO>
<NAME>TC_IMPL_TC_Bonobo_ResolveOptions_2</NAME>
#define TC_IMPL_TC_Bonobo_ResolveOptions_2 'n'
</MACRO>
<MACRO>
<NAME>TC_IMPL_TC_Bonobo_ResolveOptions_3</NAME>
#define TC_IMPL_TC_Bonobo_ResolveOptions_3 'o'
</MACRO>
<MACRO>
<NAME>TC_IMPL_TC_Bonobo_ResolveOptions_4</NAME>
#define TC_IMPL_TC_Bonobo_ResolveOptions_4 'b'
</MACRO>
<MACRO>
<NAME>TC_IMPL_TC_Bonobo_ResolveOptions_5</NAME>
#define TC_IMPL_TC_Bonobo_ResolveOptions_5 'o'
</MACRO>
<MACRO>
<NAME>TC_Bonobo_ResolveOptions</NAME>
#define TC_Bonobo_ResolveOptions ((CORBA_TypeCode)&TC_Bonobo_ResolveOptions_struct)
</MACRO>
<MACRO>
<NAME>Bonobo_ResolveOptions__alloc</NAME>
#define Bonobo_ResolveOptions__alloc() ((Bonobo_ResolveOptions *)ORBit_small_alloc (TC_Bonobo_ResolveOptions))
</MACRO>
<MACRO>
<NAME>Bonobo_ResolveOptions__freekids</NAME>
#define Bonobo_ResolveOptions__freekids(m,d) ORBit_small_freekids (TC_Bonobo_ResolveOptions,(m),(d))
</MACRO>
<MACRO>
<NAME>ORBIT_DECL_Bonobo_Moniker</NAME>
#define ORBIT_DECL_Bonobo_Moniker 1
</MACRO>
<MACRO>
<NAME>Bonobo_Moniker__freekids</NAME>
#define Bonobo_Moniker__freekids CORBA_Object__freekids
</MACRO>
<TYPEDEF>
<NAME>Bonobo_Moniker</NAME>
   typedef CORBA_Object Bonobo_Moniker;
</TYPEDEF>
<VARIABLE>
<NAME>Bonobo_Moniker__classid</NAME>
   extern CORBA_unsigned_long Bonobo_Moniker__classid;
</VARIABLE>
<MACRO>
<NAME>TC_IMPL_TC_Bonobo_Moniker_0</NAME>
#define TC_IMPL_TC_Bonobo_Moniker_0 'B'
</MACRO>
<MACRO>
<NAME>TC_IMPL_TC_Bonobo_Moniker_1</NAME>
#define TC_IMPL_TC_Bonobo_Moniker_1 'o'
</MACRO>
<MACRO>
<NAME>TC_IMPL_TC_Bonobo_Moniker_2</NAME>
#define TC_IMPL_TC_Bonobo_Moniker_2 'n'
</MACRO>
<MACRO>
<NAME>TC_IMPL_TC_Bonobo_Moniker_3</NAME>
#define TC_IMPL_TC_Bonobo_Moniker_3 'o'
</MACRO>
<MACRO>
<NAME>TC_IMPL_TC_Bonobo_Moniker_4</NAME>
#define TC_IMPL_TC_Bonobo_Moniker_4 'b'
</MACRO>
<MACRO>
<NAME>TC_IMPL_TC_Bonobo_Moniker_5</NAME>
#define TC_IMPL_TC_Bonobo_Moniker_5 'o'
</MACRO>
<MACRO>
<NAME>TC_Bonobo_Moniker</NAME>
#define TC_Bonobo_Moniker ((CORBA_TypeCode)&TC_Bonobo_Moniker_struct)
</MACRO>
<MACRO>
<NAME>ex_Bonobo_Moniker_InterfaceNotFound</NAME>
#define ex_Bonobo_Moniker_InterfaceNotFound "IDL:Bonobo/Moniker/InterfaceNotFound:1.0"
</MACRO>
<MACRO>
<NAME>TC_IMPL_TC_Bonobo_Moniker_InterfaceNotFound_0</NAME>
#define TC_IMPL_TC_Bonobo_Moniker_InterfaceNotFound_0 'B'
</MACRO>
<MACRO>
<NAME>TC_IMPL_TC_Bonobo_Moniker_InterfaceNotFound_1</NAME>
#define TC_IMPL_TC_Bonobo_Moniker_InterfaceNotFound_1 'o'
</MACRO>
<MACRO>
<NAME>TC_IMPL_TC_Bonobo_Moniker_InterfaceNotFound_2</NAME>
#define TC_IMPL_TC_Bonobo_Moniker_InterfaceNotFound_2 'n'
</MACRO>
<MACRO>
<NAME>TC_IMPL_TC_Bonobo_Moniker_InterfaceNotFound_3</NAME>
#define TC_IMPL_TC_Bonobo_Moniker_InterfaceNotFound_3 'o'
</MACRO>
<MACRO>
<NAME>TC_IMPL_TC_Bonobo_Moniker_InterfaceNotFound_4</NAME>
#define TC_IMPL_TC_Bonobo_Moniker_InterfaceNotFound_4 'b'
</MACRO>
<MACRO>
<NAME>TC_IMPL_TC_Bonobo_Moniker_InterfaceNotFound_5</NAME>
#define TC_IMPL_TC_Bonobo_Moniker_InterfaceNotFound_5 'o'
</MACRO>
<MACRO>
<NAME>TC_Bonobo_Moniker_InterfaceNotFound</NAME>
#define TC_Bonobo_Moniker_InterfaceNotFound ((CORBA_TypeCode)&TC_Bonobo_Moniker_InterfaceNotFound_struct)
</MACRO>
<MACRO>
<NAME>Bonobo_Moniker_InterfaceNotFound__alloc</NAME>
#define Bonobo_Moniker_InterfaceNotFound__alloc() ((Bonobo_Moniker_InterfaceNotFound *)ORBit_small_alloc (TC_Bonobo_Moniker_InterfaceNotFound))
</MACRO>
<MACRO>
<NAME>Bonobo_Moniker_InterfaceNotFound__freekids</NAME>
#define Bonobo_Moniker_InterfaceNotFound__freekids(m,d) ORBit_small_freekids (TC_Bonobo_Moniker_InterfaceNotFound,(m),(d))
</MACRO>
<MACRO>
<NAME>ex_Bonobo_Moniker_TimeOut</NAME>
#define ex_Bonobo_Moniker_TimeOut "IDL:Bonobo/Moniker/TimeOut:1.0"
</MACRO>
<MACRO>
<NAME>TC_IMPL_TC_Bonobo_Moniker_TimeOut_0</NAME>
#define TC_IMPL_TC_Bonobo_Moniker_TimeOut_0 'B'
</MACRO>
<MACRO>
<NAME>TC_IMPL_TC_Bonobo_Moniker_TimeOut_1</NAME>
#define TC_IMPL_TC_Bonobo_Moniker_TimeOut_1 'o'
</MACRO>
<MACRO>
<NAME>TC_IMPL_TC_Bonobo_Moniker_TimeOut_2</NAME>
#define TC_IMPL_TC_Bonobo_Moniker_TimeOut_2 'n'
</MACRO>
<MACRO>
<NAME>TC_IMPL_TC_Bonobo_Moniker_TimeOut_3</NAME>
#define TC_IMPL_TC_Bonobo_Moniker_TimeOut_3 'o'
</MACRO>
<MACRO>
<NAME>TC_IMPL_TC_Bonobo_Moniker_TimeOut_4</NAME>
#define TC_IMPL_TC_Bonobo_Moniker_TimeOut_4 'b'
</MACRO>
<MACRO>
<NAME>TC_IMPL_TC_Bonobo_Moniker_TimeOut_5</NAME>
#define TC_IMPL_TC_Bonobo_Moniker_TimeOut_5 'o'
</MACRO>
<MACRO>
<NAME>TC_Bonobo_Moniker_TimeOut</NAME>
#define TC_Bonobo_Moniker_TimeOut ((CORBA_TypeCode)&TC_Bonobo_Moniker_TimeOut_struct)
</MACRO>
<MACRO>
<NAME>Bonobo_Moniker_TimeOut__alloc</NAME>
#define Bonobo_Moniker_TimeOut__alloc() ((Bonobo_Moniker_TimeOut *)ORBit_small_alloc (TC_Bonobo_Moniker_TimeOut))
</MACRO>
<MACRO>
<NAME>Bonobo_Moniker_TimeOut__freekids</NAME>
#define Bonobo_Moniker_TimeOut__freekids(m,d) ORBit_small_freekids (TC_Bonobo_Moniker_TimeOut,(m),(d))
</MACRO>
<MACRO>
<NAME>ex_Bonobo_Moniker_InvalidSyntax</NAME>
#define ex_Bonobo_Moniker_InvalidSyntax "IDL:Bonobo/Moniker/InvalidSyntax:1.0"
</MACRO>
<MACRO>
<NAME>TC_IMPL_TC_Bonobo_Moniker_InvalidSyntax_0</NAME>
#define TC_IMPL_TC_Bonobo_Moniker_InvalidSyntax_0 'B'
</MACRO>
<MACRO>
<NAME>TC_IMPL_TC_Bonobo_Moniker_InvalidSyntax_1</NAME>
#define TC_IMPL_TC_Bonobo_Moniker_InvalidSyntax_1 'o'
</MACRO>
<MACRO>
<NAME>TC_IMPL_TC_Bonobo_Moniker_InvalidSyntax_2</NAME>
#define TC_IMPL_TC_Bonobo_Moniker_InvalidSyntax_2 'n'
</MACRO>
<MACRO>
<NAME>TC_IMPL_TC_Bonobo_Moniker_InvalidSyntax_3</NAME>
#define TC_IMPL_TC_Bonobo_Moniker_InvalidSyntax_3 'o'
</MACRO>
<MACRO>
<NAME>TC_IMPL_TC_Bonobo_Moniker_InvalidSyntax_4</NAME>
#define TC_IMPL_TC_Bonobo_Moniker_InvalidSyntax_4 'b'
</MACRO>
<MACRO>
<NAME>TC_IMPL_TC_Bonobo_Moniker_InvalidSyntax_5</NAME>
#define TC_IMPL_TC_Bonobo_Moniker_InvalidSyntax_5 'o'
</MACRO>
<MACRO>
<NAME>TC_Bonobo_Moniker_InvalidSyntax</NAME>
#define TC_Bonobo_Moniker_InvalidSyntax ((CORBA_TypeCode)&TC_Bonobo_Moniker_InvalidSyntax_struct)
</MACRO>
<MACRO>
<NAME>Bonobo_Moniker_InvalidSyntax__alloc</NAME>
#define Bonobo_Moniker_InvalidSyntax__alloc() ((Bonobo_Moniker_InvalidSyntax *)ORBit_small_alloc (TC_Bonobo_Moniker_InvalidSyntax))
</MACRO>
<MACRO>
<NAME>Bonobo_Moniker_InvalidSyntax__freekids</NAME>
#define Bonobo_Moniker_InvalidSyntax__freekids(m,d) ORBit_small_freekids (TC_Bonobo_Moniker_InvalidSyntax,(m),(d))
</MACRO>
<MACRO>
<NAME>ex_Bonobo_Moniker_UnknownPrefix</NAME>
#define ex_Bonobo_Moniker_UnknownPrefix "IDL:Bonobo/Moniker/UnknownPrefix:1.0"
</MACRO>
<MACRO>
<NAME>TC_IMPL_TC_Bonobo_Moniker_UnknownPrefix_0</NAME>
#define TC_IMPL_TC_Bonobo_Moniker_UnknownPrefix_0 'B'
</MACRO>
<MACRO>
<NAME>TC_IMPL_TC_Bonobo_Moniker_UnknownPrefix_1</NAME>
#define TC_IMPL_TC_Bonobo_Moniker_UnknownPrefix_1 'o'
</MACRO>
<MACRO>
<NAME>TC_IMPL_TC_Bonobo_Moniker_UnknownPrefix_2</NAME>
#define TC_IMPL_TC_Bonobo_Moniker_UnknownPrefix_2 'n'
</MACRO>
<MACRO>
<NAME>TC_IMPL_TC_Bonobo_Moniker_UnknownPrefix_3</NAME>
#define TC_IMPL_TC_Bonobo_Moniker_UnknownPrefix_3 'o'
</MACRO>
<MACRO>
<NAME>TC_IMPL_TC_Bonobo_Moniker_UnknownPrefix_4</NAME>
#define TC_IMPL_TC_Bonobo_Moniker_UnknownPrefix_4 'b'
</MACRO>
<MACRO>
<NAME>TC_IMPL_TC_Bonobo_Moniker_UnknownPrefix_5</NAME>
#define TC_IMPL_TC_Bonobo_Moniker_UnknownPrefix_5 'o'
</MACRO>
<MACRO>
<NAME>TC_Bonobo_Moniker_UnknownPrefix</NAME>
#define TC_Bonobo_Moniker_UnknownPrefix ((CORBA_TypeCode)&TC_Bonobo_Moniker_UnknownPrefix_struct)
</MACRO>
<MACRO>
<NAME>Bonobo_Moniker_UnknownPrefix__alloc</NAME>
#define Bonobo_Moniker_UnknownPrefix__alloc() ((Bonobo_Moniker_UnknownPrefix *)ORBit_small_alloc (TC_Bonobo_Moniker_UnknownPrefix))
</MACRO>
<MACRO>
<NAME>Bonobo_Moniker_UnknownPrefix__freekids</NAME>
#define Bonobo_Moniker_UnknownPrefix__freekids(m,d) ORBit_small_freekids (TC_Bonobo_Moniker_UnknownPrefix,(m),(d))
</MACRO>
<MACRO>
<NAME>ORBIT_DECL_Bonobo_MonikerExtender</NAME>
#define ORBIT_DECL_Bonobo_MonikerExtender 1
</MACRO>
<MACRO>
<NAME>Bonobo_MonikerExtender__freekids</NAME>
#define Bonobo_MonikerExtender__freekids CORBA_Object__freekids
</MACRO>
<TYPEDEF>
<NAME>Bonobo_MonikerExtender</NAME>
   typedef CORBA_Object Bonobo_MonikerExtender;
</TYPEDEF>
<VARIABLE>
<NAME>Bonobo_MonikerExtender__classid</NAME>
   extern CORBA_unsigned_long Bonobo_MonikerExtender__classid;
</VARIABLE>
<MACRO>
<NAME>TC_IMPL_TC_Bonobo_MonikerExtender_0</NAME>
#define TC_IMPL_TC_Bonobo_MonikerExtender_0 'B'
</MACRO>
<MACRO>
<NAME>TC_IMPL_TC_Bonobo_MonikerExtender_1</NAME>
#define TC_IMPL_TC_Bonobo_MonikerExtender_1 'o'
</MACRO>
<MACRO>
<NAME>TC_IMPL_TC_Bonobo_MonikerExtender_2</NAME>
#define TC_IMPL_TC_Bonobo_MonikerExtender_2 'n'
</MACRO>
<MACRO>
<NAME>TC_IMPL_TC_Bonobo_MonikerExtender_3</NAME>
#define TC_IMPL_TC_Bonobo_MonikerExtender_3 'o'
</MACRO>
<MACRO>
<NAME>TC_IMPL_TC_Bonobo_MonikerExtender_4</NAME>
#define TC_IMPL_TC_Bonobo_MonikerExtender_4 'b'
</MACRO>
<MACRO>
<NAME>TC_IMPL_TC_Bonobo_MonikerExtender_5</NAME>
#define TC_IMPL_TC_Bonobo_MonikerExtender_5 'o'
</MACRO>
<MACRO>
<NAME>TC_Bonobo_MonikerExtender</NAME>
#define TC_Bonobo_MonikerExtender ((CORBA_TypeCode)&TC_Bonobo_MonikerExtender_struct)
</MACRO>
<TYPEDEF>
<NAME>Bonobo_StorageInfoFields</NAME>
   typedef CORBA_long Bonobo_StorageInfoFields;
</TYPEDEF>
<MACRO>
<NAME>Bonobo_StorageInfoFields_marshal</NAME>
#define Bonobo_StorageInfoFields_marshal(x,y,z) CORBA_long_marshal((x),(y),(z))
</MACRO>
<MACRO>
<NAME>Bonobo_StorageInfoFields_demarshal</NAME>
#define Bonobo_StorageInfoFields_demarshal(x,y,z,i) CORBA_long_demarshal((x),(y),(z),(i))
</MACRO>
<MACRO>
<NAME>TC_IMPL_TC_Bonobo_StorageInfoFields_0</NAME>
#define TC_IMPL_TC_Bonobo_StorageInfoFields_0 'B'
</MACRO>
<MACRO>
<NAME>TC_IMPL_TC_Bonobo_StorageInfoFields_1</NAME>
#define TC_IMPL_TC_Bonobo_StorageInfoFields_1 'o'
</MACRO>
<MACRO>
<NAME>TC_IMPL_TC_Bonobo_StorageInfoFields_2</NAME>
#define TC_IMPL_TC_Bonobo_StorageInfoFields_2 'n'
</MACRO>
<MACRO>
<NAME>TC_IMPL_TC_Bonobo_StorageInfoFields_3</NAME>
#define TC_IMPL_TC_Bonobo_StorageInfoFields_3 'o'
</MACRO>
<MACRO>
<NAME>TC_IMPL_TC_Bonobo_StorageInfoFields_4</NAME>
#define TC_IMPL_TC_Bonobo_StorageInfoFields_4 'b'
</MACRO>
<MACRO>
<NAME>TC_IMPL_TC_Bonobo_StorageInfoFields_5</NAME>
#define TC_IMPL_TC_Bonobo_StorageInfoFields_5 'o'
</MACRO>
<MACRO>
<NAME>TC_Bonobo_StorageInfoFields</NAME>
#define TC_Bonobo_StorageInfoFields ((CORBA_TypeCode)&TC_Bonobo_StorageInfoFields_struct)
</MACRO>
<MACRO>
<NAME>Bonobo_StorageInfoFields__alloc</NAME>
#define Bonobo_StorageInfoFields__alloc() ((Bonobo_StorageInfoFields *)ORBit_small_alloc (TC_CORBA_long))
</MACRO>
<MACRO>
<NAME>Bonobo_StorageInfoFields__freekids</NAME>
#define Bonobo_StorageInfoFields__freekids(m,d) ORBit_small_freekids (TC_CORBA_long,(m),(d))
</MACRO>
<MACRO>
<NAME>Bonobo_FIELD_CONTENT_TYPE</NAME>
#define Bonobo_FIELD_CONTENT_TYPE 1
</MACRO>
<MACRO>
<NAME>Bonobo_FIELD_SIZE</NAME>
#define Bonobo_FIELD_SIZE 2
</MACRO>
<MACRO>
<NAME>Bonobo_FIELD_TYPE</NAME>
#define Bonobo_FIELD_TYPE 4
</MACRO>
<TYPEDEF>
<NAME>Bonobo_ContentType</NAME>
   typedef CORBA_string Bonobo_ContentType;
</TYPEDEF>
<MACRO>
<NAME>Bonobo_ContentType_marshal</NAME>
#define Bonobo_ContentType_marshal(x,y,z) CORBA_string_marshal((x),(y),(z))
</MACRO>
<MACRO>
<NAME>Bonobo_ContentType_demarshal</NAME>
#define Bonobo_ContentType_demarshal(x,y,z,i) CORBA_string_demarshal((x),(y),(z),(i))
</MACRO>
<MACRO>
<NAME>TC_IMPL_TC_Bonobo_ContentType_0</NAME>
#define TC_IMPL_TC_Bonobo_ContentType_0 'B'
</MACRO>
<MACRO>
<NAME>TC_IMPL_TC_Bonobo_ContentType_1</NAME>
#define TC_IMPL_TC_Bonobo_ContentType_1 'o'
</MACRO>
<MACRO>
<NAME>TC_IMPL_TC_Bonobo_ContentType_2</NAME>
#define TC_IMPL_TC_Bonobo_ContentType_2 'n'
</MACRO>
<MACRO>
<NAME>TC_IMPL_TC_Bonobo_ContentType_3</NAME>
#define TC_IMPL_TC_Bonobo_ContentType_3 'o'
</MACRO>
<MACRO>
<NAME>TC_IMPL_TC_Bonobo_ContentType_4</NAME>
#define TC_IMPL_TC_Bonobo_ContentType_4 'b'
</MACRO>
<MACRO>
<NAME>TC_IMPL_TC_Bonobo_ContentType_5</NAME>
#define TC_IMPL_TC_Bonobo_ContentType_5 'o'
</MACRO>
<MACRO>
<NAME>TC_Bonobo_ContentType</NAME>
#define TC_Bonobo_ContentType ((CORBA_TypeCode)&TC_Bonobo_ContentType_struct)
</MACRO>
<MACRO>
<NAME>Bonobo_ContentType__alloc</NAME>
#define Bonobo_ContentType__alloc() ((Bonobo_ContentType *)ORBit_small_alloc (TC_CORBA_string))
</MACRO>
<MACRO>
<NAME>Bonobo_ContentType__freekids</NAME>
#define Bonobo_ContentType__freekids(m,d) ORBit_small_freekids (TC_CORBA_string,(m),(d))
</MACRO>
<ENUM>
<NAME>Bonobo_StorageType</NAME>
   typedef enum
   {
      Bonobo_STORAGE_TYPE_REGULAR,
      Bonobo_STORAGE_TYPE_DIRECTORY
   }
   Bonobo_StorageType;
</ENUM>
<MACRO>
<NAME>TC_IMPL_TC_Bonobo_StorageType_0</NAME>
#define TC_IMPL_TC_Bonobo_StorageType_0 'B'
</MACRO>
<MACRO>
<NAME>TC_IMPL_TC_Bonobo_StorageType_1</NAME>
#define TC_IMPL_TC_Bonobo_StorageType_1 'o'
</MACRO>
<MACRO>
<NAME>TC_IMPL_TC_Bonobo_StorageType_2</NAME>
#define TC_IMPL_TC_Bonobo_StorageType_2 'n'
</MACRO>
<MACRO>
<NAME>TC_IMPL_TC_Bonobo_StorageType_3</NAME>
#define TC_IMPL_TC_Bonobo_StorageType_3 'o'
</MACRO>
<MACRO>
<NAME>TC_IMPL_TC_Bonobo_StorageType_4</NAME>
#define TC_IMPL_TC_Bonobo_StorageType_4 'b'
</MACRO>
<MACRO>
<NAME>TC_IMPL_TC_Bonobo_StorageType_5</NAME>
#define TC_IMPL_TC_Bonobo_StorageType_5 'o'
</MACRO>
<MACRO>
<NAME>TC_Bonobo_StorageType</NAME>
#define TC_Bonobo_StorageType ((CORBA_TypeCode)&TC_Bonobo_StorageType_struct)
</MACRO>
<MACRO>
<NAME>TC_IMPL_TC_Bonobo_StorageInfo_0</NAME>
#define TC_IMPL_TC_Bonobo_StorageInfo_0 'B'
</MACRO>
<MACRO>
<NAME>TC_IMPL_TC_Bonobo_StorageInfo_1</NAME>
#define TC_IMPL_TC_Bonobo_StorageInfo_1 'o'
</MACRO>
<MACRO>
<NAME>TC_IMPL_TC_Bonobo_StorageInfo_2</NAME>
#define TC_IMPL_TC_Bonobo_StorageInfo_2 'n'
</MACRO>
<MACRO>
<NAME>TC_IMPL_TC_Bonobo_StorageInfo_3</NAME>
#define TC_IMPL_TC_Bonobo_StorageInfo_3 'o'
</MACRO>
<MACRO>
<NAME>TC_IMPL_TC_Bonobo_StorageInfo_4</NAME>
#define TC_IMPL_TC_Bonobo_StorageInfo_4 'b'
</MACRO>
<MACRO>
<NAME>TC_IMPL_TC_Bonobo_StorageInfo_5</NAME>
#define TC_IMPL_TC_Bonobo_StorageInfo_5 'o'
</MACRO>
<MACRO>
<NAME>TC_Bonobo_StorageInfo</NAME>
#define TC_Bonobo_StorageInfo ((CORBA_TypeCode)&TC_Bonobo_StorageInfo_struct)
</MACRO>
<MACRO>
<NAME>Bonobo_StorageInfo__alloc</NAME>
#define Bonobo_StorageInfo__alloc() ((Bonobo_StorageInfo *)ORBit_small_alloc (TC_Bonobo_StorageInfo))
</MACRO>
<MACRO>
<NAME>Bonobo_StorageInfo__freekids</NAME>
#define Bonobo_StorageInfo__freekids(m,d) ORBit_small_freekids (TC_Bonobo_StorageInfo,(m),(d))
</MACRO>
<MACRO>
<NAME>ORBIT_DECL_Bonobo_Stream</NAME>
#define ORBIT_DECL_Bonobo_Stream 1
</MACRO>
<MACRO>
<NAME>Bonobo_Stream__freekids</NAME>
#define Bonobo_Stream__freekids CORBA_Object__freekids
</MACRO>
<TYPEDEF>
<NAME>Bonobo_Stream</NAME>
   typedef CORBA_Object Bonobo_Stream;
</TYPEDEF>
<VARIABLE>
<NAME>Bonobo_Stream__classid</NAME>
   extern CORBA_unsigned_long Bonobo_Stream__classid;
</VARIABLE>
<MACRO>
<NAME>TC_IMPL_TC_Bonobo_Stream_0</NAME>
#define TC_IMPL_TC_Bonobo_Stream_0 'B'
</MACRO>
<MACRO>
<NAME>TC_IMPL_TC_Bonobo_Stream_1</NAME>
#define TC_IMPL_TC_Bonobo_Stream_1 'o'
</MACRO>
<MACRO>
<NAME>TC_IMPL_TC_Bonobo_Stream_2</NAME>
#define TC_IMPL_TC_Bonobo_Stream_2 'n'
</MACRO>
<MACRO>
<NAME>TC_IMPL_TC_Bonobo_Stream_3</NAME>
#define TC_IMPL_TC_Bonobo_Stream_3 'o'
</MACRO>
<MACRO>
<NAME>TC_IMPL_TC_Bonobo_Stream_4</NAME>
#define TC_IMPL_TC_Bonobo_Stream_4 'b'
</MACRO>
<MACRO>
<NAME>TC_IMPL_TC_Bonobo_Stream_5</NAME>
#define TC_IMPL_TC_Bonobo_Stream_5 'o'
</MACRO>
<MACRO>
<NAME>TC_Bonobo_Stream</NAME>
#define TC_Bonobo_Stream ((CORBA_TypeCode)&TC_Bonobo_Stream_struct)
</MACRO>
<MACRO>
<NAME>ORBIT_DECL_CORBA_sequence_CORBA_octet</NAME>
#define ORBIT_DECL_CORBA_sequence_CORBA_octet 1
</MACRO>
<MACRO>
<NAME>ORBIT_IMPL_CORBA_sequence_CORBA_octet_0</NAME>
#define ORBIT_IMPL_CORBA_sequence_CORBA_octet_0 'B'
</MACRO>
<MACRO>
<NAME>ORBIT_IMPL_CORBA_sequence_CORBA_octet_1</NAME>
#define ORBIT_IMPL_CORBA_sequence_CORBA_octet_1 'o'
</MACRO>
<MACRO>
<NAME>ORBIT_IMPL_CORBA_sequence_CORBA_octet_2</NAME>
#define ORBIT_IMPL_CORBA_sequence_CORBA_octet_2 'n'
</MACRO>
<MACRO>
<NAME>ORBIT_IMPL_CORBA_sequence_CORBA_octet_3</NAME>
#define ORBIT_IMPL_CORBA_sequence_CORBA_octet_3 'o'
</MACRO>
<MACRO>
<NAME>ORBIT_IMPL_CORBA_sequence_CORBA_octet_4</NAME>
#define ORBIT_IMPL_CORBA_sequence_CORBA_octet_4 'b'
</MACRO>
<MACRO>
<NAME>ORBIT_IMPL_CORBA_sequence_CORBA_octet_5</NAME>
#define ORBIT_IMPL_CORBA_sequence_CORBA_octet_5 'o'
</MACRO>
<MACRO>
<NAME>TC_IMPL_TC_CORBA_sequence_CORBA_octet_0</NAME>
#define TC_IMPL_TC_CORBA_sequence_CORBA_octet_0 'B'
</MACRO>
<MACRO>
<NAME>TC_IMPL_TC_CORBA_sequence_CORBA_octet_1</NAME>
#define TC_IMPL_TC_CORBA_sequence_CORBA_octet_1 'o'
</MACRO>
<MACRO>
<NAME>TC_IMPL_TC_CORBA_sequence_CORBA_octet_2</NAME>
#define TC_IMPL_TC_CORBA_sequence_CORBA_octet_2 'n'
</MACRO>
<MACRO>
<NAME>TC_IMPL_TC_CORBA_sequence_CORBA_octet_3</NAME>
#define TC_IMPL_TC_CORBA_sequence_CORBA_octet_3 'o'
</MACRO>
<MACRO>
<NAME>TC_IMPL_TC_CORBA_sequence_CORBA_octet_4</NAME>
#define TC_IMPL_TC_CORBA_sequence_CORBA_octet_4 'b'
</MACRO>
<MACRO>
<NAME>TC_IMPL_TC_CORBA_sequence_CORBA_octet_5</NAME>
#define TC_IMPL_TC_CORBA_sequence_CORBA_octet_5 'o'
</MACRO>
<MACRO>
<NAME>TC_CORBA_sequence_CORBA_octet</NAME>
#define TC_CORBA_sequence_CORBA_octet ((CORBA_TypeCode)&TC_CORBA_sequence_CORBA_octet_struct)
</MACRO>
<MACRO>
<NAME>CORBA_sequence_CORBA_octet__alloc</NAME>
#define CORBA_sequence_CORBA_octet__alloc() ((CORBA_sequence_CORBA_octet *)ORBit_small_alloc (TC_CORBA_sequence_CORBA_octet))
</MACRO>
<MACRO>
<NAME>CORBA_sequence_CORBA_octet__freekids</NAME>
#define CORBA_sequence_CORBA_octet__freekids(m,d) ORBit_small_freekids (TC_CORBA_sequence_CORBA_octet,(m),(d))
</MACRO>
<MACRO>
<NAME>CORBA_sequence_CORBA_octet_allocbuf</NAME>
#define CORBA_sequence_CORBA_octet_allocbuf(l) ORBit_small_allocbuf (TC_CORBA_sequence_CORBA_octet, (l))
</MACRO>
<MACRO>
<NAME>CORBA_sequence_CORBA_octet_allocbuf</NAME>
#define CORBA_sequence_CORBA_octet_allocbuf(l) ORBit_small_allocbuf (TC_CORBA_sequence_CORBA_octet, (l))
</MACRO>
<TYPEDEF>
<NAME>Bonobo_Stream_iobuf</NAME>
   typedef CORBA_sequence_CORBA_octet Bonobo_Stream_iobuf;
</TYPEDEF>
<MACRO>
<NAME>Bonobo_Stream_iobuf_marshal</NAME>
#define Bonobo_Stream_iobuf_marshal(x,y,z) CORBA_sequence_CORBA_octet_marshal((x),(y),(z))
</MACRO>
<MACRO>
<NAME>Bonobo_Stream_iobuf_demarshal</NAME>
#define Bonobo_Stream_iobuf_demarshal(x,y,z,i) CORBA_sequence_CORBA_octet_demarshal((x),(y),(z),(i))
</MACRO>
<MACRO>
<NAME>TC_IMPL_TC_Bonobo_Stream_iobuf_0</NAME>
#define TC_IMPL_TC_Bonobo_Stream_iobuf_0 'B'
</MACRO>
<MACRO>
<NAME>TC_IMPL_TC_Bonobo_Stream_iobuf_1</NAME>
#define TC_IMPL_TC_Bonobo_Stream_iobuf_1 'o'
</MACRO>
<MACRO>
<NAME>TC_IMPL_TC_Bonobo_Stream_iobuf_2</NAME>
#define TC_IMPL_TC_Bonobo_Stream_iobuf_2 'n'
</MACRO>
<MACRO>
<NAME>TC_IMPL_TC_Bonobo_Stream_iobuf_3</NAME>
#define TC_IMPL_TC_Bonobo_Stream_iobuf_3 'o'
</MACRO>
<MACRO>
<NAME>TC_IMPL_TC_Bonobo_Stream_iobuf_4</NAME>
#define TC_IMPL_TC_Bonobo_Stream_iobuf_4 'b'
</MACRO>
<MACRO>
<NAME>TC_IMPL_TC_Bonobo_Stream_iobuf_5</NAME>
#define TC_IMPL_TC_Bonobo_Stream_iobuf_5 'o'
</MACRO>
<MACRO>
<NAME>TC_Bonobo_Stream_iobuf</NAME>
#define TC_Bonobo_Stream_iobuf ((CORBA_TypeCode)&TC_Bonobo_Stream_iobuf_struct)
</MACRO>
<MACRO>
<NAME>Bonobo_Stream_iobuf__alloc</NAME>
#define Bonobo_Stream_iobuf__alloc() ((Bonobo_Stream_iobuf *)ORBit_small_alloc (TC_CORBA_sequence_CORBA_octet))
</MACRO>
<MACRO>
<NAME>Bonobo_Stream_iobuf__freekids</NAME>
#define Bonobo_Stream_iobuf__freekids(m,d) ORBit_small_freekids (TC_CORBA_sequence_CORBA_octet,(m),(d))
</MACRO>
<MACRO>
<NAME>Bonobo_Stream_iobuf_allocbuf</NAME>
#define Bonobo_Stream_iobuf_allocbuf(l) ORBit_small_allocbuf (TC_CORBA_sequence_CORBA_octet, (l))
</MACRO>
<MACRO>
<NAME>ex_Bonobo_Stream_NoPermission</NAME>
#define ex_Bonobo_Stream_NoPermission "IDL:Bonobo/Stream/NoPermission:1.0"
</MACRO>
<MACRO>
<NAME>TC_IMPL_TC_Bonobo_Stream_NoPermission_0</NAME>
#define TC_IMPL_TC_Bonobo_Stream_NoPermission_0 'B'
</MACRO>
<MACRO>
<NAME>TC_IMPL_TC_Bonobo_Stream_NoPermission_1</NAME>
#define TC_IMPL_TC_Bonobo_Stream_NoPermission_1 'o'
</MACRO>
<MACRO>
<NAME>TC_IMPL_TC_Bonobo_Stream_NoPermission_2</NAME>
#define TC_IMPL_TC_Bonobo_Stream_NoPermission_2 'n'
</MACRO>
<MACRO>
<NAME>TC_IMPL_TC_Bonobo_Stream_NoPermission_3</NAME>
#define TC_IMPL_TC_Bonobo_Stream_NoPermission_3 'o'
</MACRO>
<MACRO>
<NAME>TC_IMPL_TC_Bonobo_Stream_NoPermission_4</NAME>
#define TC_IMPL_TC_Bonobo_Stream_NoPermission_4 'b'
</MACRO>
<MACRO>
<NAME>TC_IMPL_TC_Bonobo_Stream_NoPermission_5</NAME>
#define TC_IMPL_TC_Bonobo_Stream_NoPermission_5 'o'
</MACRO>
<MACRO>
<NAME>TC_Bonobo_Stream_NoPermission</NAME>
#define TC_Bonobo_Stream_NoPermission ((CORBA_TypeCode)&TC_Bonobo_Stream_NoPermission_struct)
</MACRO>
<MACRO>
<NAME>Bonobo_Stream_NoPermission__alloc</NAME>
#define Bonobo_Stream_NoPermission__alloc() ((Bonobo_Stream_NoPermission *)ORBit_small_alloc (TC_Bonobo_Stream_NoPermission))
</MACRO>
<MACRO>
<NAME>Bonobo_Stream_NoPermission__freekids</NAME>
#define Bonobo_Stream_NoPermission__freekids(m,d) ORBit_small_freekids (TC_Bonobo_Stream_NoPermission,(m),(d))
</MACRO>
<MACRO>
<NAME>ex_Bonobo_Stream_NotSupported</NAME>
#define ex_Bonobo_Stream_NotSupported "IDL:Bonobo/Stream/NotSupported:1.0"
</MACRO>
<MACRO>
<NAME>TC_IMPL_TC_Bonobo_Stream_NotSupported_0</NAME>
#define TC_IMPL_TC_Bonobo_Stream_NotSupported_0 'B'
</MACRO>
<MACRO>
<NAME>TC_IMPL_TC_Bonobo_Stream_NotSupported_1</NAME>
#define TC_IMPL_TC_Bonobo_Stream_NotSupported_1 'o'
</MACRO>
<MACRO>
<NAME>TC_IMPL_TC_Bonobo_Stream_NotSupported_2</NAME>
#define TC_IMPL_TC_Bonobo_Stream_NotSupported_2 'n'
</MACRO>
<MACRO>
<NAME>TC_IMPL_TC_Bonobo_Stream_NotSupported_3</NAME>
#define TC_IMPL_TC_Bonobo_Stream_NotSupported_3 'o'
</MACRO>
<MACRO>
<NAME>TC_IMPL_TC_Bonobo_Stream_NotSupported_4</NAME>
#define TC_IMPL_TC_Bonobo_Stream_NotSupported_4 'b'
</MACRO>
<MACRO>
<NAME>TC_IMPL_TC_Bonobo_Stream_NotSupported_5</NAME>
#define TC_IMPL_TC_Bonobo_Stream_NotSupported_5 'o'
</MACRO>
<MACRO>
<NAME>TC_Bonobo_Stream_NotSupported</NAME>
#define TC_Bonobo_Stream_NotSupported ((CORBA_TypeCode)&TC_Bonobo_Stream_NotSupported_struct)
</MACRO>
<MACRO>
<NAME>Bonobo_Stream_NotSupported__alloc</NAME>
#define Bonobo_Stream_NotSupported__alloc() ((Bonobo_Stream_NotSupported *)ORBit_small_alloc (TC_Bonobo_Stream_NotSupported))
</MACRO>
<MACRO>
<NAME>Bonobo_Stream_NotSupported__freekids</NAME>
#define Bonobo_Stream_NotSupported__freekids(m,d) ORBit_small_freekids (TC_Bonobo_Stream_NotSupported,(m),(d))
</MACRO>
<MACRO>
<NAME>ex_Bonobo_Stream_IOError</NAME>
#define ex_Bonobo_Stream_IOError "IDL:Bonobo/Stream/IOError:1.0"
</MACRO>
<MACRO>
<NAME>TC_IMPL_TC_Bonobo_Stream_IOError_0</NAME>
#define TC_IMPL_TC_Bonobo_Stream_IOError_0 'B'
</MACRO>
<MACRO>
<NAME>TC_IMPL_TC_Bonobo_Stream_IOError_1</NAME>
#define TC_IMPL_TC_Bonobo_Stream_IOError_1 'o'
</MACRO>
<MACRO>
<NAME>TC_IMPL_TC_Bonobo_Stream_IOError_2</NAME>
#define TC_IMPL_TC_Bonobo_Stream_IOError_2 'n'
</MACRO>
<MACRO>
<NAME>TC_IMPL_TC_Bonobo_Stream_IOError_3</NAME>
#define TC_IMPL_TC_Bonobo_Stream_IOError_3 'o'
</MACRO>
<MACRO>
<NAME>TC_IMPL_TC_Bonobo_Stream_IOError_4</NAME>
#define TC_IMPL_TC_Bonobo_Stream_IOError_4 'b'
</MACRO>
<MACRO>
<NAME>TC_IMPL_TC_Bonobo_Stream_IOError_5</NAME>
#define TC_IMPL_TC_Bonobo_Stream_IOError_5 'o'
</MACRO>
<MACRO>
<NAME>TC_Bonobo_Stream_IOError</NAME>
#define TC_Bonobo_Stream_IOError ((CORBA_TypeCode)&TC_Bonobo_Stream_IOError_struct)
</MACRO>
<MACRO>
<NAME>Bonobo_Stream_IOError__alloc</NAME>
#define Bonobo_Stream_IOError__alloc() ((Bonobo_Stream_IOError *)ORBit_small_alloc (TC_Bonobo_Stream_IOError))
</MACRO>
<MACRO>
<NAME>Bonobo_Stream_IOError__freekids</NAME>
#define Bonobo_Stream_IOError__freekids(m,d) ORBit_small_freekids (TC_Bonobo_Stream_IOError,(m),(d))
</MACRO>
<ENUM>
<NAME>Bonobo_Stream_SeekType</NAME>
   typedef enum
   {
      Bonobo_Stream_SEEK_SET,
      Bonobo_Stream_SEEK_CUR,
      Bonobo_Stream_SEEK_END
   }
   Bonobo_Stream_SeekType;
</ENUM>
<MACRO>
<NAME>TC_IMPL_TC_Bonobo_Stream_SeekType_0</NAME>
#define TC_IMPL_TC_Bonobo_Stream_SeekType_0 'B'
</MACRO>
<MACRO>
<NAME>TC_IMPL_TC_Bonobo_Stream_SeekType_1</NAME>
#define TC_IMPL_TC_Bonobo_Stream_SeekType_1 'o'
</MACRO>
<MACRO>
<NAME>TC_IMPL_TC_Bonobo_Stream_SeekType_2</NAME>
#define TC_IMPL_TC_Bonobo_Stream_SeekType_2 'n'
</MACRO>
<MACRO>
<NAME>TC_IMPL_TC_Bonobo_Stream_SeekType_3</NAME>
#define TC_IMPL_TC_Bonobo_Stream_SeekType_3 'o'
</MACRO>
<MACRO>
<NAME>TC_IMPL_TC_Bonobo_Stream_SeekType_4</NAME>
#define TC_IMPL_TC_Bonobo_Stream_SeekType_4 'b'
</MACRO>
<MACRO>
<NAME>TC_IMPL_TC_Bonobo_Stream_SeekType_5</NAME>
#define TC_IMPL_TC_Bonobo_Stream_SeekType_5 'o'
</MACRO>
<MACRO>
<NAME>TC_Bonobo_Stream_SeekType</NAME>
#define TC_Bonobo_Stream_SeekType ((CORBA_TypeCode)&TC_Bonobo_Stream_SeekType_struct)
</MACRO>
<MACRO>
<NAME>ORBIT_DECL_Bonobo_Storage</NAME>
#define ORBIT_DECL_Bonobo_Storage 1
</MACRO>
<MACRO>
<NAME>Bonobo_Storage__freekids</NAME>
#define Bonobo_Storage__freekids CORBA_Object__freekids
</MACRO>
<TYPEDEF>
<NAME>Bonobo_Storage</NAME>
   typedef CORBA_Object Bonobo_Storage;
</TYPEDEF>
<VARIABLE>
<NAME>Bonobo_Storage__classid</NAME>
   extern CORBA_unsigned_long Bonobo_Storage__classid;
</VARIABLE>
<MACRO>
<NAME>TC_IMPL_TC_Bonobo_Storage_0</NAME>
#define TC_IMPL_TC_Bonobo_Storage_0 'B'
</MACRO>
<MACRO>
<NAME>TC_IMPL_TC_Bonobo_Storage_1</NAME>
#define TC_IMPL_TC_Bonobo_Storage_1 'o'
</MACRO>
<MACRO>
<NAME>TC_IMPL_TC_Bonobo_Storage_2</NAME>
#define TC_IMPL_TC_Bonobo_Storage_2 'n'
</MACRO>
<MACRO>
<NAME>TC_IMPL_TC_Bonobo_Storage_3</NAME>
#define TC_IMPL_TC_Bonobo_Storage_3 'o'
</MACRO>
<MACRO>
<NAME>TC_IMPL_TC_Bonobo_Storage_4</NAME>
#define TC_IMPL_TC_Bonobo_Storage_4 'b'
</MACRO>
<MACRO>
<NAME>TC_IMPL_TC_Bonobo_Storage_5</NAME>
#define TC_IMPL_TC_Bonobo_Storage_5 'o'
</MACRO>
<MACRO>
<NAME>TC_Bonobo_Storage</NAME>
#define TC_Bonobo_Storage ((CORBA_TypeCode)&TC_Bonobo_Storage_struct)
</MACRO>
<MACRO>
<NAME>ORBIT_DECL_CORBA_sequence_Bonobo_StorageInfo</NAME>
#define ORBIT_DECL_CORBA_sequence_Bonobo_StorageInfo 1
</MACRO>
<MACRO>
<NAME>ORBIT_IMPL_CORBA_sequence_Bonobo_StorageInfo_0</NAME>
#define ORBIT_IMPL_CORBA_sequence_Bonobo_StorageInfo_0 'B'
</MACRO>
<MACRO>
<NAME>ORBIT_IMPL_CORBA_sequence_Bonobo_StorageInfo_1</NAME>
#define ORBIT_IMPL_CORBA_sequence_Bonobo_StorageInfo_1 'o'
</MACRO>
<MACRO>
<NAME>ORBIT_IMPL_CORBA_sequence_Bonobo_StorageInfo_2</NAME>
#define ORBIT_IMPL_CORBA_sequence_Bonobo_StorageInfo_2 'n'
</MACRO>
<MACRO>
<NAME>ORBIT_IMPL_CORBA_sequence_Bonobo_StorageInfo_3</NAME>
#define ORBIT_IMPL_CORBA_sequence_Bonobo_StorageInfo_3 'o'
</MACRO>
<MACRO>
<NAME>ORBIT_IMPL_CORBA_sequence_Bonobo_StorageInfo_4</NAME>
#define ORBIT_IMPL_CORBA_sequence_Bonobo_StorageInfo_4 'b'
</MACRO>
<MACRO>
<NAME>ORBIT_IMPL_CORBA_sequence_Bonobo_StorageInfo_5</NAME>
#define ORBIT_IMPL_CORBA_sequence_Bonobo_StorageInfo_5 'o'
</MACRO>
<MACRO>
<NAME>TC_IMPL_TC_CORBA_sequence_Bonobo_StorageInfo_0</NAME>
#define TC_IMPL_TC_CORBA_sequence_Bonobo_StorageInfo_0 'B'
</MACRO>
<MACRO>
<NAME>TC_IMPL_TC_CORBA_sequence_Bonobo_StorageInfo_1</NAME>
#define TC_IMPL_TC_CORBA_sequence_Bonobo_StorageInfo_1 'o'
</MACRO>
<MACRO>
<NAME>TC_IMPL_TC_CORBA_sequence_Bonobo_StorageInfo_2</NAME>
#define TC_IMPL_TC_CORBA_sequence_Bonobo_StorageInfo_2 'n'
</MACRO>
<MACRO>
<NAME>TC_IMPL_TC_CORBA_sequence_Bonobo_StorageInfo_3</NAME>
#define TC_IMPL_TC_CORBA_sequence_Bonobo_StorageInfo_3 'o'
</MACRO>
<MACRO>
<NAME>TC_IMPL_TC_CORBA_sequence_Bonobo_StorageInfo_4</NAME>
#define TC_IMPL_TC_CORBA_sequence_Bonobo_StorageInfo_4 'b'
</MACRO>
<MACRO>
<NAME>TC_IMPL_TC_CORBA_sequence_Bonobo_StorageInfo_5</NAME>
#define TC_IMPL_TC_CORBA_sequence_Bonobo_StorageInfo_5 'o'
</MACRO>
<MACRO>
<NAME>TC_CORBA_sequence_Bonobo_StorageInfo</NAME>
#define TC_CORBA_sequence_Bonobo_StorageInfo ((CORBA_TypeCode)&TC_CORBA_sequence_Bonobo_StorageInfo_struct)
</MACRO>
<MACRO>
<NAME>CORBA_sequence_Bonobo_StorageInfo__alloc</NAME>
#define CORBA_sequence_Bonobo_StorageInfo__alloc() ((CORBA_sequence_Bonobo_StorageInfo *)ORBit_small_alloc (TC_CORBA_sequence_Bonobo_StorageInfo))
</MACRO>
<MACRO>
<NAME>CORBA_sequence_Bonobo_StorageInfo__freekids</NAME>
#define CORBA_sequence_Bonobo_StorageInfo__freekids(m,d) ORBit_small_freekids (TC_CORBA_sequence_Bonobo_StorageInfo,(m),(d))
</MACRO>
<MACRO>
<NAME>CORBA_sequence_Bonobo_StorageInfo_allocbuf</NAME>
#define CORBA_sequence_Bonobo_StorageInfo_allocbuf(l) ORBit_small_allocbuf (TC_CORBA_sequence_Bonobo_StorageInfo, (l))
</MACRO>
<MACRO>
<NAME>CORBA_sequence_Bonobo_StorageInfo_allocbuf</NAME>
#define CORBA_sequence_Bonobo_StorageInfo_allocbuf(l) ORBit_small_allocbuf (TC_CORBA_sequence_Bonobo_StorageInfo, (l))
</MACRO>
<TYPEDEF>
<NAME>Bonobo_Storage_DirectoryList</NAME>
   typedef CORBA_sequence_Bonobo_StorageInfo Bonobo_Storage_DirectoryList;
</TYPEDEF>
<MACRO>
<NAME>Bonobo_Storage_DirectoryList_marshal</NAME>
#define Bonobo_Storage_DirectoryList_marshal(x,y,z) CORBA_sequence_Bonobo_StorageInfo_marshal((x),(y),(z))
</MACRO>
<MACRO>
<NAME>Bonobo_Storage_DirectoryList_demarshal</NAME>
#define Bonobo_Storage_DirectoryList_demarshal(x,y,z,i) CORBA_sequence_Bonobo_StorageInfo_demarshal((x),(y),(z),(i))
</MACRO>
<MACRO>
<NAME>TC_IMPL_TC_Bonobo_Storage_DirectoryList_0</NAME>
#define TC_IMPL_TC_Bonobo_Storage_DirectoryList_0 'B'
</MACRO>
<MACRO>
<NAME>TC_IMPL_TC_Bonobo_Storage_DirectoryList_1</NAME>
#define TC_IMPL_TC_Bonobo_Storage_DirectoryList_1 'o'
</MACRO>
<MACRO>
<NAME>TC_IMPL_TC_Bonobo_Storage_DirectoryList_2</NAME>
#define TC_IMPL_TC_Bonobo_Storage_DirectoryList_2 'n'
</MACRO>
<MACRO>
<NAME>TC_IMPL_TC_Bonobo_Storage_DirectoryList_3</NAME>
#define TC_IMPL_TC_Bonobo_Storage_DirectoryList_3 'o'
</MACRO>
<MACRO>
<NAME>TC_IMPL_TC_Bonobo_Storage_DirectoryList_4</NAME>
#define TC_IMPL_TC_Bonobo_Storage_DirectoryList_4 'b'
</MACRO>
<MACRO>
<NAME>TC_IMPL_TC_Bonobo_Storage_DirectoryList_5</NAME>
#define TC_IMPL_TC_Bonobo_Storage_DirectoryList_5 'o'
</MACRO>
<MACRO>
<NAME>TC_Bonobo_Storage_DirectoryList</NAME>
#define TC_Bonobo_Storage_DirectoryList ((CORBA_TypeCode)&TC_Bonobo_Storage_DirectoryList_struct)
</MACRO>
<MACRO>
<NAME>Bonobo_Storage_DirectoryList__alloc</NAME>
#define Bonobo_Storage_DirectoryList__alloc() ((Bonobo_Storage_DirectoryList *)ORBit_small_alloc (TC_CORBA_sequence_Bonobo_StorageInfo))
</MACRO>
<MACRO>
<NAME>Bonobo_Storage_DirectoryList__freekids</NAME>
#define Bonobo_Storage_DirectoryList__freekids(m,d) ORBit_small_freekids (TC_CORBA_sequence_Bonobo_StorageInfo,(m),(d))
</MACRO>
<MACRO>
<NAME>Bonobo_Storage_DirectoryList_allocbuf</NAME>
#define Bonobo_Storage_DirectoryList_allocbuf(l) ORBit_small_allocbuf (TC_CORBA_sequence_Bonobo_StorageInfo, (l))
</MACRO>
<TYPEDEF>
<NAME>Bonobo_Storage_OpenMode</NAME>
   typedef CORBA_long Bonobo_Storage_OpenMode;
</TYPEDEF>
<MACRO>
<NAME>Bonobo_Storage_OpenMode_marshal</NAME>
#define Bonobo_Storage_OpenMode_marshal(x,y,z) CORBA_long_marshal((x),(y),(z))
</MACRO>
<MACRO>
<NAME>Bonobo_Storage_OpenMode_demarshal</NAME>
#define Bonobo_Storage_OpenMode_demarshal(x,y,z,i) CORBA_long_demarshal((x),(y),(z),(i))
</MACRO>
<MACRO>
<NAME>TC_IMPL_TC_Bonobo_Storage_OpenMode_0</NAME>
#define TC_IMPL_TC_Bonobo_Storage_OpenMode_0 'B'
</MACRO>
<MACRO>
<NAME>TC_IMPL_TC_Bonobo_Storage_OpenMode_1</NAME>
#define TC_IMPL_TC_Bonobo_Storage_OpenMode_1 'o'
</MACRO>
<MACRO>
<NAME>TC_IMPL_TC_Bonobo_Storage_OpenMode_2</NAME>
#define TC_IMPL_TC_Bonobo_Storage_OpenMode_2 'n'
</MACRO>
<MACRO>
<NAME>TC_IMPL_TC_Bonobo_Storage_OpenMode_3</NAME>
#define TC_IMPL_TC_Bonobo_Storage_OpenMode_3 'o'
</MACRO>
<MACRO>
<NAME>TC_IMPL_TC_Bonobo_Storage_OpenMode_4</NAME>
#define TC_IMPL_TC_Bonobo_Storage_OpenMode_4 'b'
</MACRO>
<MACRO>
<NAME>TC_IMPL_TC_Bonobo_Storage_OpenMode_5</NAME>
#define TC_IMPL_TC_Bonobo_Storage_OpenMode_5 'o'
</MACRO>
<MACRO>
<NAME>TC_Bonobo_Storage_OpenMode</NAME>
#define TC_Bonobo_Storage_OpenMode ((CORBA_TypeCode)&TC_Bonobo_Storage_OpenMode_struct)
</MACRO>
<MACRO>
<NAME>Bonobo_Storage_OpenMode__alloc</NAME>
#define Bonobo_Storage_OpenMode__alloc() ((Bonobo_Storage_OpenMode *)ORBit_small_alloc (TC_CORBA_long))
</MACRO>
<MACRO>
<NAME>Bonobo_Storage_OpenMode__freekids</NAME>
#define Bonobo_Storage_OpenMode__freekids(m,d) ORBit_small_freekids (TC_CORBA_long,(m),(d))
</MACRO>
<MACRO>
<NAME>Bonobo_Storage_READ</NAME>
#define Bonobo_Storage_READ 1
</MACRO>
<MACRO>
<NAME>Bonobo_Storage_WRITE</NAME>
#define Bonobo_Storage_WRITE 2
</MACRO>
<MACRO>
<NAME>Bonobo_Storage_CREATE</NAME>
#define Bonobo_Storage_CREATE 4
</MACRO>
<MACRO>
<NAME>Bonobo_Storage_FAILIFEXIST</NAME>
#define Bonobo_Storage_FAILIFEXIST 8
</MACRO>
<MACRO>
<NAME>Bonobo_Storage_COMPRESSED</NAME>
#define Bonobo_Storage_COMPRESSED 16
</MACRO>
<MACRO>
<NAME>Bonobo_Storage_TRANSACTED</NAME>
#define Bonobo_Storage_TRANSACTED 32
</MACRO>
<MACRO>
<NAME>ex_Bonobo_Storage_IOError</NAME>
#define ex_Bonobo_Storage_IOError "IDL:Bonobo/Storage/IOError:1.0"
</MACRO>
<MACRO>
<NAME>TC_IMPL_TC_Bonobo_Storage_IOError_0</NAME>
#define TC_IMPL_TC_Bonobo_Storage_IOError_0 'B'
</MACRO>
<MACRO>
<NAME>TC_IMPL_TC_Bonobo_Storage_IOError_1</NAME>
#define TC_IMPL_TC_Bonobo_Storage_IOError_1 'o'
</MACRO>
<MACRO>
<NAME>TC_IMPL_TC_Bonobo_Storage_IOError_2</NAME>
#define TC_IMPL_TC_Bonobo_Storage_IOError_2 'n'
</MACRO>
<MACRO>
<NAME>TC_IMPL_TC_Bonobo_Storage_IOError_3</NAME>
#define TC_IMPL_TC_Bonobo_Storage_IOError_3 'o'
</MACRO>
<MACRO>
<NAME>TC_IMPL_TC_Bonobo_Storage_IOError_4</NAME>
#define TC_IMPL_TC_Bonobo_Storage_IOError_4 'b'
</MACRO>
<MACRO>
<NAME>TC_IMPL_TC_Bonobo_Storage_IOError_5</NAME>
#define TC_IMPL_TC_Bonobo_Storage_IOError_5 'o'
</MACRO>
<MACRO>
<NAME>TC_Bonobo_Storage_IOError</NAME>
#define TC_Bonobo_Storage_IOError ((CORBA_TypeCode)&TC_Bonobo_Storage_IOError_struct)
</MACRO>
<MACRO>
<NAME>Bonobo_Storage_IOError__alloc</NAME>
#define Bonobo_Storage_IOError__alloc() ((Bonobo_Storage_IOError *)ORBit_small_alloc (TC_Bonobo_Storage_IOError))
</MACRO>
<MACRO>
<NAME>Bonobo_Storage_IOError__freekids</NAME>
#define Bonobo_Storage_IOError__freekids(m,d) ORBit_small_freekids (TC_Bonobo_Storage_IOError,(m),(d))
</MACRO>
<MACRO>
<NAME>ex_Bonobo_Storage_NameExists</NAME>
#define ex_Bonobo_Storage_NameExists "IDL:Bonobo/Storage/NameExists:1.0"
</MACRO>
<MACRO>
<NAME>TC_IMPL_TC_Bonobo_Storage_NameExists_0</NAME>
#define TC_IMPL_TC_Bonobo_Storage_NameExists_0 'B'
</MACRO>
<MACRO>
<NAME>TC_IMPL_TC_Bonobo_Storage_NameExists_1</NAME>
#define TC_IMPL_TC_Bonobo_Storage_NameExists_1 'o'
</MACRO>
<MACRO>
<NAME>TC_IMPL_TC_Bonobo_Storage_NameExists_2</NAME>
#define TC_IMPL_TC_Bonobo_Storage_NameExists_2 'n'
</MACRO>
<MACRO>
<NAME>TC_IMPL_TC_Bonobo_Storage_NameExists_3</NAME>
#define TC_IMPL_TC_Bonobo_Storage_NameExists_3 'o'
</MACRO>
<MACRO>
<NAME>TC_IMPL_TC_Bonobo_Storage_NameExists_4</NAME>
#define TC_IMPL_TC_Bonobo_Storage_NameExists_4 'b'
</MACRO>
<MACRO>
<NAME>TC_IMPL_TC_Bonobo_Storage_NameExists_5</NAME>
#define TC_IMPL_TC_Bonobo_Storage_NameExists_5 'o'
</MACRO>
<MACRO>
<NAME>TC_Bonobo_Storage_NameExists</NAME>
#define TC_Bonobo_Storage_NameExists ((CORBA_TypeCode)&TC_Bonobo_Storage_NameExists_struct)
</MACRO>
<MACRO>
<NAME>Bonobo_Storage_NameExists__alloc</NAME>
#define Bonobo_Storage_NameExists__alloc() ((Bonobo_Storage_NameExists *)ORBit_small_alloc (TC_Bonobo_Storage_NameExists))
</MACRO>
<MACRO>
<NAME>Bonobo_Storage_NameExists__freekids</NAME>
#define Bonobo_Storage_NameExists__freekids(m,d) ORBit_small_freekids (TC_Bonobo_Storage_NameExists,(m),(d))
</MACRO>
<MACRO>
<NAME>ex_Bonobo_Storage_NotFound</NAME>
#define ex_Bonobo_Storage_NotFound "IDL:Bonobo/Storage/NotFound:1.0"
</MACRO>
<MACRO>
<NAME>TC_IMPL_TC_Bonobo_Storage_NotFound_0</NAME>
#define TC_IMPL_TC_Bonobo_Storage_NotFound_0 'B'
</MACRO>
<MACRO>
<NAME>TC_IMPL_TC_Bonobo_Storage_NotFound_1</NAME>
#define TC_IMPL_TC_Bonobo_Storage_NotFound_1 'o'
</MACRO>
<MACRO>
<NAME>TC_IMPL_TC_Bonobo_Storage_NotFound_2</NAME>
#define TC_IMPL_TC_Bonobo_Storage_NotFound_2 'n'
</MACRO>
<MACRO>
<NAME>TC_IMPL_TC_Bonobo_Storage_NotFound_3</NAME>
#define TC_IMPL_TC_Bonobo_Storage_NotFound_3 'o'
</MACRO>
<MACRO>
<NAME>TC_IMPL_TC_Bonobo_Storage_NotFound_4</NAME>
#define TC_IMPL_TC_Bonobo_Storage_NotFound_4 'b'
</MACRO>
<MACRO>
<NAME>TC_IMPL_TC_Bonobo_Storage_NotFound_5</NAME>
#define TC_IMPL_TC_Bonobo_Storage_NotFound_5 'o'
</MACRO>
<MACRO>
<NAME>TC_Bonobo_Storage_NotFound</NAME>
#define TC_Bonobo_Storage_NotFound ((CORBA_TypeCode)&TC_Bonobo_Storage_NotFound_struct)
</MACRO>
<MACRO>
<NAME>Bonobo_Storage_NotFound__alloc</NAME>
#define Bonobo_Storage_NotFound__alloc() ((Bonobo_Storage_NotFound *)ORBit_small_alloc (TC_Bonobo_Storage_NotFound))
</MACRO>
<MACRO>
<NAME>Bonobo_Storage_NotFound__freekids</NAME>
#define Bonobo_Storage_NotFound__freekids(m,d) ORBit_small_freekids (TC_Bonobo_Storage_NotFound,(m),(d))
</MACRO>
<MACRO>
<NAME>ex_Bonobo_Storage_NoPermission</NAME>
#define ex_Bonobo_Storage_NoPermission "IDL:Bonobo/Storage/NoPermission:1.0"
</MACRO>
<MACRO>
<NAME>TC_IMPL_TC_Bonobo_Storage_NoPermission_0</NAME>
#define TC_IMPL_TC_Bonobo_Storage_NoPermission_0 'B'
</MACRO>
<MACRO>
<NAME>TC_IMPL_TC_Bonobo_Storage_NoPermission_1</NAME>
#define TC_IMPL_TC_Bonobo_Storage_NoPermission_1 'o'
</MACRO>
<MACRO>
<NAME>TC_IMPL_TC_Bonobo_Storage_NoPermission_2</NAME>
#define TC_IMPL_TC_Bonobo_Storage_NoPermission_2 'n'
</MACRO>
<MACRO>
<NAME>TC_IMPL_TC_Bonobo_Storage_NoPermission_3</NAME>
#define TC_IMPL_TC_Bonobo_Storage_NoPermission_3 'o'
</MACRO>
<MACRO>
<NAME>TC_IMPL_TC_Bonobo_Storage_NoPermission_4</NAME>
#define TC_IMPL_TC_Bonobo_Storage_NoPermission_4 'b'
</MACRO>
<MACRO>
<NAME>TC_IMPL_TC_Bonobo_Storage_NoPermission_5</NAME>
#define TC_IMPL_TC_Bonobo_Storage_NoPermission_5 'o'
</MACRO>
<MACRO>
<NAME>TC_Bonobo_Storage_NoPermission</NAME>
#define TC_Bonobo_Storage_NoPermission ((CORBA_TypeCode)&TC_Bonobo_Storage_NoPermission_struct)
</MACRO>
<MACRO>
<NAME>Bonobo_Storage_NoPermission__alloc</NAME>
#define Bonobo_Storage_NoPermission__alloc() ((Bonobo_Storage_NoPermission *)ORBit_small_alloc (TC_Bonobo_Storage_NoPermission))
</MACRO>
<MACRO>
<NAME>Bonobo_Storage_NoPermission__freekids</NAME>
#define Bonobo_Storage_NoPermission__freekids(m,d) ORBit_small_freekids (TC_Bonobo_Storage_NoPermission,(m),(d))
</MACRO>
<MACRO>
<NAME>ex_Bonobo_Storage_NotSupported</NAME>
#define ex_Bonobo_Storage_NotSupported "IDL:Bonobo/Storage/NotSupported:1.0"
</MACRO>
<MACRO>
<NAME>TC_IMPL_TC_Bonobo_Storage_NotSupported_0</NAME>
#define TC_IMPL_TC_Bonobo_Storage_NotSupported_0 'B'
</MACRO>
<MACRO>
<NAME>TC_IMPL_TC_Bonobo_Storage_NotSupported_1</NAME>
#define TC_IMPL_TC_Bonobo_Storage_NotSupported_1 'o'
</MACRO>
<MACRO>
<NAME>TC_IMPL_TC_Bonobo_Storage_NotSupported_2</NAME>
#define TC_IMPL_TC_Bonobo_Storage_NotSupported_2 'n'
</MACRO>
<MACRO>
<NAME>TC_IMPL_TC_Bonobo_Storage_NotSupported_3</NAME>
#define TC_IMPL_TC_Bonobo_Storage_NotSupported_3 'o'
</MACRO>
<MACRO>
<NAME>TC_IMPL_TC_Bonobo_Storage_NotSupported_4</NAME>
#define TC_IMPL_TC_Bonobo_Storage_NotSupported_4 'b'
</MACRO>
<MACRO>
<NAME>TC_IMPL_TC_Bonobo_Storage_NotSupported_5</NAME>
#define TC_IMPL_TC_Bonobo_Storage_NotSupported_5 'o'
</MACRO>
<MACRO>
<NAME>TC_Bonobo_Storage_NotSupported</NAME>
#define TC_Bonobo_Storage_NotSupported ((CORBA_TypeCode)&TC_Bonobo_Storage_NotSupported_struct)
</MACRO>
<MACRO>
<NAME>Bonobo_Storage_NotSupported__alloc</NAME>
#define Bonobo_Storage_NotSupported__alloc() ((Bonobo_Storage_NotSupported *)ORBit_small_alloc (TC_Bonobo_Storage_NotSupported))
</MACRO>
<MACRO>
<NAME>Bonobo_Storage_NotSupported__freekids</NAME>
#define Bonobo_Storage_NotSupported__freekids(m,d) ORBit_small_freekids (TC_Bonobo_Storage_NotSupported,(m),(d))
</MACRO>
<MACRO>
<NAME>ex_Bonobo_Storage_NotStream</NAME>
#define ex_Bonobo_Storage_NotStream "IDL:Bonobo/Storage/NotStream:1.0"
</MACRO>
<MACRO>
<NAME>TC_IMPL_TC_Bonobo_Storage_NotStream_0</NAME>
#define TC_IMPL_TC_Bonobo_Storage_NotStream_0 'B'
</MACRO>
<MACRO>
<NAME>TC_IMPL_TC_Bonobo_Storage_NotStream_1</NAME>
#define TC_IMPL_TC_Bonobo_Storage_NotStream_1 'o'
</MACRO>
<MACRO>
<NAME>TC_IMPL_TC_Bonobo_Storage_NotStream_2</NAME>
#define TC_IMPL_TC_Bonobo_Storage_NotStream_2 'n'
</MACRO>
<MACRO>
<NAME>TC_IMPL_TC_Bonobo_Storage_NotStream_3</NAME>
#define TC_IMPL_TC_Bonobo_Storage_NotStream_3 'o'
</MACRO>
<MACRO>
<NAME>TC_IMPL_TC_Bonobo_Storage_NotStream_4</NAME>
#define TC_IMPL_TC_Bonobo_Storage_NotStream_4 'b'
</MACRO>
<MACRO>
<NAME>TC_IMPL_TC_Bonobo_Storage_NotStream_5</NAME>
#define TC_IMPL_TC_Bonobo_Storage_NotStream_5 'o'
</MACRO>
<MACRO>
<NAME>TC_Bonobo_Storage_NotStream</NAME>
#define TC_Bonobo_Storage_NotStream ((CORBA_TypeCode)&TC_Bonobo_Storage_NotStream_struct)
</MACRO>
<MACRO>
<NAME>Bonobo_Storage_NotStream__alloc</NAME>
#define Bonobo_Storage_NotStream__alloc() ((Bonobo_Storage_NotStream *)ORBit_small_alloc (TC_Bonobo_Storage_NotStream))
</MACRO>
<MACRO>
<NAME>Bonobo_Storage_NotStream__freekids</NAME>
#define Bonobo_Storage_NotStream__freekids(m,d) ORBit_small_freekids (TC_Bonobo_Storage_NotStream,(m),(d))
</MACRO>
<MACRO>
<NAME>ex_Bonobo_Storage_NotStorage</NAME>
#define ex_Bonobo_Storage_NotStorage "IDL:Bonobo/Storage/NotStorage:1.0"
</MACRO>
<MACRO>
<NAME>TC_IMPL_TC_Bonobo_Storage_NotStorage_0</NAME>
#define TC_IMPL_TC_Bonobo_Storage_NotStorage_0 'B'
</MACRO>
<MACRO>
<NAME>TC_IMPL_TC_Bonobo_Storage_NotStorage_1</NAME>
#define TC_IMPL_TC_Bonobo_Storage_NotStorage_1 'o'
</MACRO>
<MACRO>
<NAME>TC_IMPL_TC_Bonobo_Storage_NotStorage_2</NAME>
#define TC_IMPL_TC_Bonobo_Storage_NotStorage_2 'n'
</MACRO>
<MACRO>
<NAME>TC_IMPL_TC_Bonobo_Storage_NotStorage_3</NAME>
#define TC_IMPL_TC_Bonobo_Storage_NotStorage_3 'o'
</MACRO>
<MACRO>
<NAME>TC_IMPL_TC_Bonobo_Storage_NotStorage_4</NAME>
#define TC_IMPL_TC_Bonobo_Storage_NotStorage_4 'b'
</MACRO>
<MACRO>
<NAME>TC_IMPL_TC_Bonobo_Storage_NotStorage_5</NAME>
#define TC_IMPL_TC_Bonobo_Storage_NotStorage_5 'o'
</MACRO>
<MACRO>
<NAME>TC_Bonobo_Storage_NotStorage</NAME>
#define TC_Bonobo_Storage_NotStorage ((CORBA_TypeCode)&TC_Bonobo_Storage_NotStorage_struct)
</MACRO>
<MACRO>
<NAME>Bonobo_Storage_NotStorage__alloc</NAME>
#define Bonobo_Storage_NotStorage__alloc() ((Bonobo_Storage_NotStorage *)ORBit_small_alloc (TC_Bonobo_Storage_NotStorage))
</MACRO>
<MACRO>
<NAME>Bonobo_Storage_NotStorage__freekids</NAME>
#define Bonobo_Storage_NotStorage__freekids(m,d) ORBit_small_freekids (TC_Bonobo_Storage_NotStorage,(m),(d))
</MACRO>
<MACRO>
<NAME>ex_Bonobo_Storage_NotEmpty</NAME>
#define ex_Bonobo_Storage_NotEmpty "IDL:Bonobo/Storage/NotEmpty:1.0"
</MACRO>
<MACRO>
<NAME>TC_IMPL_TC_Bonobo_Storage_NotEmpty_0</NAME>
#define TC_IMPL_TC_Bonobo_Storage_NotEmpty_0 'B'
</MACRO>
<MACRO>
<NAME>TC_IMPL_TC_Bonobo_Storage_NotEmpty_1</NAME>
#define TC_IMPL_TC_Bonobo_Storage_NotEmpty_1 'o'
</MACRO>
<MACRO>
<NAME>TC_IMPL_TC_Bonobo_Storage_NotEmpty_2</NAME>
#define TC_IMPL_TC_Bonobo_Storage_NotEmpty_2 'n'
</MACRO>
<MACRO>
<NAME>TC_IMPL_TC_Bonobo_Storage_NotEmpty_3</NAME>
#define TC_IMPL_TC_Bonobo_Storage_NotEmpty_3 'o'
</MACRO>
<MACRO>
<NAME>TC_IMPL_TC_Bonobo_Storage_NotEmpty_4</NAME>
#define TC_IMPL_TC_Bonobo_Storage_NotEmpty_4 'b'
</MACRO>
<MACRO>
<NAME>TC_IMPL_TC_Bonobo_Storage_NotEmpty_5</NAME>
#define TC_IMPL_TC_Bonobo_Storage_NotEmpty_5 'o'
</MACRO>
<MACRO>
<NAME>TC_Bonobo_Storage_NotEmpty</NAME>
#define TC_Bonobo_Storage_NotEmpty ((CORBA_TypeCode)&TC_Bonobo_Storage_NotEmpty_struct)
</MACRO>
<MACRO>
<NAME>Bonobo_Storage_NotEmpty__alloc</NAME>
#define Bonobo_Storage_NotEmpty__alloc() ((Bonobo_Storage_NotEmpty *)ORBit_small_alloc (TC_Bonobo_Storage_NotEmpty))
</MACRO>
<MACRO>
<NAME>Bonobo_Storage_NotEmpty__freekids</NAME>
#define Bonobo_Storage_NotEmpty__freekids(m,d) ORBit_small_freekids (TC_Bonobo_Storage_NotEmpty,(m),(d))
</MACRO>
<MACRO>
<NAME>ORBIT_DECL_Bonobo_MonikerContext</NAME>
#define ORBIT_DECL_Bonobo_MonikerContext 1
</MACRO>
<MACRO>
<NAME>Bonobo_MonikerContext__freekids</NAME>
#define Bonobo_MonikerContext__freekids CORBA_Object__freekids
</MACRO>
<TYPEDEF>
<NAME>Bonobo_MonikerContext</NAME>
   typedef CORBA_Object Bonobo_MonikerContext;
</TYPEDEF>
<VARIABLE>
<NAME>Bonobo_MonikerContext__classid</NAME>
   extern CORBA_unsigned_long Bonobo_MonikerContext__classid;
</VARIABLE>
<MACRO>
<NAME>TC_IMPL_TC_Bonobo_MonikerContext_0</NAME>
#define TC_IMPL_TC_Bonobo_MonikerContext_0 'B'
</MACRO>
<MACRO>
<NAME>TC_IMPL_TC_Bonobo_MonikerContext_1</NAME>
#define TC_IMPL_TC_Bonobo_MonikerContext_1 'o'
</MACRO>
<MACRO>
<NAME>TC_IMPL_TC_Bonobo_MonikerContext_2</NAME>
#define TC_IMPL_TC_Bonobo_MonikerContext_2 'n'
</MACRO>
<MACRO>
<NAME>TC_IMPL_TC_Bonobo_MonikerContext_3</NAME>
#define TC_IMPL_TC_Bonobo_MonikerContext_3 'o'
</MACRO>
<MACRO>
<NAME>TC_IMPL_TC_Bonobo_MonikerContext_4</NAME>
#define TC_IMPL_TC_Bonobo_MonikerContext_4 'b'
</MACRO>
<MACRO>
<NAME>TC_IMPL_TC_Bonobo_MonikerContext_5</NAME>
#define TC_IMPL_TC_Bonobo_MonikerContext_5 'o'
</MACRO>
<MACRO>
<NAME>TC_Bonobo_MonikerContext</NAME>
#define TC_Bonobo_MonikerContext ((CORBA_TypeCode)&TC_Bonobo_MonikerContext_struct)
</MACRO>
<MACRO>
<NAME>ORBIT_DECL_Bonobo_RunningContext</NAME>
#define ORBIT_DECL_Bonobo_RunningContext 1
</MACRO>
<MACRO>
<NAME>Bonobo_RunningContext__freekids</NAME>
#define Bonobo_RunningContext__freekids CORBA_Object__freekids
</MACRO>
<TYPEDEF>
<NAME>Bonobo_RunningContext</NAME>
   typedef CORBA_Object Bonobo_RunningContext;
</TYPEDEF>
<VARIABLE>
<NAME>Bonobo_RunningContext__classid</NAME>
   extern CORBA_unsigned_long Bonobo_RunningContext__classid;
</VARIABLE>
<MACRO>
<NAME>TC_IMPL_TC_Bonobo_RunningContext_0</NAME>
#define TC_IMPL_TC_Bonobo_RunningContext_0 'B'
</MACRO>
<MACRO>
<NAME>TC_IMPL_TC_Bonobo_RunningContext_1</NAME>
#define TC_IMPL_TC_Bonobo_RunningContext_1 'o'
</MACRO>
<MACRO>
<NAME>TC_IMPL_TC_Bonobo_RunningContext_2</NAME>
#define TC_IMPL_TC_Bonobo_RunningContext_2 'n'
</MACRO>
<MACRO>
<NAME>TC_IMPL_TC_Bonobo_RunningContext_3</NAME>
#define TC_IMPL_TC_Bonobo_RunningContext_3 'o'
</MACRO>
<MACRO>
<NAME>TC_IMPL_TC_Bonobo_RunningContext_4</NAME>
#define TC_IMPL_TC_Bonobo_RunningContext_4 'b'
</MACRO>
<MACRO>
<NAME>TC_IMPL_TC_Bonobo_RunningContext_5</NAME>
#define TC_IMPL_TC_Bonobo_RunningContext_5 'o'
</MACRO>
<MACRO>
<NAME>TC_Bonobo_RunningContext</NAME>
#define TC_Bonobo_RunningContext ((CORBA_TypeCode)&TC_Bonobo_RunningContext_struct)
</MACRO>
<MACRO>
<NAME>ORBIT_DECL_Bonobo_Persist</NAME>
#define ORBIT_DECL_Bonobo_Persist 1
</MACRO>
<MACRO>
<NAME>Bonobo_Persist__freekids</NAME>
#define Bonobo_Persist__freekids CORBA_Object__freekids
</MACRO>
<TYPEDEF>
<NAME>Bonobo_Persist</NAME>
   typedef CORBA_Object Bonobo_Persist;
</TYPEDEF>
<VARIABLE>
<NAME>Bonobo_Persist__classid</NAME>
   extern CORBA_unsigned_long Bonobo_Persist__classid;
</VARIABLE>
<MACRO>
<NAME>TC_IMPL_TC_Bonobo_Persist_0</NAME>
#define TC_IMPL_TC_Bonobo_Persist_0 'B'
</MACRO>
<MACRO>
<NAME>TC_IMPL_TC_Bonobo_Persist_1</NAME>
#define TC_IMPL_TC_Bonobo_Persist_1 'o'
</MACRO>
<MACRO>
<NAME>TC_IMPL_TC_Bonobo_Persist_2</NAME>
#define TC_IMPL_TC_Bonobo_Persist_2 'n'
</MACRO>
<MACRO>
<NAME>TC_IMPL_TC_Bonobo_Persist_3</NAME>
#define TC_IMPL_TC_Bonobo_Persist_3 'o'
</MACRO>
<MACRO>
<NAME>TC_IMPL_TC_Bonobo_Persist_4</NAME>
#define TC_IMPL_TC_Bonobo_Persist_4 'b'
</MACRO>
<MACRO>
<NAME>TC_IMPL_TC_Bonobo_Persist_5</NAME>
#define TC_IMPL_TC_Bonobo_Persist_5 'o'
</MACRO>
<MACRO>
<NAME>TC_Bonobo_Persist</NAME>
#define TC_Bonobo_Persist ((CORBA_TypeCode)&TC_Bonobo_Persist_struct)
</MACRO>
<ENUM>
<NAME>Bonobo_Persist_Status</NAME>
   typedef enum
   {
      Bonobo_Persist_SAVE_OK,
      Bonobo_Persist_SAVE_CANCEL,
      Bonobo_Persist_SAVE_FAILED
   }
   Bonobo_Persist_Status;
</ENUM>
<MACRO>
<NAME>TC_IMPL_TC_Bonobo_Persist_Status_0</NAME>
#define TC_IMPL_TC_Bonobo_Persist_Status_0 'B'
</MACRO>
<MACRO>
<NAME>TC_IMPL_TC_Bonobo_Persist_Status_1</NAME>
#define TC_IMPL_TC_Bonobo_Persist_Status_1 'o'
</MACRO>
<MACRO>
<NAME>TC_IMPL_TC_Bonobo_Persist_Status_2</NAME>
#define TC_IMPL_TC_Bonobo_Persist_Status_2 'n'
</MACRO>
<MACRO>
<NAME>TC_IMPL_TC_Bonobo_Persist_Status_3</NAME>
#define TC_IMPL_TC_Bonobo_Persist_Status_3 'o'
</MACRO>
<MACRO>
<NAME>TC_IMPL_TC_Bonobo_Persist_Status_4</NAME>
#define TC_IMPL_TC_Bonobo_Persist_Status_4 'b'
</MACRO>
<MACRO>
<NAME>TC_IMPL_TC_Bonobo_Persist_Status_5</NAME>
#define TC_IMPL_TC_Bonobo_Persist_Status_5 'o'
</MACRO>
<MACRO>
<NAME>TC_Bonobo_Persist_Status</NAME>
#define TC_Bonobo_Persist_Status ((CORBA_TypeCode)&TC_Bonobo_Persist_Status_struct)
</MACRO>
<MACRO>
<NAME>ex_Bonobo_Persist_WrongDataType</NAME>
#define ex_Bonobo_Persist_WrongDataType "IDL:Bonobo/Persist/WrongDataType:1.0"
</MACRO>
<MACRO>
<NAME>TC_IMPL_TC_Bonobo_Persist_WrongDataType_0</NAME>
#define TC_IMPL_TC_Bonobo_Persist_WrongDataType_0 'B'
</MACRO>
<MACRO>
<NAME>TC_IMPL_TC_Bonobo_Persist_WrongDataType_1</NAME>
#define TC_IMPL_TC_Bonobo_Persist_WrongDataType_1 'o'
</MACRO>
<MACRO>
<NAME>TC_IMPL_TC_Bonobo_Persist_WrongDataType_2</NAME>
#define TC_IMPL_TC_Bonobo_Persist_WrongDataType_2 'n'
</MACRO>
<MACRO>
<NAME>TC_IMPL_TC_Bonobo_Persist_WrongDataType_3</NAME>
#define TC_IMPL_TC_Bonobo_Persist_WrongDataType_3 'o'
</MACRO>
<MACRO>
<NAME>TC_IMPL_TC_Bonobo_Persist_WrongDataType_4</NAME>
#define TC_IMPL_TC_Bonobo_Persist_WrongDataType_4 'b'
</MACRO>
<MACRO>
<NAME>TC_IMPL_TC_Bonobo_Persist_WrongDataType_5</NAME>
#define TC_IMPL_TC_Bonobo_Persist_WrongDataType_5 'o'
</MACRO>
<MACRO>
<NAME>TC_Bonobo_Persist_WrongDataType</NAME>
#define TC_Bonobo_Persist_WrongDataType ((CORBA_TypeCode)&TC_Bonobo_Persist_WrongDataType_struct)
</MACRO>
<MACRO>
<NAME>Bonobo_Persist_WrongDataType__alloc</NAME>
#define Bonobo_Persist_WrongDataType__alloc() ((Bonobo_Persist_WrongDataType *)ORBit_small_alloc (TC_Bonobo_Persist_WrongDataType))
</MACRO>
<MACRO>
<NAME>Bonobo_Persist_WrongDataType__freekids</NAME>
#define Bonobo_Persist_WrongDataType__freekids(m,d) ORBit_small_freekids (TC_Bonobo_Persist_WrongDataType,(m),(d))
</MACRO>
<MACRO>
<NAME>ex_Bonobo_Persist_FileNotFound</NAME>
#define ex_Bonobo_Persist_FileNotFound "IDL:Bonobo/Persist/FileNotFound:1.0"
</MACRO>
<MACRO>
<NAME>TC_IMPL_TC_Bonobo_Persist_FileNotFound_0</NAME>
#define TC_IMPL_TC_Bonobo_Persist_FileNotFound_0 'B'
</MACRO>
<MACRO>
<NAME>TC_IMPL_TC_Bonobo_Persist_FileNotFound_1</NAME>
#define TC_IMPL_TC_Bonobo_Persist_FileNotFound_1 'o'
</MACRO>
<MACRO>
<NAME>TC_IMPL_TC_Bonobo_Persist_FileNotFound_2</NAME>
#define TC_IMPL_TC_Bonobo_Persist_FileNotFound_2 'n'
</MACRO>
<MACRO>
<NAME>TC_IMPL_TC_Bonobo_Persist_FileNotFound_3</NAME>
#define TC_IMPL_TC_Bonobo_Persist_FileNotFound_3 'o'
</MACRO>
<MACRO>
<NAME>TC_IMPL_TC_Bonobo_Persist_FileNotFound_4</NAME>
#define TC_IMPL_TC_Bonobo_Persist_FileNotFound_4 'b'
</MACRO>
<MACRO>
<NAME>TC_IMPL_TC_Bonobo_Persist_FileNotFound_5</NAME>
#define TC_IMPL_TC_Bonobo_Persist_FileNotFound_5 'o'
</MACRO>
<MACRO>
<NAME>TC_Bonobo_Persist_FileNotFound</NAME>
#define TC_Bonobo_Persist_FileNotFound ((CORBA_TypeCode)&TC_Bonobo_Persist_FileNotFound_struct)
</MACRO>
<MACRO>
<NAME>Bonobo_Persist_FileNotFound__alloc</NAME>
#define Bonobo_Persist_FileNotFound__alloc() ((Bonobo_Persist_FileNotFound *)ORBit_small_alloc (TC_Bonobo_Persist_FileNotFound))
</MACRO>
<MACRO>
<NAME>Bonobo_Persist_FileNotFound__freekids</NAME>
#define Bonobo_Persist_FileNotFound__freekids(m,d) ORBit_small_freekids (TC_Bonobo_Persist_FileNotFound,(m),(d))
</MACRO>
<TYPEDEF>
<NAME>Bonobo_Persist_ContentType</NAME>
   typedef CORBA_string Bonobo_Persist_ContentType;
</TYPEDEF>
<MACRO>
<NAME>Bonobo_Persist_ContentType_marshal</NAME>
#define Bonobo_Persist_ContentType_marshal(x,y,z) CORBA_string_marshal((x),(y),(z))
</MACRO>
<MACRO>
<NAME>Bonobo_Persist_ContentType_demarshal</NAME>
#define Bonobo_Persist_ContentType_demarshal(x,y,z,i) CORBA_string_demarshal((x),(y),(z),(i))
</MACRO>
<MACRO>
<NAME>TC_IMPL_TC_Bonobo_Persist_ContentType_0</NAME>
#define TC_IMPL_TC_Bonobo_Persist_ContentType_0 'B'
</MACRO>
<MACRO>
<NAME>TC_IMPL_TC_Bonobo_Persist_ContentType_1</NAME>
#define TC_IMPL_TC_Bonobo_Persist_ContentType_1 'o'
</MACRO>
<MACRO>
<NAME>TC_IMPL_TC_Bonobo_Persist_ContentType_2</NAME>
#define TC_IMPL_TC_Bonobo_Persist_ContentType_2 'n'
</MACRO>
<MACRO>
<NAME>TC_IMPL_TC_Bonobo_Persist_ContentType_3</NAME>
#define TC_IMPL_TC_Bonobo_Persist_ContentType_3 'o'
</MACRO>
<MACRO>
<NAME>TC_IMPL_TC_Bonobo_Persist_ContentType_4</NAME>
#define TC_IMPL_TC_Bonobo_Persist_ContentType_4 'b'
</MACRO>
<MACRO>
<NAME>TC_IMPL_TC_Bonobo_Persist_ContentType_5</NAME>
#define TC_IMPL_TC_Bonobo_Persist_ContentType_5 'o'
</MACRO>
<MACRO>
<NAME>TC_Bonobo_Persist_ContentType</NAME>
#define TC_Bonobo_Persist_ContentType ((CORBA_TypeCode)&TC_Bonobo_Persist_ContentType_struct)
</MACRO>
<MACRO>
<NAME>Bonobo_Persist_ContentType__alloc</NAME>
#define Bonobo_Persist_ContentType__alloc() ((Bonobo_Persist_ContentType *)ORBit_small_alloc (TC_CORBA_string))
</MACRO>
<MACRO>
<NAME>Bonobo_Persist_ContentType__freekids</NAME>
#define Bonobo_Persist_ContentType__freekids(m,d) ORBit_small_freekids (TC_CORBA_string,(m),(d))
</MACRO>
<MACRO>
<NAME>ORBIT_DECL_CORBA_sequence_CORBA_string</NAME>
#define ORBIT_DECL_CORBA_sequence_CORBA_string 1
</MACRO>
<MACRO>
<NAME>ORBIT_IMPL_CORBA_sequence_CORBA_string_0</NAME>
#define ORBIT_IMPL_CORBA_sequence_CORBA_string_0 'B'
</MACRO>
<MACRO>
<NAME>ORBIT_IMPL_CORBA_sequence_CORBA_string_1</NAME>
#define ORBIT_IMPL_CORBA_sequence_CORBA_string_1 'o'
</MACRO>
<MACRO>
<NAME>ORBIT_IMPL_CORBA_sequence_CORBA_string_2</NAME>
#define ORBIT_IMPL_CORBA_sequence_CORBA_string_2 'n'
</MACRO>
<MACRO>
<NAME>ORBIT_IMPL_CORBA_sequence_CORBA_string_3</NAME>
#define ORBIT_IMPL_CORBA_sequence_CORBA_string_3 'o'
</MACRO>
<MACRO>
<NAME>ORBIT_IMPL_CORBA_sequence_CORBA_string_4</NAME>
#define ORBIT_IMPL_CORBA_sequence_CORBA_string_4 'b'
</MACRO>
<MACRO>
<NAME>ORBIT_IMPL_CORBA_sequence_CORBA_string_5</NAME>
#define ORBIT_IMPL_CORBA_sequence_CORBA_string_5 'o'
</MACRO>
<MACRO>
<NAME>TC_IMPL_TC_CORBA_sequence_CORBA_string_0</NAME>
#define TC_IMPL_TC_CORBA_sequence_CORBA_string_0 'B'
</MACRO>
<MACRO>
<NAME>TC_IMPL_TC_CORBA_sequence_CORBA_string_1</NAME>
#define TC_IMPL_TC_CORBA_sequence_CORBA_string_1 'o'
</MACRO>
<MACRO>
<NAME>TC_IMPL_TC_CORBA_sequence_CORBA_string_2</NAME>
#define TC_IMPL_TC_CORBA_sequence_CORBA_string_2 'n'
</MACRO>
<MACRO>
<NAME>TC_IMPL_TC_CORBA_sequence_CORBA_string_3</NAME>
#define TC_IMPL_TC_CORBA_sequence_CORBA_string_3 'o'
</MACRO>
<MACRO>
<NAME>TC_IMPL_TC_CORBA_sequence_CORBA_string_4</NAME>
#define TC_IMPL_TC_CORBA_sequence_CORBA_string_4 'b'
</MACRO>
<MACRO>
<NAME>TC_IMPL_TC_CORBA_sequence_CORBA_string_5</NAME>
#define TC_IMPL_TC_CORBA_sequence_CORBA_string_5 'o'
</MACRO>
<MACRO>
<NAME>TC_CORBA_sequence_CORBA_string</NAME>
#define TC_CORBA_sequence_CORBA_string ((CORBA_TypeCode)&TC_CORBA_sequence_CORBA_string_struct)
</MACRO>
<MACRO>
<NAME>CORBA_sequence_CORBA_string__alloc</NAME>
#define CORBA_sequence_CORBA_string__alloc() ((CORBA_sequence_CORBA_string *)ORBit_small_alloc (TC_CORBA_sequence_CORBA_string))
</MACRO>
<MACRO>
<NAME>CORBA_sequence_CORBA_string__freekids</NAME>
#define CORBA_sequence_CORBA_string__freekids(m,d) ORBit_small_freekids (TC_CORBA_sequence_CORBA_string,(m),(d))
</MACRO>
<MACRO>
<NAME>CORBA_sequence_CORBA_string_allocbuf</NAME>
#define CORBA_sequence_CORBA_string_allocbuf(l) ORBit_small_allocbuf (TC_CORBA_sequence_CORBA_string, (l))
</MACRO>
<MACRO>
<NAME>CORBA_sequence_CORBA_string_allocbuf</NAME>
#define CORBA_sequence_CORBA_string_allocbuf(l) ORBit_small_allocbuf (TC_CORBA_sequence_CORBA_string, (l))
</MACRO>
<MACRO>
<NAME>ORBIT_DECL_CORBA_sequence_Bonobo_Persist_ContentType</NAME>
#define ORBIT_DECL_CORBA_sequence_Bonobo_Persist_ContentType 1
</MACRO>
<MACRO>
<NAME>ORBIT_IMPL_CORBA_sequence_Bonobo_Persist_ContentType_0</NAME>
#define ORBIT_IMPL_CORBA_sequence_Bonobo_Persist_ContentType_0 'B'
</MACRO>
<MACRO>
<NAME>ORBIT_IMPL_CORBA_sequence_Bonobo_Persist_ContentType_1</NAME>
#define ORBIT_IMPL_CORBA_sequence_Bonobo_Persist_ContentType_1 'o'
</MACRO>
<MACRO>
<NAME>ORBIT_IMPL_CORBA_sequence_Bonobo_Persist_ContentType_2</NAME>
#define ORBIT_IMPL_CORBA_sequence_Bonobo_Persist_ContentType_2 'n'
</MACRO>
<MACRO>
<NAME>ORBIT_IMPL_CORBA_sequence_Bonobo_Persist_ContentType_3</NAME>
#define ORBIT_IMPL_CORBA_sequence_Bonobo_Persist_ContentType_3 'o'
</MACRO>
<MACRO>
<NAME>ORBIT_IMPL_CORBA_sequence_Bonobo_Persist_ContentType_4</NAME>
#define ORBIT_IMPL_CORBA_sequence_Bonobo_Persist_ContentType_4 'b'
</MACRO>
<MACRO>
<NAME>ORBIT_IMPL_CORBA_sequence_Bonobo_Persist_ContentType_5</NAME>
#define ORBIT_IMPL_CORBA_sequence_Bonobo_Persist_ContentType_5 'o'
</MACRO>
<MACRO>
<NAME>TC_IMPL_TC_CORBA_sequence_Bonobo_Persist_ContentType_0</NAME>
#define TC_IMPL_TC_CORBA_sequence_Bonobo_Persist_ContentType_0 'B'
</MACRO>
<MACRO>
<NAME>TC_IMPL_TC_CORBA_sequence_Bonobo_Persist_ContentType_1</NAME>
#define TC_IMPL_TC_CORBA_sequence_Bonobo_Persist_ContentType_1 'o'
</MACRO>
<MACRO>
<NAME>TC_IMPL_TC_CORBA_sequence_Bonobo_Persist_ContentType_2</NAME>
#define TC_IMPL_TC_CORBA_sequence_Bonobo_Persist_ContentType_2 'n'
</MACRO>
<MACRO>
<NAME>TC_IMPL_TC_CORBA_sequence_Bonobo_Persist_ContentType_3</NAME>
#define TC_IMPL_TC_CORBA_sequence_Bonobo_Persist_ContentType_3 'o'
</MACRO>
<MACRO>
<NAME>TC_IMPL_TC_CORBA_sequence_Bonobo_Persist_ContentType_4</NAME>
#define TC_IMPL_TC_CORBA_sequence_Bonobo_Persist_ContentType_4 'b'
</MACRO>
<MACRO>
<NAME>TC_IMPL_TC_CORBA_sequence_Bonobo_Persist_ContentType_5</NAME>
#define TC_IMPL_TC_CORBA_sequence_Bonobo_Persist_ContentType_5 'o'
</MACRO>
<MACRO>
<NAME>TC_CORBA_sequence_Bonobo_Persist_ContentType</NAME>
#define TC_CORBA_sequence_Bonobo_Persist_ContentType ((CORBA_TypeCode)&TC_CORBA_sequence_Bonobo_Persist_ContentType_struct)
</MACRO>
<MACRO>
<NAME>CORBA_sequence_Bonobo_Persist_ContentType__alloc</NAME>
#define CORBA_sequence_Bonobo_Persist_ContentType__alloc CORBA_sequence_CORBA_string__alloc
</MACRO>
<MACRO>
<NAME>CORBA_sequence_Bonobo_Persist_ContentType__freekids</NAME>
#define CORBA_sequence_Bonobo_Persist_ContentType__freekids CORBA_sequence_CORBA_string__freekids
</MACRO>
<MACRO>
<NAME>CORBA_sequence_Bonobo_Persist_ContentType_allocbuf</NAME>
#define CORBA_sequence_Bonobo_Persist_ContentType_allocbuf CORBA_sequence_CORBA_string_allocbuf
</MACRO>
<MACRO>
<NAME>CORBA_sequence_Bonobo_Persist_ContentType_marshal</NAME>
#define CORBA_sequence_Bonobo_Persist_ContentType_marshal(x,y,z) CORBA_sequence_CORBA_string_marshal((x),(y),(z))
</MACRO>
<MACRO>
<NAME>CORBA_sequence_Bonobo_Persist_ContentType_demarshal</NAME>
#define CORBA_sequence_Bonobo_Persist_ContentType_demarshal(x,y,z,i) CORBA_sequence_CORBA_string_demarshal((x),(y),(z),(i))
</MACRO>
<MACRO>
<NAME>Bonobo_Persist_ContentTypeList_marshal</NAME>
#define Bonobo_Persist_ContentTypeList_marshal(x,y,z) CORBA_sequence_Bonobo_Persist_ContentType_marshal((x),(y),(z))
</MACRO>
<MACRO>
<NAME>Bonobo_Persist_ContentTypeList_demarshal</NAME>
#define Bonobo_Persist_ContentTypeList_demarshal(x,y,z,i) CORBA_sequence_Bonobo_Persist_ContentType_demarshal((x),(y),(z),(i))
</MACRO>
<MACRO>
<NAME>TC_IMPL_TC_Bonobo_Persist_ContentTypeList_0</NAME>
#define TC_IMPL_TC_Bonobo_Persist_ContentTypeList_0 'B'
</MACRO>
<MACRO>
<NAME>TC_IMPL_TC_Bonobo_Persist_ContentTypeList_1</NAME>
#define TC_IMPL_TC_Bonobo_Persist_ContentTypeList_1 'o'
</MACRO>
<MACRO>
<NAME>TC_IMPL_TC_Bonobo_Persist_ContentTypeList_2</NAME>
#define TC_IMPL_TC_Bonobo_Persist_ContentTypeList_2 'n'
</MACRO>
<MACRO>
<NAME>TC_IMPL_TC_Bonobo_Persist_ContentTypeList_3</NAME>
#define TC_IMPL_TC_Bonobo_Persist_ContentTypeList_3 'o'
</MACRO>
<MACRO>
<NAME>TC_IMPL_TC_Bonobo_Persist_ContentTypeList_4</NAME>
#define TC_IMPL_TC_Bonobo_Persist_ContentTypeList_4 'b'
</MACRO>
<MACRO>
<NAME>TC_IMPL_TC_Bonobo_Persist_ContentTypeList_5</NAME>
#define TC_IMPL_TC_Bonobo_Persist_ContentTypeList_5 'o'
</MACRO>
<MACRO>
<NAME>TC_Bonobo_Persist_ContentTypeList</NAME>
#define TC_Bonobo_Persist_ContentTypeList ((CORBA_TypeCode)&TC_Bonobo_Persist_ContentTypeList_struct)
</MACRO>
<MACRO>
<NAME>Bonobo_Persist_ContentTypeList__alloc</NAME>
#define Bonobo_Persist_ContentTypeList__alloc() ((Bonobo_Persist_ContentTypeList *)ORBit_small_alloc (TC_CORBA_sequence_Bonobo_Persist_ContentType))
</MACRO>
<MACRO>
<NAME>Bonobo_Persist_ContentTypeList__freekids</NAME>
#define Bonobo_Persist_ContentTypeList__freekids(m,d) ORBit_small_freekids (TC_CORBA_sequence_Bonobo_Persist_ContentType,(m),(d))
</MACRO>
<MACRO>
<NAME>Bonobo_Persist_ContentTypeList_allocbuf</NAME>
#define Bonobo_Persist_ContentTypeList_allocbuf(l) ORBit_small_allocbuf (TC_CORBA_sequence_Bonobo_Persist_ContentType, (l))
</MACRO>
<TYPEDEF>
<NAME>Bonobo_Persist_IID</NAME>
   typedef CORBA_string Bonobo_Persist_IID;
</TYPEDEF>
<MACRO>
<NAME>Bonobo_Persist_IID_marshal</NAME>
#define Bonobo_Persist_IID_marshal(x,y,z) CORBA_string_marshal((x),(y),(z))
</MACRO>
<MACRO>
<NAME>Bonobo_Persist_IID_demarshal</NAME>
#define Bonobo_Persist_IID_demarshal(x,y,z,i) CORBA_string_demarshal((x),(y),(z),(i))
</MACRO>
<MACRO>
<NAME>TC_IMPL_TC_Bonobo_Persist_IID_0</NAME>
#define TC_IMPL_TC_Bonobo_Persist_IID_0 'B'
</MACRO>
<MACRO>
<NAME>TC_IMPL_TC_Bonobo_Persist_IID_1</NAME>
#define TC_IMPL_TC_Bonobo_Persist_IID_1 'o'
</MACRO>
<MACRO>
<NAME>TC_IMPL_TC_Bonobo_Persist_IID_2</NAME>
#define TC_IMPL_TC_Bonobo_Persist_IID_2 'n'
</MACRO>
<MACRO>
<NAME>TC_IMPL_TC_Bonobo_Persist_IID_3</NAME>
#define TC_IMPL_TC_Bonobo_Persist_IID_3 'o'
</MACRO>
<MACRO>
<NAME>TC_IMPL_TC_Bonobo_Persist_IID_4</NAME>
#define TC_IMPL_TC_Bonobo_Persist_IID_4 'b'
</MACRO>
<MACRO>
<NAME>TC_IMPL_TC_Bonobo_Persist_IID_5</NAME>
#define TC_IMPL_TC_Bonobo_Persist_IID_5 'o'
</MACRO>
<MACRO>
<NAME>TC_Bonobo_Persist_IID</NAME>
#define TC_Bonobo_Persist_IID ((CORBA_TypeCode)&TC_Bonobo_Persist_IID_struct)
</MACRO>
<MACRO>
<NAME>Bonobo_Persist_IID__alloc</NAME>
#define Bonobo_Persist_IID__alloc() ((Bonobo_Persist_IID *)ORBit_small_alloc (TC_CORBA_string))
</MACRO>
<MACRO>
<NAME>Bonobo_Persist_IID__freekids</NAME>
#define Bonobo_Persist_IID__freekids(m,d) ORBit_small_freekids (TC_CORBA_string,(m),(d))
</MACRO>
<MACRO>
<NAME>ORBIT_DECL_Bonobo_PersistFile</NAME>
#define ORBIT_DECL_Bonobo_PersistFile 1
</MACRO>
<MACRO>
<NAME>Bonobo_PersistFile__freekids</NAME>
#define Bonobo_PersistFile__freekids CORBA_Object__freekids
</MACRO>
<TYPEDEF>
<NAME>Bonobo_PersistFile</NAME>
   typedef CORBA_Object Bonobo_PersistFile;
</TYPEDEF>
<VARIABLE>
<NAME>Bonobo_PersistFile__classid</NAME>
   extern CORBA_unsigned_long Bonobo_PersistFile__classid;
</VARIABLE>
<MACRO>
<NAME>TC_IMPL_TC_Bonobo_PersistFile_0</NAME>
#define TC_IMPL_TC_Bonobo_PersistFile_0 'B'
</MACRO>
<MACRO>
<NAME>TC_IMPL_TC_Bonobo_PersistFile_1</NAME>
#define TC_IMPL_TC_Bonobo_PersistFile_1 'o'
</MACRO>
<MACRO>
<NAME>TC_IMPL_TC_Bonobo_PersistFile_2</NAME>
#define TC_IMPL_TC_Bonobo_PersistFile_2 'n'
</MACRO>
<MACRO>
<NAME>TC_IMPL_TC_Bonobo_PersistFile_3</NAME>
#define TC_IMPL_TC_Bonobo_PersistFile_3 'o'
</MACRO>
<MACRO>
<NAME>TC_IMPL_TC_Bonobo_PersistFile_4</NAME>
#define TC_IMPL_TC_Bonobo_PersistFile_4 'b'
</MACRO>
<MACRO>
<NAME>TC_IMPL_TC_Bonobo_PersistFile_5</NAME>
#define TC_IMPL_TC_Bonobo_PersistFile_5 'o'
</MACRO>
<MACRO>
<NAME>TC_Bonobo_PersistFile</NAME>
#define TC_Bonobo_PersistFile ((CORBA_TypeCode)&TC_Bonobo_PersistFile_struct)
</MACRO>
<MACRO>
<NAME>ex_Bonobo_PersistFile_NoCurrentName</NAME>
#define ex_Bonobo_PersistFile_NoCurrentName "IDL:Bonobo/PersistFile/NoCurrentName:1.0"
</MACRO>
<MACRO>
<NAME>TC_IMPL_TC_Bonobo_PersistFile_NoCurrentName_0</NAME>
#define TC_IMPL_TC_Bonobo_PersistFile_NoCurrentName_0 'B'
</MACRO>
<MACRO>
<NAME>TC_IMPL_TC_Bonobo_PersistFile_NoCurrentName_1</NAME>
#define TC_IMPL_TC_Bonobo_PersistFile_NoCurrentName_1 'o'
</MACRO>
<MACRO>
<NAME>TC_IMPL_TC_Bonobo_PersistFile_NoCurrentName_2</NAME>
#define TC_IMPL_TC_Bonobo_PersistFile_NoCurrentName_2 'n'
</MACRO>
<MACRO>
<NAME>TC_IMPL_TC_Bonobo_PersistFile_NoCurrentName_3</NAME>
#define TC_IMPL_TC_Bonobo_PersistFile_NoCurrentName_3 'o'
</MACRO>
<MACRO>
<NAME>TC_IMPL_TC_Bonobo_PersistFile_NoCurrentName_4</NAME>
#define TC_IMPL_TC_Bonobo_PersistFile_NoCurrentName_4 'b'
</MACRO>
<MACRO>
<NAME>TC_IMPL_TC_Bonobo_PersistFile_NoCurrentName_5</NAME>
#define TC_IMPL_TC_Bonobo_PersistFile_NoCurrentName_5 'o'
</MACRO>
<MACRO>
<NAME>TC_Bonobo_PersistFile_NoCurrentName</NAME>
#define TC_Bonobo_PersistFile_NoCurrentName ((CORBA_TypeCode)&TC_Bonobo_PersistFile_NoCurrentName_struct)
</MACRO>
<MACRO>
<NAME>Bonobo_PersistFile_NoCurrentName__alloc</NAME>
#define Bonobo_PersistFile_NoCurrentName__alloc() ((Bonobo_PersistFile_NoCurrentName *)ORBit_small_alloc (TC_Bonobo_PersistFile_NoCurrentName))
</MACRO>
<MACRO>
<NAME>Bonobo_PersistFile_NoCurrentName__freekids</NAME>
#define Bonobo_PersistFile_NoCurrentName__freekids(m,d) ORBit_small_freekids (TC_Bonobo_PersistFile_NoCurrentName,(m),(d))
</MACRO>
<MACRO>
<NAME>ORBIT_DECL_Bonobo_PersistStorage</NAME>
#define ORBIT_DECL_Bonobo_PersistStorage 1
</MACRO>
<MACRO>
<NAME>Bonobo_PersistStorage__freekids</NAME>
#define Bonobo_PersistStorage__freekids CORBA_Object__freekids
</MACRO>
<TYPEDEF>
<NAME>Bonobo_PersistStorage</NAME>
   typedef CORBA_Object Bonobo_PersistStorage;
</TYPEDEF>
<VARIABLE>
<NAME>Bonobo_PersistStorage__classid</NAME>
   extern CORBA_unsigned_long Bonobo_PersistStorage__classid;
</VARIABLE>
<MACRO>
<NAME>TC_IMPL_TC_Bonobo_PersistStorage_0</NAME>
#define TC_IMPL_TC_Bonobo_PersistStorage_0 'B'
</MACRO>
<MACRO>
<NAME>TC_IMPL_TC_Bonobo_PersistStorage_1</NAME>
#define TC_IMPL_TC_Bonobo_PersistStorage_1 'o'
</MACRO>
<MACRO>
<NAME>TC_IMPL_TC_Bonobo_PersistStorage_2</NAME>
#define TC_IMPL_TC_Bonobo_PersistStorage_2 'n'
</MACRO>
<MACRO>
<NAME>TC_IMPL_TC_Bonobo_PersistStorage_3</NAME>
#define TC_IMPL_TC_Bonobo_PersistStorage_3 'o'
</MACRO>
<MACRO>
<NAME>TC_IMPL_TC_Bonobo_PersistStorage_4</NAME>
#define TC_IMPL_TC_Bonobo_PersistStorage_4 'b'
</MACRO>
<MACRO>
<NAME>TC_IMPL_TC_Bonobo_PersistStorage_5</NAME>
#define TC_IMPL_TC_Bonobo_PersistStorage_5 'o'
</MACRO>
<MACRO>
<NAME>TC_Bonobo_PersistStorage</NAME>
#define TC_Bonobo_PersistStorage ((CORBA_TypeCode)&TC_Bonobo_PersistStorage_struct)
</MACRO>
<MACRO>
<NAME>ORBIT_DECL_Bonobo_PersistStream</NAME>
#define ORBIT_DECL_Bonobo_PersistStream 1
</MACRO>
<MACRO>
<NAME>Bonobo_PersistStream__freekids</NAME>
#define Bonobo_PersistStream__freekids CORBA_Object__freekids
</MACRO>
<TYPEDEF>
<NAME>Bonobo_PersistStream</NAME>
   typedef CORBA_Object Bonobo_PersistStream;
</TYPEDEF>
<VARIABLE>
<NAME>Bonobo_PersistStream__classid</NAME>
   extern CORBA_unsigned_long Bonobo_PersistStream__classid;
</VARIABLE>
<MACRO>
<NAME>TC_IMPL_TC_Bonobo_PersistStream_0</NAME>
#define TC_IMPL_TC_Bonobo_PersistStream_0 'B'
</MACRO>
<MACRO>
<NAME>TC_IMPL_TC_Bonobo_PersistStream_1</NAME>
#define TC_IMPL_TC_Bonobo_PersistStream_1 'o'
</MACRO>
<MACRO>
<NAME>TC_IMPL_TC_Bonobo_PersistStream_2</NAME>
#define TC_IMPL_TC_Bonobo_PersistStream_2 'n'
</MACRO>
<MACRO>
<NAME>TC_IMPL_TC_Bonobo_PersistStream_3</NAME>
#define TC_IMPL_TC_Bonobo_PersistStream_3 'o'
</MACRO>
<MACRO>
<NAME>TC_IMPL_TC_Bonobo_PersistStream_4</NAME>
#define TC_IMPL_TC_Bonobo_PersistStream_4 'b'
</MACRO>
<MACRO>
<NAME>TC_IMPL_TC_Bonobo_PersistStream_5</NAME>
#define TC_IMPL_TC_Bonobo_PersistStream_5 'o'
</MACRO>
<MACRO>
<NAME>TC_Bonobo_PersistStream</NAME>
#define TC_Bonobo_PersistStream ((CORBA_TypeCode)&TC_Bonobo_PersistStream_struct)
</MACRO>
<MACRO>
<NAME>ORBIT_DECL_Bonobo_Listener</NAME>
#define ORBIT_DECL_Bonobo_Listener 1
</MACRO>
<MACRO>
<NAME>Bonobo_Listener__freekids</NAME>
#define Bonobo_Listener__freekids CORBA_Object__freekids
</MACRO>
<TYPEDEF>
<NAME>Bonobo_Listener</NAME>
   typedef CORBA_Object Bonobo_Listener;
</TYPEDEF>
<VARIABLE>
<NAME>Bonobo_Listener__classid</NAME>
   extern CORBA_unsigned_long Bonobo_Listener__classid;
</VARIABLE>
<MACRO>
<NAME>TC_IMPL_TC_Bonobo_Listener_0</NAME>
#define TC_IMPL_TC_Bonobo_Listener_0 'B'
</MACRO>
<MACRO>
<NAME>TC_IMPL_TC_Bonobo_Listener_1</NAME>
#define TC_IMPL_TC_Bonobo_Listener_1 'o'
</MACRO>
<MACRO>
<NAME>TC_IMPL_TC_Bonobo_Listener_2</NAME>
#define TC_IMPL_TC_Bonobo_Listener_2 'n'
</MACRO>
<MACRO>
<NAME>TC_IMPL_TC_Bonobo_Listener_3</NAME>
#define TC_IMPL_TC_Bonobo_Listener_3 'o'
</MACRO>
<MACRO>
<NAME>TC_IMPL_TC_Bonobo_Listener_4</NAME>
#define TC_IMPL_TC_Bonobo_Listener_4 'b'
</MACRO>
<MACRO>
<NAME>TC_IMPL_TC_Bonobo_Listener_5</NAME>
#define TC_IMPL_TC_Bonobo_Listener_5 'o'
</MACRO>
<MACRO>
<NAME>TC_Bonobo_Listener</NAME>
#define TC_Bonobo_Listener ((CORBA_TypeCode)&TC_Bonobo_Listener_struct)
</MACRO>
<MACRO>
<NAME>ORBIT_DECL_Bonobo_EventSource</NAME>
#define ORBIT_DECL_Bonobo_EventSource 1
</MACRO>
<MACRO>
<NAME>Bonobo_EventSource__freekids</NAME>
#define Bonobo_EventSource__freekids CORBA_Object__freekids
</MACRO>
<TYPEDEF>
<NAME>Bonobo_EventSource</NAME>
   typedef CORBA_Object Bonobo_EventSource;
</TYPEDEF>
<VARIABLE>
<NAME>Bonobo_EventSource__classid</NAME>
   extern CORBA_unsigned_long Bonobo_EventSource__classid;
</VARIABLE>
<MACRO>
<NAME>TC_IMPL_TC_Bonobo_EventSource_0</NAME>
#define TC_IMPL_TC_Bonobo_EventSource_0 'B'
</MACRO>
<MACRO>
<NAME>TC_IMPL_TC_Bonobo_EventSource_1</NAME>
#define TC_IMPL_TC_Bonobo_EventSource_1 'o'
</MACRO>
<MACRO>
<NAME>TC_IMPL_TC_Bonobo_EventSource_2</NAME>
#define TC_IMPL_TC_Bonobo_EventSource_2 'n'
</MACRO>
<MACRO>
<NAME>TC_IMPL_TC_Bonobo_EventSource_3</NAME>
#define TC_IMPL_TC_Bonobo_EventSource_3 'o'
</MACRO>
<MACRO>
<NAME>TC_IMPL_TC_Bonobo_EventSource_4</NAME>
#define TC_IMPL_TC_Bonobo_EventSource_4 'b'
</MACRO>
<MACRO>
<NAME>TC_IMPL_TC_Bonobo_EventSource_5</NAME>
#define TC_IMPL_TC_Bonobo_EventSource_5 'o'
</MACRO>
<MACRO>
<NAME>TC_Bonobo_EventSource</NAME>
#define TC_Bonobo_EventSource ((CORBA_TypeCode)&TC_Bonobo_EventSource_struct)
</MACRO>
<MACRO>
<NAME>ex_Bonobo_EventSource_UnknownListener</NAME>
#define ex_Bonobo_EventSource_UnknownListener "IDL:Bonobo/EventSource/UnknownListener:1.0"
</MACRO>
<MACRO>
<NAME>TC_IMPL_TC_Bonobo_EventSource_UnknownListener_0</NAME>
#define TC_IMPL_TC_Bonobo_EventSource_UnknownListener_0 'B'
</MACRO>
<MACRO>
<NAME>TC_IMPL_TC_Bonobo_EventSource_UnknownListener_1</NAME>
#define TC_IMPL_TC_Bonobo_EventSource_UnknownListener_1 'o'
</MACRO>
<MACRO>
<NAME>TC_IMPL_TC_Bonobo_EventSource_UnknownListener_2</NAME>
#define TC_IMPL_TC_Bonobo_EventSource_UnknownListener_2 'n'
</MACRO>
<MACRO>
<NAME>TC_IMPL_TC_Bonobo_EventSource_UnknownListener_3</NAME>
#define TC_IMPL_TC_Bonobo_EventSource_UnknownListener_3 'o'
</MACRO>
<MACRO>
<NAME>TC_IMPL_TC_Bonobo_EventSource_UnknownListener_4</NAME>
#define TC_IMPL_TC_Bonobo_EventSource_UnknownListener_4 'b'
</MACRO>
<MACRO>
<NAME>TC_IMPL_TC_Bonobo_EventSource_UnknownListener_5</NAME>
#define TC_IMPL_TC_Bonobo_EventSource_UnknownListener_5 'o'
</MACRO>
<MACRO>
<NAME>TC_Bonobo_EventSource_UnknownListener</NAME>
#define TC_Bonobo_EventSource_UnknownListener ((CORBA_TypeCode)&TC_Bonobo_EventSource_UnknownListener_struct)
</MACRO>
<MACRO>
<NAME>Bonobo_EventSource_UnknownListener__alloc</NAME>
#define Bonobo_EventSource_UnknownListener__alloc() ((Bonobo_EventSource_UnknownListener *)ORBit_small_alloc (TC_Bonobo_EventSource_UnknownListener))
</MACRO>
<MACRO>
<NAME>Bonobo_EventSource_UnknownListener__freekids</NAME>
#define Bonobo_EventSource_UnknownListener__freekids(m,d) ORBit_small_freekids (TC_Bonobo_EventSource_UnknownListener,(m),(d))
</MACRO>
<ENUM>
<NAME>Bonobo_Gdk_EventType</NAME>
   typedef enum
   {
      Bonobo_Gdk_FOCUS,
      Bonobo_Gdk_KEY,
      Bonobo_Gdk_MOTION,
      Bonobo_Gdk_BUTTON,
      Bonobo_Gdk_CROSSING
   }
   Bonobo_Gdk_EventType;
</ENUM>
<MACRO>
<NAME>TC_IMPL_TC_Bonobo_Gdk_EventType_0</NAME>
#define TC_IMPL_TC_Bonobo_Gdk_EventType_0 'B'
</MACRO>
<MACRO>
<NAME>TC_IMPL_TC_Bonobo_Gdk_EventType_1</NAME>
#define TC_IMPL_TC_Bonobo_Gdk_EventType_1 'o'
</MACRO>
<MACRO>
<NAME>TC_IMPL_TC_Bonobo_Gdk_EventType_2</NAME>
#define TC_IMPL_TC_Bonobo_Gdk_EventType_2 'n'
</MACRO>
<MACRO>
<NAME>TC_IMPL_TC_Bonobo_Gdk_EventType_3</NAME>
#define TC_IMPL_TC_Bonobo_Gdk_EventType_3 'o'
</MACRO>
<MACRO>
<NAME>TC_IMPL_TC_Bonobo_Gdk_EventType_4</NAME>
#define TC_IMPL_TC_Bonobo_Gdk_EventType_4 'b'
</MACRO>
<MACRO>
<NAME>TC_IMPL_TC_Bonobo_Gdk_EventType_5</NAME>
#define TC_IMPL_TC_Bonobo_Gdk_EventType_5 'o'
</MACRO>
<MACRO>
<NAME>TC_Bonobo_Gdk_EventType</NAME>
#define TC_Bonobo_Gdk_EventType ((CORBA_TypeCode)&TC_Bonobo_Gdk_EventType_struct)
</MACRO>
<ENUM>
<NAME>Bonobo_Gdk_ButtonType</NAME>
   typedef enum
   {
      Bonobo_Gdk_BUTTON_PRESS,
      Bonobo_Gdk_BUTTON_2_PRESS,
      Bonobo_Gdk_BUTTON_3_PRESS,
      Bonobo_Gdk_BUTTON_RELEASE
   }
   Bonobo_Gdk_ButtonType;
</ENUM>
<MACRO>
<NAME>TC_IMPL_TC_Bonobo_Gdk_ButtonType_0</NAME>
#define TC_IMPL_TC_Bonobo_Gdk_ButtonType_0 'B'
</MACRO>
<MACRO>
<NAME>TC_IMPL_TC_Bonobo_Gdk_ButtonType_1</NAME>
#define TC_IMPL_TC_Bonobo_Gdk_ButtonType_1 'o'
</MACRO>
<MACRO>
<NAME>TC_IMPL_TC_Bonobo_Gdk_ButtonType_2</NAME>
#define TC_IMPL_TC_Bonobo_Gdk_ButtonType_2 'n'
</MACRO>
<MACRO>
<NAME>TC_IMPL_TC_Bonobo_Gdk_ButtonType_3</NAME>
#define TC_IMPL_TC_Bonobo_Gdk_ButtonType_3 'o'
</MACRO>
<MACRO>
<NAME>TC_IMPL_TC_Bonobo_Gdk_ButtonType_4</NAME>
#define TC_IMPL_TC_Bonobo_Gdk_ButtonType_4 'b'
</MACRO>
<MACRO>
<NAME>TC_IMPL_TC_Bonobo_Gdk_ButtonType_5</NAME>
#define TC_IMPL_TC_Bonobo_Gdk_ButtonType_5 'o'
</MACRO>
<MACRO>
<NAME>TC_Bonobo_Gdk_ButtonType</NAME>
#define TC_Bonobo_Gdk_ButtonType ((CORBA_TypeCode)&TC_Bonobo_Gdk_ButtonType_struct)
</MACRO>
<ENUM>
<NAME>Bonobo_Gdk_KeyType</NAME>
   typedef enum
   {
      Bonobo_Gdk_KEY_PRESS,
      Bonobo_Gdk_KEY_RELEASE
   }
   Bonobo_Gdk_KeyType;
</ENUM>
<MACRO>
<NAME>TC_IMPL_TC_Bonobo_Gdk_KeyType_0</NAME>
#define TC_IMPL_TC_Bonobo_Gdk_KeyType_0 'B'
</MACRO>
<MACRO>
<NAME>TC_IMPL_TC_Bonobo_Gdk_KeyType_1</NAME>
#define TC_IMPL_TC_Bonobo_Gdk_KeyType_1 'o'
</MACRO>
<MACRO>
<NAME>TC_IMPL_TC_Bonobo_Gdk_KeyType_2</NAME>
#define TC_IMPL_TC_Bonobo_Gdk_KeyType_2 'n'
</MACRO>
<MACRO>
<NAME>TC_IMPL_TC_Bonobo_Gdk_KeyType_3</NAME>
#define TC_IMPL_TC_Bonobo_Gdk_KeyType_3 'o'
</MACRO>
<MACRO>
<NAME>TC_IMPL_TC_Bonobo_Gdk_KeyType_4</NAME>
#define TC_IMPL_TC_Bonobo_Gdk_KeyType_4 'b'
</MACRO>
<MACRO>
<NAME>TC_IMPL_TC_Bonobo_Gdk_KeyType_5</NAME>
#define TC_IMPL_TC_Bonobo_Gdk_KeyType_5 'o'
</MACRO>
<MACRO>
<NAME>TC_Bonobo_Gdk_KeyType</NAME>
#define TC_Bonobo_Gdk_KeyType ((CORBA_TypeCode)&TC_Bonobo_Gdk_KeyType_struct)
</MACRO>
<ENUM>
<NAME>Bonobo_Gdk_CrossType</NAME>
   typedef enum
   {
      Bonobo_Gdk_ENTER,
      Bonobo_Gdk_LEAVE
   }
   Bonobo_Gdk_CrossType;
</ENUM>
<MACRO>
<NAME>TC_IMPL_TC_Bonobo_Gdk_CrossType_0</NAME>
#define TC_IMPL_TC_Bonobo_Gdk_CrossType_0 'B'
</MACRO>
<MACRO>
<NAME>TC_IMPL_TC_Bonobo_Gdk_CrossType_1</NAME>
#define TC_IMPL_TC_Bonobo_Gdk_CrossType_1 'o'
</MACRO>
<MACRO>
<NAME>TC_IMPL_TC_Bonobo_Gdk_CrossType_2</NAME>
#define TC_IMPL_TC_Bonobo_Gdk_CrossType_2 'n'
</MACRO>
<MACRO>
<NAME>TC_IMPL_TC_Bonobo_Gdk_CrossType_3</NAME>
#define TC_IMPL_TC_Bonobo_Gdk_CrossType_3 'o'
</MACRO>
<MACRO>
<NAME>TC_IMPL_TC_Bonobo_Gdk_CrossType_4</NAME>
#define TC_IMPL_TC_Bonobo_Gdk_CrossType_4 'b'
</MACRO>
<MACRO>
<NAME>TC_IMPL_TC_Bonobo_Gdk_CrossType_5</NAME>
#define TC_IMPL_TC_Bonobo_Gdk_CrossType_5 'o'
</MACRO>
<MACRO>
<NAME>TC_Bonobo_Gdk_CrossType</NAME>
#define TC_Bonobo_Gdk_CrossType ((CORBA_TypeCode)&TC_Bonobo_Gdk_CrossType_struct)
</MACRO>
<ENUM>
<NAME>Bonobo_Gdk_CrossMode</NAME>
   typedef enum
   {
      Bonobo_Gdk_NORMAL,
      Bonobo_Gdk_GRAB,
      Bonobo_Gdk_UNGRAB
   }
   Bonobo_Gdk_CrossMode;
</ENUM>
<MACRO>
<NAME>TC_IMPL_TC_Bonobo_Gdk_CrossMode_0</NAME>
#define TC_IMPL_TC_Bonobo_Gdk_CrossMode_0 'B'
</MACRO>
<MACRO>
<NAME>TC_IMPL_TC_Bonobo_Gdk_CrossMode_1</NAME>
#define TC_IMPL_TC_Bonobo_Gdk_CrossMode_1 'o'
</MACRO>
<MACRO>
<NAME>TC_IMPL_TC_Bonobo_Gdk_CrossMode_2</NAME>
#define TC_IMPL_TC_Bonobo_Gdk_CrossMode_2 'n'
</MACRO>
<MACRO>
<NAME>TC_IMPL_TC_Bonobo_Gdk_CrossMode_3</NAME>
#define TC_IMPL_TC_Bonobo_Gdk_CrossMode_3 'o'
</MACRO>
<MACRO>
<NAME>TC_IMPL_TC_Bonobo_Gdk_CrossMode_4</NAME>
#define TC_IMPL_TC_Bonobo_Gdk_CrossMode_4 'b'
</MACRO>
<MACRO>
<NAME>TC_IMPL_TC_Bonobo_Gdk_CrossMode_5</NAME>
#define TC_IMPL_TC_Bonobo_Gdk_CrossMode_5 'o'
</MACRO>
<MACRO>
<NAME>TC_Bonobo_Gdk_CrossMode</NAME>
#define TC_Bonobo_Gdk_CrossMode ((CORBA_TypeCode)&TC_Bonobo_Gdk_CrossMode_struct)
</MACRO>
<TYPEDEF>
<NAME>Bonobo_Gdk_Time</NAME>
   typedef CORBA_long Bonobo_Gdk_Time;
</TYPEDEF>
<MACRO>
<NAME>Bonobo_Gdk_Time_marshal</NAME>
#define Bonobo_Gdk_Time_marshal(x,y,z) CORBA_long_marshal((x),(y),(z))
</MACRO>
<MACRO>
<NAME>Bonobo_Gdk_Time_demarshal</NAME>
#define Bonobo_Gdk_Time_demarshal(x,y,z,i) CORBA_long_demarshal((x),(y),(z),(i))
</MACRO>
<MACRO>
<NAME>TC_IMPL_TC_Bonobo_Gdk_Time_0</NAME>
#define TC_IMPL_TC_Bonobo_Gdk_Time_0 'B'
</MACRO>
<MACRO>
<NAME>TC_IMPL_TC_Bonobo_Gdk_Time_1</NAME>
#define TC_IMPL_TC_Bonobo_Gdk_Time_1 'o'
</MACRO>
<MACRO>
<NAME>TC_IMPL_TC_Bonobo_Gdk_Time_2</NAME>
#define TC_IMPL_TC_Bonobo_Gdk_Time_2 'n'
</MACRO>
<MACRO>
<NAME>TC_IMPL_TC_Bonobo_Gdk_Time_3</NAME>
#define TC_IMPL_TC_Bonobo_Gdk_Time_3 'o'
</MACRO>
<MACRO>
<NAME>TC_IMPL_TC_Bonobo_Gdk_Time_4</NAME>
#define TC_IMPL_TC_Bonobo_Gdk_Time_4 'b'
</MACRO>
<MACRO>
<NAME>TC_IMPL_TC_Bonobo_Gdk_Time_5</NAME>
#define TC_IMPL_TC_Bonobo_Gdk_Time_5 'o'
</MACRO>
<MACRO>
<NAME>TC_Bonobo_Gdk_Time</NAME>
#define TC_Bonobo_Gdk_Time ((CORBA_TypeCode)&TC_Bonobo_Gdk_Time_struct)
</MACRO>
<MACRO>
<NAME>Bonobo_Gdk_Time__alloc</NAME>
#define Bonobo_Gdk_Time__alloc() ((Bonobo_Gdk_Time *)ORBit_small_alloc (TC_CORBA_long))
</MACRO>
<MACRO>
<NAME>Bonobo_Gdk_Time__freekids</NAME>
#define Bonobo_Gdk_Time__freekids(m,d) ORBit_small_freekids (TC_CORBA_long,(m),(d))
</MACRO>
<MACRO>
<NAME>TC_IMPL_TC_Bonobo_Gdk_MotionEvent_0</NAME>
#define TC_IMPL_TC_Bonobo_Gdk_MotionEvent_0 'B'
</MACRO>
<MACRO>
<NAME>TC_IMPL_TC_Bonobo_Gdk_MotionEvent_1</NAME>
#define TC_IMPL_TC_Bonobo_Gdk_MotionEvent_1 'o'
</MACRO>
<MACRO>
<NAME>TC_IMPL_TC_Bonobo_Gdk_MotionEvent_2</NAME>
#define TC_IMPL_TC_Bonobo_Gdk_MotionEvent_2 'n'
</MACRO>
<MACRO>
<NAME>TC_IMPL_TC_Bonobo_Gdk_MotionEvent_3</NAME>
#define TC_IMPL_TC_Bonobo_Gdk_MotionEvent_3 'o'
</MACRO>
<MACRO>
<NAME>TC_IMPL_TC_Bonobo_Gdk_MotionEvent_4</NAME>
#define TC_IMPL_TC_Bonobo_Gdk_MotionEvent_4 'b'
</MACRO>
<MACRO>
<NAME>TC_IMPL_TC_Bonobo_Gdk_MotionEvent_5</NAME>
#define TC_IMPL_TC_Bonobo_Gdk_MotionEvent_5 'o'
</MACRO>
<MACRO>
<NAME>TC_Bonobo_Gdk_MotionEvent</NAME>
#define TC_Bonobo_Gdk_MotionEvent ((CORBA_TypeCode)&TC_Bonobo_Gdk_MotionEvent_struct)
</MACRO>
<MACRO>
<NAME>Bonobo_Gdk_MotionEvent__alloc</NAME>
#define Bonobo_Gdk_MotionEvent__alloc() ((Bonobo_Gdk_MotionEvent *)ORBit_small_alloc (TC_Bonobo_Gdk_MotionEvent))
</MACRO>
<MACRO>
<NAME>Bonobo_Gdk_MotionEvent__freekids</NAME>
#define Bonobo_Gdk_MotionEvent__freekids(m,d) ORBit_small_freekids (TC_Bonobo_Gdk_MotionEvent,(m),(d))
</MACRO>
<MACRO>
<NAME>TC_IMPL_TC_Bonobo_Gdk_ButtonEvent_0</NAME>
#define TC_IMPL_TC_Bonobo_Gdk_ButtonEvent_0 'B'
</MACRO>
<MACRO>
<NAME>TC_IMPL_TC_Bonobo_Gdk_ButtonEvent_1</NAME>
#define TC_IMPL_TC_Bonobo_Gdk_ButtonEvent_1 'o'
</MACRO>
<MACRO>
<NAME>TC_IMPL_TC_Bonobo_Gdk_ButtonEvent_2</NAME>
#define TC_IMPL_TC_Bonobo_Gdk_ButtonEvent_2 'n'
</MACRO>
<MACRO>
<NAME>TC_IMPL_TC_Bonobo_Gdk_ButtonEvent_3</NAME>
#define TC_IMPL_TC_Bonobo_Gdk_ButtonEvent_3 'o'
</MACRO>
<MACRO>
<NAME>TC_IMPL_TC_Bonobo_Gdk_ButtonEvent_4</NAME>
#define TC_IMPL_TC_Bonobo_Gdk_ButtonEvent_4 'b'
</MACRO>
<MACRO>
<NAME>TC_IMPL_TC_Bonobo_Gdk_ButtonEvent_5</NAME>
#define TC_IMPL_TC_Bonobo_Gdk_ButtonEvent_5 'o'
</MACRO>
<MACRO>
<NAME>TC_Bonobo_Gdk_ButtonEvent</NAME>
#define TC_Bonobo_Gdk_ButtonEvent ((CORBA_TypeCode)&TC_Bonobo_Gdk_ButtonEvent_struct)
</MACRO>
<MACRO>
<NAME>Bonobo_Gdk_ButtonEvent__alloc</NAME>
#define Bonobo_Gdk_ButtonEvent__alloc() ((Bonobo_Gdk_ButtonEvent *)ORBit_small_alloc (TC_Bonobo_Gdk_ButtonEvent))
</MACRO>
<MACRO>
<NAME>Bonobo_Gdk_ButtonEvent__freekids</NAME>
#define Bonobo_Gdk_ButtonEvent__freekids(m,d) ORBit_small_freekids (TC_Bonobo_Gdk_ButtonEvent,(m),(d))
</MACRO>
<MACRO>
<NAME>TC_IMPL_TC_Bonobo_Gdk_KeyEvent_0</NAME>
#define TC_IMPL_TC_Bonobo_Gdk_KeyEvent_0 'B'
</MACRO>
<MACRO>
<NAME>TC_IMPL_TC_Bonobo_Gdk_KeyEvent_1</NAME>
#define TC_IMPL_TC_Bonobo_Gdk_KeyEvent_1 'o'
</MACRO>
<MACRO>
<NAME>TC_IMPL_TC_Bonobo_Gdk_KeyEvent_2</NAME>
#define TC_IMPL_TC_Bonobo_Gdk_KeyEvent_2 'n'
</MACRO>
<MACRO>
<NAME>TC_IMPL_TC_Bonobo_Gdk_KeyEvent_3</NAME>
#define TC_IMPL_TC_Bonobo_Gdk_KeyEvent_3 'o'
</MACRO>
<MACRO>
<NAME>TC_IMPL_TC_Bonobo_Gdk_KeyEvent_4</NAME>
#define TC_IMPL_TC_Bonobo_Gdk_KeyEvent_4 'b'
</MACRO>
<MACRO>
<NAME>TC_IMPL_TC_Bonobo_Gdk_KeyEvent_5</NAME>
#define TC_IMPL_TC_Bonobo_Gdk_KeyEvent_5 'o'
</MACRO>
<MACRO>
<NAME>TC_Bonobo_Gdk_KeyEvent</NAME>
#define TC_Bonobo_Gdk_KeyEvent ((CORBA_TypeCode)&TC_Bonobo_Gdk_KeyEvent_struct)
</MACRO>
<MACRO>
<NAME>Bonobo_Gdk_KeyEvent__alloc</NAME>
#define Bonobo_Gdk_KeyEvent__alloc() ((Bonobo_Gdk_KeyEvent *)ORBit_small_alloc (TC_Bonobo_Gdk_KeyEvent))
</MACRO>
<MACRO>
<NAME>Bonobo_Gdk_KeyEvent__freekids</NAME>
#define Bonobo_Gdk_KeyEvent__freekids(m,d) ORBit_small_freekids (TC_Bonobo_Gdk_KeyEvent,(m),(d))
</MACRO>
<MACRO>
<NAME>TC_IMPL_TC_Bonobo_Gdk_CrossingEvent_0</NAME>
#define TC_IMPL_TC_Bonobo_Gdk_CrossingEvent_0 'B'
</MACRO>
<MACRO>
<NAME>TC_IMPL_TC_Bonobo_Gdk_CrossingEvent_1</NAME>
#define TC_IMPL_TC_Bonobo_Gdk_CrossingEvent_1 'o'
</MACRO>
<MACRO>
<NAME>TC_IMPL_TC_Bonobo_Gdk_CrossingEvent_2</NAME>
#define TC_IMPL_TC_Bonobo_Gdk_CrossingEvent_2 'n'
</MACRO>
<MACRO>
<NAME>TC_IMPL_TC_Bonobo_Gdk_CrossingEvent_3</NAME>
#define TC_IMPL_TC_Bonobo_Gdk_CrossingEvent_3 'o'
</MACRO>
<MACRO>
<NAME>TC_IMPL_TC_Bonobo_Gdk_CrossingEvent_4</NAME>
#define TC_IMPL_TC_Bonobo_Gdk_CrossingEvent_4 'b'
</MACRO>
<MACRO>
<NAME>TC_IMPL_TC_Bonobo_Gdk_CrossingEvent_5</NAME>
#define TC_IMPL_TC_Bonobo_Gdk_CrossingEvent_5 'o'
</MACRO>
<MACRO>
<NAME>TC_Bonobo_Gdk_CrossingEvent</NAME>
#define TC_Bonobo_Gdk_CrossingEvent ((CORBA_TypeCode)&TC_Bonobo_Gdk_CrossingEvent_struct)
</MACRO>
<MACRO>
<NAME>Bonobo_Gdk_CrossingEvent__alloc</NAME>
#define Bonobo_Gdk_CrossingEvent__alloc() ((Bonobo_Gdk_CrossingEvent *)ORBit_small_alloc (TC_Bonobo_Gdk_CrossingEvent))
</MACRO>
<MACRO>
<NAME>Bonobo_Gdk_CrossingEvent__freekids</NAME>
#define Bonobo_Gdk_CrossingEvent__freekids(m,d) ORBit_small_freekids (TC_Bonobo_Gdk_CrossingEvent,(m),(d))
</MACRO>
<MACRO>
<NAME>TC_IMPL_TC_Bonobo_Gdk_FocusEvent_0</NAME>
#define TC_IMPL_TC_Bonobo_Gdk_FocusEvent_0 'B'
</MACRO>
<MACRO>
<NAME>TC_IMPL_TC_Bonobo_Gdk_FocusEvent_1</NAME>
#define TC_IMPL_TC_Bonobo_Gdk_FocusEvent_1 'o'
</MACRO>
<MACRO>
<NAME>TC_IMPL_TC_Bonobo_Gdk_FocusEvent_2</NAME>
#define TC_IMPL_TC_Bonobo_Gdk_FocusEvent_2 'n'
</MACRO>
<MACRO>
<NAME>TC_IMPL_TC_Bonobo_Gdk_FocusEvent_3</NAME>
#define TC_IMPL_TC_Bonobo_Gdk_FocusEvent_3 'o'
</MACRO>
<MACRO>
<NAME>TC_IMPL_TC_Bonobo_Gdk_FocusEvent_4</NAME>
#define TC_IMPL_TC_Bonobo_Gdk_FocusEvent_4 'b'
</MACRO>
<MACRO>
<NAME>TC_IMPL_TC_Bonobo_Gdk_FocusEvent_5</NAME>
#define TC_IMPL_TC_Bonobo_Gdk_FocusEvent_5 'o'
</MACRO>
<MACRO>
<NAME>TC_Bonobo_Gdk_FocusEvent</NAME>
#define TC_Bonobo_Gdk_FocusEvent ((CORBA_TypeCode)&TC_Bonobo_Gdk_FocusEvent_struct)
</MACRO>
<MACRO>
<NAME>Bonobo_Gdk_FocusEvent__alloc</NAME>
#define Bonobo_Gdk_FocusEvent__alloc() ((Bonobo_Gdk_FocusEvent *)ORBit_small_alloc (TC_Bonobo_Gdk_FocusEvent))
</MACRO>
<MACRO>
<NAME>Bonobo_Gdk_FocusEvent__freekids</NAME>
#define Bonobo_Gdk_FocusEvent__freekids(m,d) ORBit_small_freekids (TC_Bonobo_Gdk_FocusEvent,(m),(d))
</MACRO>
<MACRO>
<NAME>TC_IMPL_TC_Bonobo_Gdk_Event_0</NAME>
#define TC_IMPL_TC_Bonobo_Gdk_Event_0 'B'
</MACRO>
<MACRO>
<NAME>TC_IMPL_TC_Bonobo_Gdk_Event_1</NAME>
#define TC_IMPL_TC_Bonobo_Gdk_Event_1 'o'
</MACRO>
<MACRO>
<NAME>TC_IMPL_TC_Bonobo_Gdk_Event_2</NAME>
#define TC_IMPL_TC_Bonobo_Gdk_Event_2 'n'
</MACRO>
<MACRO>
<NAME>TC_IMPL_TC_Bonobo_Gdk_Event_3</NAME>
#define TC_IMPL_TC_Bonobo_Gdk_Event_3 'o'
</MACRO>
<MACRO>
<NAME>TC_IMPL_TC_Bonobo_Gdk_Event_4</NAME>
#define TC_IMPL_TC_Bonobo_Gdk_Event_4 'b'
</MACRO>
<MACRO>
<NAME>TC_IMPL_TC_Bonobo_Gdk_Event_5</NAME>
#define TC_IMPL_TC_Bonobo_Gdk_Event_5 'o'
</MACRO>
<MACRO>
<NAME>TC_Bonobo_Gdk_Event</NAME>
#define TC_Bonobo_Gdk_Event ((CORBA_TypeCode)&TC_Bonobo_Gdk_Event_struct)
</MACRO>
<MACRO>
<NAME>Bonobo_Gdk_Event__alloc</NAME>
#define Bonobo_Gdk_Event__alloc() ((Bonobo_Gdk_Event *)ORBit_small_alloc (TC_Bonobo_Gdk_Event))
</MACRO>
<MACRO>
<NAME>Bonobo_Gdk_Event__freekids</NAME>
#define Bonobo_Gdk_Event__freekids(m,d) ORBit_small_freekids (TC_Bonobo_Gdk_Event,(m),(d))
</MACRO>
<TYPEDEF>
<NAME>Bonobo_Gdk_WindowId</NAME>
   typedef CORBA_string Bonobo_Gdk_WindowId;
</TYPEDEF>
<MACRO>
<NAME>Bonobo_Gdk_WindowId_marshal</NAME>
#define Bonobo_Gdk_WindowId_marshal(x,y,z) CORBA_string_marshal((x),(y),(z))
</MACRO>
<MACRO>
<NAME>Bonobo_Gdk_WindowId_demarshal</NAME>
#define Bonobo_Gdk_WindowId_demarshal(x,y,z,i) CORBA_string_demarshal((x),(y),(z),(i))
</MACRO>
<MACRO>
<NAME>TC_IMPL_TC_Bonobo_Gdk_WindowId_0</NAME>
#define TC_IMPL_TC_Bonobo_Gdk_WindowId_0 'B'
</MACRO>
<MACRO>
<NAME>TC_IMPL_TC_Bonobo_Gdk_WindowId_1</NAME>
#define TC_IMPL_TC_Bonobo_Gdk_WindowId_1 'o'
</MACRO>
<MACRO>
<NAME>TC_IMPL_TC_Bonobo_Gdk_WindowId_2</NAME>
#define TC_IMPL_TC_Bonobo_Gdk_WindowId_2 'n'
</MACRO>
<MACRO>
<NAME>TC_IMPL_TC_Bonobo_Gdk_WindowId_3</NAME>
#define TC_IMPL_TC_Bonobo_Gdk_WindowId_3 'o'
</MACRO>
<MACRO>
<NAME>TC_IMPL_TC_Bonobo_Gdk_WindowId_4</NAME>
#define TC_IMPL_TC_Bonobo_Gdk_WindowId_4 'b'
</MACRO>
<MACRO>
<NAME>TC_IMPL_TC_Bonobo_Gdk_WindowId_5</NAME>
#define TC_IMPL_TC_Bonobo_Gdk_WindowId_5 'o'
</MACRO>
<MACRO>
<NAME>TC_Bonobo_Gdk_WindowId</NAME>
#define TC_Bonobo_Gdk_WindowId ((CORBA_TypeCode)&TC_Bonobo_Gdk_WindowId_struct)
</MACRO>
<MACRO>
<NAME>Bonobo_Gdk_WindowId__alloc</NAME>
#define Bonobo_Gdk_WindowId__alloc() ((Bonobo_Gdk_WindowId *)ORBit_small_alloc (TC_CORBA_string))
</MACRO>
<MACRO>
<NAME>Bonobo_Gdk_WindowId__freekids</NAME>
#define Bonobo_Gdk_WindowId__freekids(m,d) ORBit_small_freekids (TC_CORBA_string,(m),(d))
</MACRO>
<MACRO>
<NAME>TC_IMPL_TC_Bonobo_Gtk_Requisition_0</NAME>
#define TC_IMPL_TC_Bonobo_Gtk_Requisition_0 'B'
</MACRO>
<MACRO>
<NAME>TC_IMPL_TC_Bonobo_Gtk_Requisition_1</NAME>
#define TC_IMPL_TC_Bonobo_Gtk_Requisition_1 'o'
</MACRO>
<MACRO>
<NAME>TC_IMPL_TC_Bonobo_Gtk_Requisition_2</NAME>
#define TC_IMPL_TC_Bonobo_Gtk_Requisition_2 'n'
</MACRO>
<MACRO>
<NAME>TC_IMPL_TC_Bonobo_Gtk_Requisition_3</NAME>
#define TC_IMPL_TC_Bonobo_Gtk_Requisition_3 'o'
</MACRO>
<MACRO>
<NAME>TC_IMPL_TC_Bonobo_Gtk_Requisition_4</NAME>
#define TC_IMPL_TC_Bonobo_Gtk_Requisition_4 'b'
</MACRO>
<MACRO>
<NAME>TC_IMPL_TC_Bonobo_Gtk_Requisition_5</NAME>
#define TC_IMPL_TC_Bonobo_Gtk_Requisition_5 'o'
</MACRO>
<MACRO>
<NAME>TC_Bonobo_Gtk_Requisition</NAME>
#define TC_Bonobo_Gtk_Requisition ((CORBA_TypeCode)&TC_Bonobo_Gtk_Requisition_struct)
</MACRO>
<MACRO>
<NAME>Bonobo_Gtk_Requisition__alloc</NAME>
#define Bonobo_Gtk_Requisition__alloc() ((Bonobo_Gtk_Requisition *)ORBit_small_alloc (TC_Bonobo_Gtk_Requisition))
</MACRO>
<MACRO>
<NAME>Bonobo_Gtk_Requisition__freekids</NAME>
#define Bonobo_Gtk_Requisition__freekids(m,d) ORBit_small_freekids (TC_Bonobo_Gtk_Requisition,(m),(d))
</MACRO>
<ENUM>
<NAME>Bonobo_Gtk_State</NAME>
   typedef enum
   {
      Bonobo_Gtk_StateNormal,
      Bonobo_Gtk_StateActive,
      Bonobo_Gtk_StatePrelight,
      Bonobo_Gtk_StateSelected,
      Bonobo_Gtk_StateInsensitive
   }
   Bonobo_Gtk_State;
</ENUM>
<MACRO>
<NAME>TC_IMPL_TC_Bonobo_Gtk_State_0</NAME>
#define TC_IMPL_TC_Bonobo_Gtk_State_0 'B'
</MACRO>
<MACRO>
<NAME>TC_IMPL_TC_Bonobo_Gtk_State_1</NAME>
#define TC_IMPL_TC_Bonobo_Gtk_State_1 'o'
</MACRO>
<MACRO>
<NAME>TC_IMPL_TC_Bonobo_Gtk_State_2</NAME>
#define TC_IMPL_TC_Bonobo_Gtk_State_2 'n'
</MACRO>
<MACRO>
<NAME>TC_IMPL_TC_Bonobo_Gtk_State_3</NAME>
#define TC_IMPL_TC_Bonobo_Gtk_State_3 'o'
</MACRO>
<MACRO>
<NAME>TC_IMPL_TC_Bonobo_Gtk_State_4</NAME>
#define TC_IMPL_TC_Bonobo_Gtk_State_4 'b'
</MACRO>
<MACRO>
<NAME>TC_IMPL_TC_Bonobo_Gtk_State_5</NAME>
#define TC_IMPL_TC_Bonobo_Gtk_State_5 'o'
</MACRO>
<MACRO>
<NAME>TC_Bonobo_Gtk_State</NAME>
#define TC_Bonobo_Gtk_State ((CORBA_TypeCode)&TC_Bonobo_Gtk_State_struct)
</MACRO>
<ENUM>
<NAME>Bonobo_Gtk_Direction</NAME>
   typedef enum
   {
      Bonobo_Gtk_DirectionTabForward,
      Bonobo_Gtk_DirectionTabBackward,
      Bonobo_Gtk_DirectionUp,
      Bonobo_Gtk_DirectionDown,
      Bonobo_Gtk_DirectionLeft,
      Bonobo_Gtk_DirectionRight
   }
   Bonobo_Gtk_Direction;
</ENUM>
<MACRO>
<NAME>TC_IMPL_TC_Bonobo_Gtk_Direction_0</NAME>
#define TC_IMPL_TC_Bonobo_Gtk_Direction_0 'B'
</MACRO>
<MACRO>
<NAME>TC_IMPL_TC_Bonobo_Gtk_Direction_1</NAME>
#define TC_IMPL_TC_Bonobo_Gtk_Direction_1 'o'
</MACRO>
<MACRO>
<NAME>TC_IMPL_TC_Bonobo_Gtk_Direction_2</NAME>
#define TC_IMPL_TC_Bonobo_Gtk_Direction_2 'n'
</MACRO>
<MACRO>
<NAME>TC_IMPL_TC_Bonobo_Gtk_Direction_3</NAME>
#define TC_IMPL_TC_Bonobo_Gtk_Direction_3 'o'
</MACRO>
<MACRO>
<NAME>TC_IMPL_TC_Bonobo_Gtk_Direction_4</NAME>
#define TC_IMPL_TC_Bonobo_Gtk_Direction_4 'b'
</MACRO>
<MACRO>
<NAME>TC_IMPL_TC_Bonobo_Gtk_Direction_5</NAME>
#define TC_IMPL_TC_Bonobo_Gtk_Direction_5 'o'
</MACRO>
<MACRO>
<NAME>TC_Bonobo_Gtk_Direction</NAME>
#define TC_Bonobo_Gtk_Direction ((CORBA_TypeCode)&TC_Bonobo_Gtk_Direction_struct)
</MACRO>
<MACRO>
<NAME>ORBIT_DECL_Bonobo_UIContainer</NAME>
#define ORBIT_DECL_Bonobo_UIContainer 1
</MACRO>
<MACRO>
<NAME>Bonobo_UIContainer__freekids</NAME>
#define Bonobo_UIContainer__freekids CORBA_Object__freekids
</MACRO>
<TYPEDEF>
<NAME>Bonobo_UIContainer</NAME>
   typedef CORBA_Object Bonobo_UIContainer;
</TYPEDEF>
<VARIABLE>
<NAME>Bonobo_UIContainer__classid</NAME>
   extern CORBA_unsigned_long Bonobo_UIContainer__classid;
</VARIABLE>
<MACRO>
<NAME>TC_IMPL_TC_Bonobo_UIContainer_0</NAME>
#define TC_IMPL_TC_Bonobo_UIContainer_0 'B'
</MACRO>
<MACRO>
<NAME>TC_IMPL_TC_Bonobo_UIContainer_1</NAME>
#define TC_IMPL_TC_Bonobo_UIContainer_1 'o'
</MACRO>
<MACRO>
<NAME>TC_IMPL_TC_Bonobo_UIContainer_2</NAME>
#define TC_IMPL_TC_Bonobo_UIContainer_2 'n'
</MACRO>
<MACRO>
<NAME>TC_IMPL_TC_Bonobo_UIContainer_3</NAME>
#define TC_IMPL_TC_Bonobo_UIContainer_3 'o'
</MACRO>
<MACRO>
<NAME>TC_IMPL_TC_Bonobo_UIContainer_4</NAME>
#define TC_IMPL_TC_Bonobo_UIContainer_4 'b'
</MACRO>
<MACRO>
<NAME>TC_IMPL_TC_Bonobo_UIContainer_5</NAME>
#define TC_IMPL_TC_Bonobo_UIContainer_5 'o'
</MACRO>
<MACRO>
<NAME>TC_Bonobo_UIContainer</NAME>
#define TC_Bonobo_UIContainer ((CORBA_TypeCode)&TC_Bonobo_UIContainer_struct)
</MACRO>
<MACRO>
<NAME>ORBIT_DECL_Bonobo_UIComponent</NAME>
#define ORBIT_DECL_Bonobo_UIComponent 1
</MACRO>
<MACRO>
<NAME>Bonobo_UIComponent__freekids</NAME>
#define Bonobo_UIComponent__freekids CORBA_Object__freekids
</MACRO>
<TYPEDEF>
<NAME>Bonobo_UIComponent</NAME>
   typedef CORBA_Object Bonobo_UIComponent;
</TYPEDEF>
<VARIABLE>
<NAME>Bonobo_UIComponent__classid</NAME>
   extern CORBA_unsigned_long Bonobo_UIComponent__classid;
</VARIABLE>
<MACRO>
<NAME>TC_IMPL_TC_Bonobo_UIComponent_0</NAME>
#define TC_IMPL_TC_Bonobo_UIComponent_0 'B'
</MACRO>
<MACRO>
<NAME>TC_IMPL_TC_Bonobo_UIComponent_1</NAME>
#define TC_IMPL_TC_Bonobo_UIComponent_1 'o'
</MACRO>
<MACRO>
<NAME>TC_IMPL_TC_Bonobo_UIComponent_2</NAME>
#define TC_IMPL_TC_Bonobo_UIComponent_2 'n'
</MACRO>
<MACRO>
<NAME>TC_IMPL_TC_Bonobo_UIComponent_3</NAME>
#define TC_IMPL_TC_Bonobo_UIComponent_3 'o'
</MACRO>
<MACRO>
<NAME>TC_IMPL_TC_Bonobo_UIComponent_4</NAME>
#define TC_IMPL_TC_Bonobo_UIComponent_4 'b'
</MACRO>
<MACRO>
<NAME>TC_IMPL_TC_Bonobo_UIComponent_5</NAME>
#define TC_IMPL_TC_Bonobo_UIComponent_5 'o'
</MACRO>
<MACRO>
<NAME>TC_Bonobo_UIComponent</NAME>
#define TC_Bonobo_UIComponent ((CORBA_TypeCode)&TC_Bonobo_UIComponent_struct)
</MACRO>
<ENUM>
<NAME>Bonobo_UIComponent_EventType</NAME>
   typedef enum
   {
      Bonobo_UIComponent_STATE_CHANGED,
      Bonobo_UIComponent_OTHER
   }
   Bonobo_UIComponent_EventType;
</ENUM>
<MACRO>
<NAME>TC_IMPL_TC_Bonobo_UIComponent_EventType_0</NAME>
#define TC_IMPL_TC_Bonobo_UIComponent_EventType_0 'B'
</MACRO>
<MACRO>
<NAME>TC_IMPL_TC_Bonobo_UIComponent_EventType_1</NAME>
#define TC_IMPL_TC_Bonobo_UIComponent_EventType_1 'o'
</MACRO>
<MACRO>
<NAME>TC_IMPL_TC_Bonobo_UIComponent_EventType_2</NAME>
#define TC_IMPL_TC_Bonobo_UIComponent_EventType_2 'n'
</MACRO>
<MACRO>
<NAME>TC_IMPL_TC_Bonobo_UIComponent_EventType_3</NAME>
#define TC_IMPL_TC_Bonobo_UIComponent_EventType_3 'o'
</MACRO>
<MACRO>
<NAME>TC_IMPL_TC_Bonobo_UIComponent_EventType_4</NAME>
#define TC_IMPL_TC_Bonobo_UIComponent_EventType_4 'b'
</MACRO>
<MACRO>
<NAME>TC_IMPL_TC_Bonobo_UIComponent_EventType_5</NAME>
#define TC_IMPL_TC_Bonobo_UIComponent_EventType_5 'o'
</MACRO>
<MACRO>
<NAME>TC_Bonobo_UIComponent_EventType</NAME>
#define TC_Bonobo_UIComponent_EventType ((CORBA_TypeCode)&TC_Bonobo_UIComponent_EventType_struct)
</MACRO>
<MACRO>
<NAME>ORBIT_DECL_Bonobo_UIContainer</NAME>
#define ORBIT_DECL_Bonobo_UIContainer 1
</MACRO>
<MACRO>
<NAME>Bonobo_UIContainer__freekids</NAME>
#define Bonobo_UIContainer__freekids CORBA_Object__freekids
</MACRO>
<TYPEDEF>
<NAME>Bonobo_UIContainer</NAME>
   typedef CORBA_Object Bonobo_UIContainer;
</TYPEDEF>
<VARIABLE>
<NAME>Bonobo_UIContainer__classid</NAME>
   extern CORBA_unsigned_long Bonobo_UIContainer__classid;
</VARIABLE>
<MACRO>
<NAME>TC_IMPL_TC_Bonobo_UIContainer_0</NAME>
#define TC_IMPL_TC_Bonobo_UIContainer_0 'B'
</MACRO>
<MACRO>
<NAME>TC_IMPL_TC_Bonobo_UIContainer_1</NAME>
#define TC_IMPL_TC_Bonobo_UIContainer_1 'o'
</MACRO>
<MACRO>
<NAME>TC_IMPL_TC_Bonobo_UIContainer_2</NAME>
#define TC_IMPL_TC_Bonobo_UIContainer_2 'n'
</MACRO>
<MACRO>
<NAME>TC_IMPL_TC_Bonobo_UIContainer_3</NAME>
#define TC_IMPL_TC_Bonobo_UIContainer_3 'o'
</MACRO>
<MACRO>
<NAME>TC_IMPL_TC_Bonobo_UIContainer_4</NAME>
#define TC_IMPL_TC_Bonobo_UIContainer_4 'b'
</MACRO>
<MACRO>
<NAME>TC_IMPL_TC_Bonobo_UIContainer_5</NAME>
#define TC_IMPL_TC_Bonobo_UIContainer_5 'o'
</MACRO>
<MACRO>
<NAME>TC_Bonobo_UIContainer</NAME>
#define TC_Bonobo_UIContainer ((CORBA_TypeCode)&TC_Bonobo_UIContainer_struct)
</MACRO>
<MACRO>
<NAME>ex_Bonobo_UIContainer_MalformedXML</NAME>
#define ex_Bonobo_UIContainer_MalformedXML "IDL:Bonobo/UIContainer/MalformedXML:1.0"
</MACRO>
<MACRO>
<NAME>TC_IMPL_TC_Bonobo_UIContainer_MalformedXML_0</NAME>
#define TC_IMPL_TC_Bonobo_UIContainer_MalformedXML_0 'B'
</MACRO>
<MACRO>
<NAME>TC_IMPL_TC_Bonobo_UIContainer_MalformedXML_1</NAME>
#define TC_IMPL_TC_Bonobo_UIContainer_MalformedXML_1 'o'
</MACRO>
<MACRO>
<NAME>TC_IMPL_TC_Bonobo_UIContainer_MalformedXML_2</NAME>
#define TC_IMPL_TC_Bonobo_UIContainer_MalformedXML_2 'n'
</MACRO>
<MACRO>
<NAME>TC_IMPL_TC_Bonobo_UIContainer_MalformedXML_3</NAME>
#define TC_IMPL_TC_Bonobo_UIContainer_MalformedXML_3 'o'
</MACRO>
<MACRO>
<NAME>TC_IMPL_TC_Bonobo_UIContainer_MalformedXML_4</NAME>
#define TC_IMPL_TC_Bonobo_UIContainer_MalformedXML_4 'b'
</MACRO>
<MACRO>
<NAME>TC_IMPL_TC_Bonobo_UIContainer_MalformedXML_5</NAME>
#define TC_IMPL_TC_Bonobo_UIContainer_MalformedXML_5 'o'
</MACRO>
<MACRO>
<NAME>TC_Bonobo_UIContainer_MalformedXML</NAME>
#define TC_Bonobo_UIContainer_MalformedXML ((CORBA_TypeCode)&TC_Bonobo_UIContainer_MalformedXML_struct)
</MACRO>
<MACRO>
<NAME>Bonobo_UIContainer_MalformedXML__alloc</NAME>
#define Bonobo_UIContainer_MalformedXML__alloc() ((Bonobo_UIContainer_MalformedXML *)ORBit_small_alloc (TC_Bonobo_UIContainer_MalformedXML))
</MACRO>
<MACRO>
<NAME>Bonobo_UIContainer_MalformedXML__freekids</NAME>
#define Bonobo_UIContainer_MalformedXML__freekids(m,d) ORBit_small_freekids (TC_Bonobo_UIContainer_MalformedXML,(m),(d))
</MACRO>
<MACRO>
<NAME>ex_Bonobo_UIContainer_InvalidPath</NAME>
#define ex_Bonobo_UIContainer_InvalidPath "IDL:Bonobo/UIContainer/InvalidPath:1.0"
</MACRO>
<MACRO>
<NAME>TC_IMPL_TC_Bonobo_UIContainer_InvalidPath_0</NAME>
#define TC_IMPL_TC_Bonobo_UIContainer_InvalidPath_0 'B'
</MACRO>
<MACRO>
<NAME>TC_IMPL_TC_Bonobo_UIContainer_InvalidPath_1</NAME>
#define TC_IMPL_TC_Bonobo_UIContainer_InvalidPath_1 'o'
</MACRO>
<MACRO>
<NAME>TC_IMPL_TC_Bonobo_UIContainer_InvalidPath_2</NAME>
#define TC_IMPL_TC_Bonobo_UIContainer_InvalidPath_2 'n'
</MACRO>
<MACRO>
<NAME>TC_IMPL_TC_Bonobo_UIContainer_InvalidPath_3</NAME>
#define TC_IMPL_TC_Bonobo_UIContainer_InvalidPath_3 'o'
</MACRO>
<MACRO>
<NAME>TC_IMPL_TC_Bonobo_UIContainer_InvalidPath_4</NAME>
#define TC_IMPL_TC_Bonobo_UIContainer_InvalidPath_4 'b'
</MACRO>
<MACRO>
<NAME>TC_IMPL_TC_Bonobo_UIContainer_InvalidPath_5</NAME>
#define TC_IMPL_TC_Bonobo_UIContainer_InvalidPath_5 'o'
</MACRO>
<MACRO>
<NAME>TC_Bonobo_UIContainer_InvalidPath</NAME>
#define TC_Bonobo_UIContainer_InvalidPath ((CORBA_TypeCode)&TC_Bonobo_UIContainer_InvalidPath_struct)
</MACRO>
<MACRO>
<NAME>Bonobo_UIContainer_InvalidPath__alloc</NAME>
#define Bonobo_UIContainer_InvalidPath__alloc() ((Bonobo_UIContainer_InvalidPath *)ORBit_small_alloc (TC_Bonobo_UIContainer_InvalidPath))
</MACRO>
<MACRO>
<NAME>Bonobo_UIContainer_InvalidPath__freekids</NAME>
#define Bonobo_UIContainer_InvalidPath__freekids(m,d) ORBit_small_freekids (TC_Bonobo_UIContainer_InvalidPath,(m),(d))
</MACRO>
<MACRO>
<NAME>ex_Bonobo_UIContainer_NonExistentAttr</NAME>
#define ex_Bonobo_UIContainer_NonExistentAttr "IDL:Bonobo/UIContainer/NonExistentAttr:1.0"
</MACRO>
<MACRO>
<NAME>TC_IMPL_TC_Bonobo_UIContainer_NonExistentAttr_0</NAME>
#define TC_IMPL_TC_Bonobo_UIContainer_NonExistentAttr_0 'B'
</MACRO>
<MACRO>
<NAME>TC_IMPL_TC_Bonobo_UIContainer_NonExistentAttr_1</NAME>
#define TC_IMPL_TC_Bonobo_UIContainer_NonExistentAttr_1 'o'
</MACRO>
<MACRO>
<NAME>TC_IMPL_TC_Bonobo_UIContainer_NonExistentAttr_2</NAME>
#define TC_IMPL_TC_Bonobo_UIContainer_NonExistentAttr_2 'n'
</MACRO>
<MACRO>
<NAME>TC_IMPL_TC_Bonobo_UIContainer_NonExistentAttr_3</NAME>
#define TC_IMPL_TC_Bonobo_UIContainer_NonExistentAttr_3 'o'
</MACRO>
<MACRO>
<NAME>TC_IMPL_TC_Bonobo_UIContainer_NonExistentAttr_4</NAME>
#define TC_IMPL_TC_Bonobo_UIContainer_NonExistentAttr_4 'b'
</MACRO>
<MACRO>
<NAME>TC_IMPL_TC_Bonobo_UIContainer_NonExistentAttr_5</NAME>
#define TC_IMPL_TC_Bonobo_UIContainer_NonExistentAttr_5 'o'
</MACRO>
<MACRO>
<NAME>TC_Bonobo_UIContainer_NonExistentAttr</NAME>
#define TC_Bonobo_UIContainer_NonExistentAttr ((CORBA_TypeCode)&TC_Bonobo_UIContainer_NonExistentAttr_struct)
</MACRO>
<MACRO>
<NAME>Bonobo_UIContainer_NonExistentAttr__alloc</NAME>
#define Bonobo_UIContainer_NonExistentAttr__alloc() ((Bonobo_UIContainer_NonExistentAttr *)ORBit_small_alloc (TC_Bonobo_UIContainer_NonExistentAttr))
</MACRO>
<MACRO>
<NAME>Bonobo_UIContainer_NonExistentAttr__freekids</NAME>
#define Bonobo_UIContainer_NonExistentAttr__freekids(m,d) ORBit_small_freekids (TC_Bonobo_UIContainer_NonExistentAttr,(m),(d))
</MACRO>
<MACRO>
<NAME>ex_Bonobo_UIContainer_Insensitive</NAME>
#define ex_Bonobo_UIContainer_Insensitive "IDL:Bonobo/UIContainer/Insensitive:1.0"
</MACRO>
<MACRO>
<NAME>TC_IMPL_TC_Bonobo_UIContainer_Insensitive_0</NAME>
#define TC_IMPL_TC_Bonobo_UIContainer_Insensitive_0 'B'
</MACRO>
<MACRO>
<NAME>TC_IMPL_TC_Bonobo_UIContainer_Insensitive_1</NAME>
#define TC_IMPL_TC_Bonobo_UIContainer_Insensitive_1 'o'
</MACRO>
<MACRO>
<NAME>TC_IMPL_TC_Bonobo_UIContainer_Insensitive_2</NAME>
#define TC_IMPL_TC_Bonobo_UIContainer_Insensitive_2 'n'
</MACRO>
<MACRO>
<NAME>TC_IMPL_TC_Bonobo_UIContainer_Insensitive_3</NAME>
#define TC_IMPL_TC_Bonobo_UIContainer_Insensitive_3 'o'
</MACRO>
<MACRO>
<NAME>TC_IMPL_TC_Bonobo_UIContainer_Insensitive_4</NAME>
#define TC_IMPL_TC_Bonobo_UIContainer_Insensitive_4 'b'
</MACRO>
<MACRO>
<NAME>TC_IMPL_TC_Bonobo_UIContainer_Insensitive_5</NAME>
#define TC_IMPL_TC_Bonobo_UIContainer_Insensitive_5 'o'
</MACRO>
<MACRO>
<NAME>TC_Bonobo_UIContainer_Insensitive</NAME>
#define TC_Bonobo_UIContainer_Insensitive ((CORBA_TypeCode)&TC_Bonobo_UIContainer_Insensitive_struct)
</MACRO>
<MACRO>
<NAME>Bonobo_UIContainer_Insensitive__alloc</NAME>
#define Bonobo_UIContainer_Insensitive__alloc() ((Bonobo_UIContainer_Insensitive *)ORBit_small_alloc (TC_Bonobo_UIContainer_Insensitive))
</MACRO>
<MACRO>
<NAME>Bonobo_UIContainer_Insensitive__freekids</NAME>
#define Bonobo_UIContainer_Insensitive__freekids(m,d) ORBit_small_freekids (TC_Bonobo_UIContainer_Insensitive,(m),(d))
</MACRO>
<MACRO>
<NAME>ex_Bonobo_UIContainer_Unknown</NAME>
#define ex_Bonobo_UIContainer_Unknown "IDL:Bonobo/UIContainer/Unknown:1.0"
</MACRO>
<MACRO>
<NAME>TC_IMPL_TC_Bonobo_UIContainer_Unknown_0</NAME>
#define TC_IMPL_TC_Bonobo_UIContainer_Unknown_0 'B'
</MACRO>
<MACRO>
<NAME>TC_IMPL_TC_Bonobo_UIContainer_Unknown_1</NAME>
#define TC_IMPL_TC_Bonobo_UIContainer_Unknown_1 'o'
</MACRO>
<MACRO>
<NAME>TC_IMPL_TC_Bonobo_UIContainer_Unknown_2</NAME>
#define TC_IMPL_TC_Bonobo_UIContainer_Unknown_2 'n'
</MACRO>
<MACRO>
<NAME>TC_IMPL_TC_Bonobo_UIContainer_Unknown_3</NAME>
#define TC_IMPL_TC_Bonobo_UIContainer_Unknown_3 'o'
</MACRO>
<MACRO>
<NAME>TC_IMPL_TC_Bonobo_UIContainer_Unknown_4</NAME>
#define TC_IMPL_TC_Bonobo_UIContainer_Unknown_4 'b'
</MACRO>
<MACRO>
<NAME>TC_IMPL_TC_Bonobo_UIContainer_Unknown_5</NAME>
#define TC_IMPL_TC_Bonobo_UIContainer_Unknown_5 'o'
</MACRO>
<MACRO>
<NAME>TC_Bonobo_UIContainer_Unknown</NAME>
#define TC_Bonobo_UIContainer_Unknown ((CORBA_TypeCode)&TC_Bonobo_UIContainer_Unknown_struct)
</MACRO>
<MACRO>
<NAME>Bonobo_UIContainer_Unknown__alloc</NAME>
#define Bonobo_UIContainer_Unknown__alloc() ((Bonobo_UIContainer_Unknown *)ORBit_small_alloc (TC_Bonobo_UIContainer_Unknown))
</MACRO>
<MACRO>
<NAME>Bonobo_UIContainer_Unknown__freekids</NAME>
#define Bonobo_UIContainer_Unknown__freekids(m,d) ORBit_small_freekids (TC_Bonobo_UIContainer_Unknown,(m),(d))
</MACRO>
<MACRO>
<NAME>TC_IMPL_TC_Bonobo_Pair_0</NAME>
#define TC_IMPL_TC_Bonobo_Pair_0 'B'
</MACRO>
<MACRO>
<NAME>TC_IMPL_TC_Bonobo_Pair_1</NAME>
#define TC_IMPL_TC_Bonobo_Pair_1 'o'
</MACRO>
<MACRO>
<NAME>TC_IMPL_TC_Bonobo_Pair_2</NAME>
#define TC_IMPL_TC_Bonobo_Pair_2 'n'
</MACRO>
<MACRO>
<NAME>TC_IMPL_TC_Bonobo_Pair_3</NAME>
#define TC_IMPL_TC_Bonobo_Pair_3 'o'
</MACRO>
<MACRO>
<NAME>TC_IMPL_TC_Bonobo_Pair_4</NAME>
#define TC_IMPL_TC_Bonobo_Pair_4 'b'
</MACRO>
<MACRO>
<NAME>TC_IMPL_TC_Bonobo_Pair_5</NAME>
#define TC_IMPL_TC_Bonobo_Pair_5 'o'
</MACRO>
<MACRO>
<NAME>TC_Bonobo_Pair</NAME>
#define TC_Bonobo_Pair ((CORBA_TypeCode)&TC_Bonobo_Pair_struct)
</MACRO>
<MACRO>
<NAME>Bonobo_Pair__alloc</NAME>
#define Bonobo_Pair__alloc() ((Bonobo_Pair *)ORBit_small_alloc (TC_Bonobo_Pair))
</MACRO>
<MACRO>
<NAME>Bonobo_Pair__freekids</NAME>
#define Bonobo_Pair__freekids(m,d) ORBit_small_freekids (TC_Bonobo_Pair,(m),(d))
</MACRO>
<MACRO>
<NAME>ORBIT_DECL_CORBA_sequence_Bonobo_Pair</NAME>
#define ORBIT_DECL_CORBA_sequence_Bonobo_Pair 1
</MACRO>
<MACRO>
<NAME>ORBIT_IMPL_CORBA_sequence_Bonobo_Pair_0</NAME>
#define ORBIT_IMPL_CORBA_sequence_Bonobo_Pair_0 'B'
</MACRO>
<MACRO>
<NAME>ORBIT_IMPL_CORBA_sequence_Bonobo_Pair_1</NAME>
#define ORBIT_IMPL_CORBA_sequence_Bonobo_Pair_1 'o'
</MACRO>
<MACRO>
<NAME>ORBIT_IMPL_CORBA_sequence_Bonobo_Pair_2</NAME>
#define ORBIT_IMPL_CORBA_sequence_Bonobo_Pair_2 'n'
</MACRO>
<MACRO>
<NAME>ORBIT_IMPL_CORBA_sequence_Bonobo_Pair_3</NAME>
#define ORBIT_IMPL_CORBA_sequence_Bonobo_Pair_3 'o'
</MACRO>
<MACRO>
<NAME>ORBIT_IMPL_CORBA_sequence_Bonobo_Pair_4</NAME>
#define ORBIT_IMPL_CORBA_sequence_Bonobo_Pair_4 'b'
</MACRO>
<MACRO>
<NAME>ORBIT_IMPL_CORBA_sequence_Bonobo_Pair_5</NAME>
#define ORBIT_IMPL_CORBA_sequence_Bonobo_Pair_5 'o'
</MACRO>
<MACRO>
<NAME>TC_IMPL_TC_CORBA_sequence_Bonobo_Pair_0</NAME>
#define TC_IMPL_TC_CORBA_sequence_Bonobo_Pair_0 'B'
</MACRO>
<MACRO>
<NAME>TC_IMPL_TC_CORBA_sequence_Bonobo_Pair_1</NAME>
#define TC_IMPL_TC_CORBA_sequence_Bonobo_Pair_1 'o'
</MACRO>
<MACRO>
<NAME>TC_IMPL_TC_CORBA_sequence_Bonobo_Pair_2</NAME>
#define TC_IMPL_TC_CORBA_sequence_Bonobo_Pair_2 'n'
</MACRO>
<MACRO>
<NAME>TC_IMPL_TC_CORBA_sequence_Bonobo_Pair_3</NAME>
#define TC_IMPL_TC_CORBA_sequence_Bonobo_Pair_3 'o'
</MACRO>
<MACRO>
<NAME>TC_IMPL_TC_CORBA_sequence_Bonobo_Pair_4</NAME>
#define TC_IMPL_TC_CORBA_sequence_Bonobo_Pair_4 'b'
</MACRO>
<MACRO>
<NAME>TC_IMPL_TC_CORBA_sequence_Bonobo_Pair_5</NAME>
#define TC_IMPL_TC_CORBA_sequence_Bonobo_Pair_5 'o'
</MACRO>
<MACRO>
<NAME>TC_CORBA_sequence_Bonobo_Pair</NAME>
#define TC_CORBA_sequence_Bonobo_Pair ((CORBA_TypeCode)&TC_CORBA_sequence_Bonobo_Pair_struct)
</MACRO>
<MACRO>
<NAME>CORBA_sequence_Bonobo_Pair__alloc</NAME>
#define CORBA_sequence_Bonobo_Pair__alloc() ((CORBA_sequence_Bonobo_Pair *)ORBit_small_alloc (TC_CORBA_sequence_Bonobo_Pair))
</MACRO>
<MACRO>
<NAME>CORBA_sequence_Bonobo_Pair__freekids</NAME>
#define CORBA_sequence_Bonobo_Pair__freekids(m,d) ORBit_small_freekids (TC_CORBA_sequence_Bonobo_Pair,(m),(d))
</MACRO>
<MACRO>
<NAME>CORBA_sequence_Bonobo_Pair_allocbuf</NAME>
#define CORBA_sequence_Bonobo_Pair_allocbuf(l) ORBit_small_allocbuf (TC_CORBA_sequence_Bonobo_Pair, (l))
</MACRO>
<MACRO>
<NAME>CORBA_sequence_Bonobo_Pair_allocbuf</NAME>
#define CORBA_sequence_Bonobo_Pair_allocbuf(l) ORBit_small_allocbuf (TC_CORBA_sequence_Bonobo_Pair, (l))
</MACRO>
<TYPEDEF>
<NAME>Bonobo_PropertySet</NAME>
   typedef CORBA_sequence_Bonobo_Pair Bonobo_PropertySet;
</TYPEDEF>
<MACRO>
<NAME>Bonobo_PropertySet_marshal</NAME>
#define Bonobo_PropertySet_marshal(x,y,z) CORBA_sequence_Bonobo_Pair_marshal((x),(y),(z))
</MACRO>
<MACRO>
<NAME>Bonobo_PropertySet_demarshal</NAME>
#define Bonobo_PropertySet_demarshal(x,y,z,i) CORBA_sequence_Bonobo_Pair_demarshal((x),(y),(z),(i))
</MACRO>
<MACRO>
<NAME>TC_IMPL_TC_Bonobo_PropertySet_0</NAME>
#define TC_IMPL_TC_Bonobo_PropertySet_0 'B'
</MACRO>
<MACRO>
<NAME>TC_IMPL_TC_Bonobo_PropertySet_1</NAME>
#define TC_IMPL_TC_Bonobo_PropertySet_1 'o'
</MACRO>
<MACRO>
<NAME>TC_IMPL_TC_Bonobo_PropertySet_2</NAME>
#define TC_IMPL_TC_Bonobo_PropertySet_2 'n'
</MACRO>
<MACRO>
<NAME>TC_IMPL_TC_Bonobo_PropertySet_3</NAME>
#define TC_IMPL_TC_Bonobo_PropertySet_3 'o'
</MACRO>
<MACRO>
<NAME>TC_IMPL_TC_Bonobo_PropertySet_4</NAME>
#define TC_IMPL_TC_Bonobo_PropertySet_4 'b'
</MACRO>
<MACRO>
<NAME>TC_IMPL_TC_Bonobo_PropertySet_5</NAME>
#define TC_IMPL_TC_Bonobo_PropertySet_5 'o'
</MACRO>
<MACRO>
<NAME>TC_Bonobo_PropertySet</NAME>
#define TC_Bonobo_PropertySet ((CORBA_TypeCode)&TC_Bonobo_PropertySet_struct)
</MACRO>
<MACRO>
<NAME>Bonobo_PropertySet__alloc</NAME>
#define Bonobo_PropertySet__alloc() ((Bonobo_PropertySet *)ORBit_small_alloc (TC_CORBA_sequence_Bonobo_Pair))
</MACRO>
<MACRO>
<NAME>Bonobo_PropertySet__freekids</NAME>
#define Bonobo_PropertySet__freekids(m,d) ORBit_small_freekids (TC_CORBA_sequence_Bonobo_Pair,(m),(d))
</MACRO>
<MACRO>
<NAME>Bonobo_PropertySet_allocbuf</NAME>
#define Bonobo_PropertySet_allocbuf(l) ORBit_small_allocbuf (TC_CORBA_sequence_Bonobo_Pair, (l))
</MACRO>
<MACRO>
<NAME>ORBIT_DECL_CORBA_sequence_CORBA_string</NAME>
#define ORBIT_DECL_CORBA_sequence_CORBA_string 1
</MACRO>
<MACRO>
<NAME>ORBIT_IMPL_CORBA_sequence_CORBA_string_0</NAME>
#define ORBIT_IMPL_CORBA_sequence_CORBA_string_0 'B'
</MACRO>
<MACRO>
<NAME>ORBIT_IMPL_CORBA_sequence_CORBA_string_1</NAME>
#define ORBIT_IMPL_CORBA_sequence_CORBA_string_1 'o'
</MACRO>
<MACRO>
<NAME>ORBIT_IMPL_CORBA_sequence_CORBA_string_2</NAME>
#define ORBIT_IMPL_CORBA_sequence_CORBA_string_2 'n'
</MACRO>
<MACRO>
<NAME>ORBIT_IMPL_CORBA_sequence_CORBA_string_3</NAME>
#define ORBIT_IMPL_CORBA_sequence_CORBA_string_3 'o'
</MACRO>
<MACRO>
<NAME>ORBIT_IMPL_CORBA_sequence_CORBA_string_4</NAME>
#define ORBIT_IMPL_CORBA_sequence_CORBA_string_4 'b'
</MACRO>
<MACRO>
<NAME>ORBIT_IMPL_CORBA_sequence_CORBA_string_5</NAME>
#define ORBIT_IMPL_CORBA_sequence_CORBA_string_5 'o'
</MACRO>
<MACRO>
<NAME>TC_IMPL_TC_CORBA_sequence_CORBA_string_0</NAME>
#define TC_IMPL_TC_CORBA_sequence_CORBA_string_0 'B'
</MACRO>
<MACRO>
<NAME>TC_IMPL_TC_CORBA_sequence_CORBA_string_1</NAME>
#define TC_IMPL_TC_CORBA_sequence_CORBA_string_1 'o'
</MACRO>
<MACRO>
<NAME>TC_IMPL_TC_CORBA_sequence_CORBA_string_2</NAME>
#define TC_IMPL_TC_CORBA_sequence_CORBA_string_2 'n'
</MACRO>
<MACRO>
<NAME>TC_IMPL_TC_CORBA_sequence_CORBA_string_3</NAME>
#define TC_IMPL_TC_CORBA_sequence_CORBA_string_3 'o'
</MACRO>
<MACRO>
<NAME>TC_IMPL_TC_CORBA_sequence_CORBA_string_4</NAME>
#define TC_IMPL_TC_CORBA_sequence_CORBA_string_4 'b'
</MACRO>
<MACRO>
<NAME>TC_IMPL_TC_CORBA_sequence_CORBA_string_5</NAME>
#define TC_IMPL_TC_CORBA_sequence_CORBA_string_5 'o'
</MACRO>
<MACRO>
<NAME>TC_CORBA_sequence_CORBA_string</NAME>
#define TC_CORBA_sequence_CORBA_string ((CORBA_TypeCode)&TC_CORBA_sequence_CORBA_string_struct)
</MACRO>
<MACRO>
<NAME>CORBA_sequence_CORBA_string__alloc</NAME>
#define CORBA_sequence_CORBA_string__alloc() ((CORBA_sequence_CORBA_string *)ORBit_small_alloc (TC_CORBA_sequence_CORBA_string))
</MACRO>
<MACRO>
<NAME>CORBA_sequence_CORBA_string__freekids</NAME>
#define CORBA_sequence_CORBA_string__freekids(m,d) ORBit_small_freekids (TC_CORBA_sequence_CORBA_string,(m),(d))
</MACRO>
<MACRO>
<NAME>CORBA_sequence_CORBA_string_allocbuf</NAME>
#define CORBA_sequence_CORBA_string_allocbuf(l) ORBit_small_allocbuf (TC_CORBA_sequence_CORBA_string, (l))
</MACRO>
<MACRO>
<NAME>CORBA_sequence_CORBA_string_allocbuf</NAME>
#define CORBA_sequence_CORBA_string_allocbuf(l) ORBit_small_allocbuf (TC_CORBA_sequence_CORBA_string, (l))
</MACRO>
<TYPEDEF>
<NAME>Bonobo_KeyList</NAME>
   typedef CORBA_sequence_CORBA_string Bonobo_KeyList;
</TYPEDEF>
<MACRO>
<NAME>Bonobo_KeyList_marshal</NAME>
#define Bonobo_KeyList_marshal(x,y,z) CORBA_sequence_CORBA_string_marshal((x),(y),(z))
</MACRO>
<MACRO>
<NAME>Bonobo_KeyList_demarshal</NAME>
#define Bonobo_KeyList_demarshal(x,y,z,i) CORBA_sequence_CORBA_string_demarshal((x),(y),(z),(i))
</MACRO>
<MACRO>
<NAME>TC_IMPL_TC_Bonobo_KeyList_0</NAME>
#define TC_IMPL_TC_Bonobo_KeyList_0 'B'
</MACRO>
<MACRO>
<NAME>TC_IMPL_TC_Bonobo_KeyList_1</NAME>
#define TC_IMPL_TC_Bonobo_KeyList_1 'o'
</MACRO>
<MACRO>
<NAME>TC_IMPL_TC_Bonobo_KeyList_2</NAME>
#define TC_IMPL_TC_Bonobo_KeyList_2 'n'
</MACRO>
<MACRO>
<NAME>TC_IMPL_TC_Bonobo_KeyList_3</NAME>
#define TC_IMPL_TC_Bonobo_KeyList_3 'o'
</MACRO>
<MACRO>
<NAME>TC_IMPL_TC_Bonobo_KeyList_4</NAME>
#define TC_IMPL_TC_Bonobo_KeyList_4 'b'
</MACRO>
<MACRO>
<NAME>TC_IMPL_TC_Bonobo_KeyList_5</NAME>
#define TC_IMPL_TC_Bonobo_KeyList_5 'o'
</MACRO>
<MACRO>
<NAME>TC_Bonobo_KeyList</NAME>
#define TC_Bonobo_KeyList ((CORBA_TypeCode)&TC_Bonobo_KeyList_struct)
</MACRO>
<MACRO>
<NAME>Bonobo_KeyList__alloc</NAME>
#define Bonobo_KeyList__alloc() ((Bonobo_KeyList *)ORBit_small_alloc (TC_CORBA_sequence_CORBA_string))
</MACRO>
<MACRO>
<NAME>Bonobo_KeyList__freekids</NAME>
#define Bonobo_KeyList__freekids(m,d) ORBit_small_freekids (TC_CORBA_sequence_CORBA_string,(m),(d))
</MACRO>
<MACRO>
<NAME>Bonobo_KeyList_allocbuf</NAME>
#define Bonobo_KeyList_allocbuf(l) ORBit_small_allocbuf (TC_CORBA_sequence_CORBA_string, (l))
</MACRO>
<TYPEDEF>
<NAME>Bonobo_PropertyFlags</NAME>
   typedef CORBA_long Bonobo_PropertyFlags;
</TYPEDEF>
<MACRO>
<NAME>Bonobo_PropertyFlags_marshal</NAME>
#define Bonobo_PropertyFlags_marshal(x,y,z) CORBA_long_marshal((x),(y),(z))
</MACRO>
<MACRO>
<NAME>Bonobo_PropertyFlags_demarshal</NAME>
#define Bonobo_PropertyFlags_demarshal(x,y,z,i) CORBA_long_demarshal((x),(y),(z),(i))
</MACRO>
<MACRO>
<NAME>TC_IMPL_TC_Bonobo_PropertyFlags_0</NAME>
#define TC_IMPL_TC_Bonobo_PropertyFlags_0 'B'
</MACRO>
<MACRO>
<NAME>TC_IMPL_TC_Bonobo_PropertyFlags_1</NAME>
#define TC_IMPL_TC_Bonobo_PropertyFlags_1 'o'
</MACRO>
<MACRO>
<NAME>TC_IMPL_TC_Bonobo_PropertyFlags_2</NAME>
#define TC_IMPL_TC_Bonobo_PropertyFlags_2 'n'
</MACRO>
<MACRO>
<NAME>TC_IMPL_TC_Bonobo_PropertyFlags_3</NAME>
#define TC_IMPL_TC_Bonobo_PropertyFlags_3 'o'
</MACRO>
<MACRO>
<NAME>TC_IMPL_TC_Bonobo_PropertyFlags_4</NAME>
#define TC_IMPL_TC_Bonobo_PropertyFlags_4 'b'
</MACRO>
<MACRO>
<NAME>TC_IMPL_TC_Bonobo_PropertyFlags_5</NAME>
#define TC_IMPL_TC_Bonobo_PropertyFlags_5 'o'
</MACRO>
<MACRO>
<NAME>TC_Bonobo_PropertyFlags</NAME>
#define TC_Bonobo_PropertyFlags ((CORBA_TypeCode)&TC_Bonobo_PropertyFlags_struct)
</MACRO>
<MACRO>
<NAME>Bonobo_PropertyFlags__alloc</NAME>
#define Bonobo_PropertyFlags__alloc() ((Bonobo_PropertyFlags *)ORBit_small_alloc (TC_CORBA_long))
</MACRO>
<MACRO>
<NAME>Bonobo_PropertyFlags__freekids</NAME>
#define Bonobo_PropertyFlags__freekids(m,d) ORBit_small_freekids (TC_CORBA_long,(m),(d))
</MACRO>
<MACRO>
<NAME>Bonobo_PROPERTY_READABLE</NAME>
#define Bonobo_PROPERTY_READABLE 1
</MACRO>
<MACRO>
<NAME>Bonobo_PROPERTY_WRITEABLE</NAME>
#define Bonobo_PROPERTY_WRITEABLE 2
</MACRO>
<MACRO>
<NAME>Bonobo_PROPERTY_NO_LISTENING</NAME>
#define Bonobo_PROPERTY_NO_LISTENING 4
</MACRO>
<MACRO>
<NAME>Bonobo_PROPERTY_NO_AUTONOTIFY</NAME>
#define Bonobo_PROPERTY_NO_AUTONOTIFY 8
</MACRO>
<MACRO>
<NAME>Bonobo_PROPERTY_NO_PERSIST</NAME>
#define Bonobo_PROPERTY_NO_PERSIST 16
</MACRO>
<MACRO>
<NAME>ORBIT_DECL_Bonobo_PropertyBag</NAME>
#define ORBIT_DECL_Bonobo_PropertyBag 1
</MACRO>
<MACRO>
<NAME>Bonobo_PropertyBag__freekids</NAME>
#define Bonobo_PropertyBag__freekids CORBA_Object__freekids
</MACRO>
<TYPEDEF>
<NAME>Bonobo_PropertyBag</NAME>
   typedef CORBA_Object Bonobo_PropertyBag;
</TYPEDEF>
<VARIABLE>
<NAME>Bonobo_PropertyBag__classid</NAME>
   extern CORBA_unsigned_long Bonobo_PropertyBag__classid;
</VARIABLE>
<MACRO>
<NAME>TC_IMPL_TC_Bonobo_PropertyBag_0</NAME>
#define TC_IMPL_TC_Bonobo_PropertyBag_0 'B'
</MACRO>
<MACRO>
<NAME>TC_IMPL_TC_Bonobo_PropertyBag_1</NAME>
#define TC_IMPL_TC_Bonobo_PropertyBag_1 'o'
</MACRO>
<MACRO>
<NAME>TC_IMPL_TC_Bonobo_PropertyBag_2</NAME>
#define TC_IMPL_TC_Bonobo_PropertyBag_2 'n'
</MACRO>
<MACRO>
<NAME>TC_IMPL_TC_Bonobo_PropertyBag_3</NAME>
#define TC_IMPL_TC_Bonobo_PropertyBag_3 'o'
</MACRO>
<MACRO>
<NAME>TC_IMPL_TC_Bonobo_PropertyBag_4</NAME>
#define TC_IMPL_TC_Bonobo_PropertyBag_4 'b'
</MACRO>
<MACRO>
<NAME>TC_IMPL_TC_Bonobo_PropertyBag_5</NAME>
#define TC_IMPL_TC_Bonobo_PropertyBag_5 'o'
</MACRO>
<MACRO>
<NAME>TC_Bonobo_PropertyBag</NAME>
#define TC_Bonobo_PropertyBag ((CORBA_TypeCode)&TC_Bonobo_PropertyBag_struct)
</MACRO>
<MACRO>
<NAME>ex_Bonobo_PropertyBag_NotFound</NAME>
#define ex_Bonobo_PropertyBag_NotFound "IDL:Bonobo/PropertyBag/NotFound:1.0"
</MACRO>
<MACRO>
<NAME>TC_IMPL_TC_Bonobo_PropertyBag_NotFound_0</NAME>
#define TC_IMPL_TC_Bonobo_PropertyBag_NotFound_0 'B'
</MACRO>
<MACRO>
<NAME>TC_IMPL_TC_Bonobo_PropertyBag_NotFound_1</NAME>
#define TC_IMPL_TC_Bonobo_PropertyBag_NotFound_1 'o'
</MACRO>
<MACRO>
<NAME>TC_IMPL_TC_Bonobo_PropertyBag_NotFound_2</NAME>
#define TC_IMPL_TC_Bonobo_PropertyBag_NotFound_2 'n'
</MACRO>
<MACRO>
<NAME>TC_IMPL_TC_Bonobo_PropertyBag_NotFound_3</NAME>
#define TC_IMPL_TC_Bonobo_PropertyBag_NotFound_3 'o'
</MACRO>
<MACRO>
<NAME>TC_IMPL_TC_Bonobo_PropertyBag_NotFound_4</NAME>
#define TC_IMPL_TC_Bonobo_PropertyBag_NotFound_4 'b'
</MACRO>
<MACRO>
<NAME>TC_IMPL_TC_Bonobo_PropertyBag_NotFound_5</NAME>
#define TC_IMPL_TC_Bonobo_PropertyBag_NotFound_5 'o'
</MACRO>
<MACRO>
<NAME>TC_Bonobo_PropertyBag_NotFound</NAME>
#define TC_Bonobo_PropertyBag_NotFound ((CORBA_TypeCode)&TC_Bonobo_PropertyBag_NotFound_struct)
</MACRO>
<MACRO>
<NAME>Bonobo_PropertyBag_NotFound__alloc</NAME>
#define Bonobo_PropertyBag_NotFound__alloc() ((Bonobo_PropertyBag_NotFound *)ORBit_small_alloc (TC_Bonobo_PropertyBag_NotFound))
</MACRO>
<MACRO>
<NAME>Bonobo_PropertyBag_NotFound__freekids</NAME>
#define Bonobo_PropertyBag_NotFound__freekids(m,d) ORBit_small_freekids (TC_Bonobo_PropertyBag_NotFound,(m),(d))
</MACRO>
<MACRO>
<NAME>ex_Bonobo_PropertyBag_InvalidType</NAME>
#define ex_Bonobo_PropertyBag_InvalidType "IDL:Bonobo/PropertyBag/InvalidType:1.0"
</MACRO>
<MACRO>
<NAME>TC_IMPL_TC_Bonobo_PropertyBag_InvalidType_0</NAME>
#define TC_IMPL_TC_Bonobo_PropertyBag_InvalidType_0 'B'
</MACRO>
<MACRO>
<NAME>TC_IMPL_TC_Bonobo_PropertyBag_InvalidType_1</NAME>
#define TC_IMPL_TC_Bonobo_PropertyBag_InvalidType_1 'o'
</MACRO>
<MACRO>
<NAME>TC_IMPL_TC_Bonobo_PropertyBag_InvalidType_2</NAME>
#define TC_IMPL_TC_Bonobo_PropertyBag_InvalidType_2 'n'
</MACRO>
<MACRO>
<NAME>TC_IMPL_TC_Bonobo_PropertyBag_InvalidType_3</NAME>
#define TC_IMPL_TC_Bonobo_PropertyBag_InvalidType_3 'o'
</MACRO>
<MACRO>
<NAME>TC_IMPL_TC_Bonobo_PropertyBag_InvalidType_4</NAME>
#define TC_IMPL_TC_Bonobo_PropertyBag_InvalidType_4 'b'
</MACRO>
<MACRO>
<NAME>TC_IMPL_TC_Bonobo_PropertyBag_InvalidType_5</NAME>
#define TC_IMPL_TC_Bonobo_PropertyBag_InvalidType_5 'o'
</MACRO>
<MACRO>
<NAME>TC_Bonobo_PropertyBag_InvalidType</NAME>
#define TC_Bonobo_PropertyBag_InvalidType ((CORBA_TypeCode)&TC_Bonobo_PropertyBag_InvalidType_struct)
</MACRO>
<MACRO>
<NAME>Bonobo_PropertyBag_InvalidType__alloc</NAME>
#define Bonobo_PropertyBag_InvalidType__alloc() ((Bonobo_PropertyBag_InvalidType *)ORBit_small_alloc (TC_Bonobo_PropertyBag_InvalidType))
</MACRO>
<MACRO>
<NAME>Bonobo_PropertyBag_InvalidType__freekids</NAME>
#define Bonobo_PropertyBag_InvalidType__freekids(m,d) ORBit_small_freekids (TC_Bonobo_PropertyBag_InvalidType,(m),(d))
</MACRO>
<MACRO>
<NAME>ex_Bonobo_PropertyBag_ReadOnly</NAME>
#define ex_Bonobo_PropertyBag_ReadOnly "IDL:Bonobo/PropertyBag/ReadOnly:1.0"
</MACRO>
<MACRO>
<NAME>TC_IMPL_TC_Bonobo_PropertyBag_ReadOnly_0</NAME>
#define TC_IMPL_TC_Bonobo_PropertyBag_ReadOnly_0 'B'
</MACRO>
<MACRO>
<NAME>TC_IMPL_TC_Bonobo_PropertyBag_ReadOnly_1</NAME>
#define TC_IMPL_TC_Bonobo_PropertyBag_ReadOnly_1 'o'
</MACRO>
<MACRO>
<NAME>TC_IMPL_TC_Bonobo_PropertyBag_ReadOnly_2</NAME>
#define TC_IMPL_TC_Bonobo_PropertyBag_ReadOnly_2 'n'
</MACRO>
<MACRO>
<NAME>TC_IMPL_TC_Bonobo_PropertyBag_ReadOnly_3</NAME>
#define TC_IMPL_TC_Bonobo_PropertyBag_ReadOnly_3 'o'
</MACRO>
<MACRO>
<NAME>TC_IMPL_TC_Bonobo_PropertyBag_ReadOnly_4</NAME>
#define TC_IMPL_TC_Bonobo_PropertyBag_ReadOnly_4 'b'
</MACRO>
<MACRO>
<NAME>TC_IMPL_TC_Bonobo_PropertyBag_ReadOnly_5</NAME>
#define TC_IMPL_TC_Bonobo_PropertyBag_ReadOnly_5 'o'
</MACRO>
<MACRO>
<NAME>TC_Bonobo_PropertyBag_ReadOnly</NAME>
#define TC_Bonobo_PropertyBag_ReadOnly ((CORBA_TypeCode)&TC_Bonobo_PropertyBag_ReadOnly_struct)
</MACRO>
<MACRO>
<NAME>Bonobo_PropertyBag_ReadOnly__alloc</NAME>
#define Bonobo_PropertyBag_ReadOnly__alloc() ((Bonobo_PropertyBag_ReadOnly *)ORBit_small_alloc (TC_Bonobo_PropertyBag_ReadOnly))
</MACRO>
<MACRO>
<NAME>Bonobo_PropertyBag_ReadOnly__freekids</NAME>
#define Bonobo_PropertyBag_ReadOnly__freekids(m,d) ORBit_small_freekids (TC_Bonobo_PropertyBag_ReadOnly,(m),(d))
</MACRO>
<MACRO>
<NAME>ex_Bonobo_PropertyBag_BackendFailed</NAME>
#define ex_Bonobo_PropertyBag_BackendFailed "IDL:Bonobo/PropertyBag/BackendFailed:1.0"
</MACRO>
<MACRO>
<NAME>TC_IMPL_TC_Bonobo_PropertyBag_BackendFailed_0</NAME>
#define TC_IMPL_TC_Bonobo_PropertyBag_BackendFailed_0 'B'
</MACRO>
<MACRO>
<NAME>TC_IMPL_TC_Bonobo_PropertyBag_BackendFailed_1</NAME>
#define TC_IMPL_TC_Bonobo_PropertyBag_BackendFailed_1 'o'
</MACRO>
<MACRO>
<NAME>TC_IMPL_TC_Bonobo_PropertyBag_BackendFailed_2</NAME>
#define TC_IMPL_TC_Bonobo_PropertyBag_BackendFailed_2 'n'
</MACRO>
<MACRO>
<NAME>TC_IMPL_TC_Bonobo_PropertyBag_BackendFailed_3</NAME>
#define TC_IMPL_TC_Bonobo_PropertyBag_BackendFailed_3 'o'
</MACRO>
<MACRO>
<NAME>TC_IMPL_TC_Bonobo_PropertyBag_BackendFailed_4</NAME>
#define TC_IMPL_TC_Bonobo_PropertyBag_BackendFailed_4 'b'
</MACRO>
<MACRO>
<NAME>TC_IMPL_TC_Bonobo_PropertyBag_BackendFailed_5</NAME>
#define TC_IMPL_TC_Bonobo_PropertyBag_BackendFailed_5 'o'
</MACRO>
<MACRO>
<NAME>TC_Bonobo_PropertyBag_BackendFailed</NAME>
#define TC_Bonobo_PropertyBag_BackendFailed ((CORBA_TypeCode)&TC_Bonobo_PropertyBag_BackendFailed_struct)
</MACRO>
<MACRO>
<NAME>Bonobo_PropertyBag_BackendFailed__alloc</NAME>
#define Bonobo_PropertyBag_BackendFailed__alloc() ((Bonobo_PropertyBag_BackendFailed *)ORBit_small_alloc (TC_Bonobo_PropertyBag_BackendFailed))
</MACRO>
<MACRO>
<NAME>Bonobo_PropertyBag_BackendFailed__freekids</NAME>
#define Bonobo_PropertyBag_BackendFailed__freekids(m,d) ORBit_small_freekids (TC_Bonobo_PropertyBag_BackendFailed,(m),(d))
</MACRO>
<MACRO>
<NAME>ORBIT_DECL_Bonobo_ConfigDatabase</NAME>
#define ORBIT_DECL_Bonobo_ConfigDatabase 1
</MACRO>
<MACRO>
<NAME>Bonobo_ConfigDatabase__freekids</NAME>
#define Bonobo_ConfigDatabase__freekids CORBA_Object__freekids
</MACRO>
<TYPEDEF>
<NAME>Bonobo_ConfigDatabase</NAME>
   typedef CORBA_Object Bonobo_ConfigDatabase;
</TYPEDEF>
<VARIABLE>
<NAME>Bonobo_ConfigDatabase__classid</NAME>
   extern CORBA_unsigned_long Bonobo_ConfigDatabase__classid;
</VARIABLE>
<MACRO>
<NAME>TC_IMPL_TC_Bonobo_ConfigDatabase_0</NAME>
#define TC_IMPL_TC_Bonobo_ConfigDatabase_0 'B'
</MACRO>
<MACRO>
<NAME>TC_IMPL_TC_Bonobo_ConfigDatabase_1</NAME>
#define TC_IMPL_TC_Bonobo_ConfigDatabase_1 'o'
</MACRO>
<MACRO>
<NAME>TC_IMPL_TC_Bonobo_ConfigDatabase_2</NAME>
#define TC_IMPL_TC_Bonobo_ConfigDatabase_2 'n'
</MACRO>
<MACRO>
<NAME>TC_IMPL_TC_Bonobo_ConfigDatabase_3</NAME>
#define TC_IMPL_TC_Bonobo_ConfigDatabase_3 'o'
</MACRO>
<MACRO>
<NAME>TC_IMPL_TC_Bonobo_ConfigDatabase_4</NAME>
#define TC_IMPL_TC_Bonobo_ConfigDatabase_4 'b'
</MACRO>
<MACRO>
<NAME>TC_IMPL_TC_Bonobo_ConfigDatabase_5</NAME>
#define TC_IMPL_TC_Bonobo_ConfigDatabase_5 'o'
</MACRO>
<MACRO>
<NAME>TC_Bonobo_ConfigDatabase</NAME>
#define TC_Bonobo_ConfigDatabase ((CORBA_TypeCode)&TC_Bonobo_ConfigDatabase_struct)
</MACRO>
<ENUM>
<NAME>Bonobo_ConfigDatabase_DBFlags</NAME>
   typedef enum
   {
      Bonobo_ConfigDatabase_DEFAULT,
      Bonobo_ConfigDatabase_WRITE,
      Bonobo_ConfigDatabase_MANDATORY
   }
   Bonobo_ConfigDatabase_DBFlags;
</ENUM>
<MACRO>
<NAME>TC_IMPL_TC_Bonobo_ConfigDatabase_DBFlags_0</NAME>
#define TC_IMPL_TC_Bonobo_ConfigDatabase_DBFlags_0 'B'
</MACRO>
<MACRO>
<NAME>TC_IMPL_TC_Bonobo_ConfigDatabase_DBFlags_1</NAME>
#define TC_IMPL_TC_Bonobo_ConfigDatabase_DBFlags_1 'o'
</MACRO>
<MACRO>
<NAME>TC_IMPL_TC_Bonobo_ConfigDatabase_DBFlags_2</NAME>
#define TC_IMPL_TC_Bonobo_ConfigDatabase_DBFlags_2 'n'
</MACRO>
<MACRO>
<NAME>TC_IMPL_TC_Bonobo_ConfigDatabase_DBFlags_3</NAME>
#define TC_IMPL_TC_Bonobo_ConfigDatabase_DBFlags_3 'o'
</MACRO>
<MACRO>
<NAME>TC_IMPL_TC_Bonobo_ConfigDatabase_DBFlags_4</NAME>
#define TC_IMPL_TC_Bonobo_ConfigDatabase_DBFlags_4 'b'
</MACRO>
<MACRO>
<NAME>TC_IMPL_TC_Bonobo_ConfigDatabase_DBFlags_5</NAME>
#define TC_IMPL_TC_Bonobo_ConfigDatabase_DBFlags_5 'o'
</MACRO>
<MACRO>
<NAME>TC_Bonobo_ConfigDatabase_DBFlags</NAME>
#define TC_Bonobo_ConfigDatabase_DBFlags ((CORBA_TypeCode)&TC_Bonobo_ConfigDatabase_DBFlags_struct)
</MACRO>
<MACRO>
<NAME>ORBIT_DECL_Bonobo_ControlFrame</NAME>
#define ORBIT_DECL_Bonobo_ControlFrame 1
</MACRO>
<MACRO>
<NAME>Bonobo_ControlFrame__freekids</NAME>
#define Bonobo_ControlFrame__freekids CORBA_Object__freekids
</MACRO>
<TYPEDEF>
<NAME>Bonobo_ControlFrame</NAME>
   typedef CORBA_Object Bonobo_ControlFrame;
</TYPEDEF>
<VARIABLE>
<NAME>Bonobo_ControlFrame__classid</NAME>
   extern CORBA_unsigned_long Bonobo_ControlFrame__classid;
</VARIABLE>
<MACRO>
<NAME>TC_IMPL_TC_Bonobo_ControlFrame_0</NAME>
#define TC_IMPL_TC_Bonobo_ControlFrame_0 'B'
</MACRO>
<MACRO>
<NAME>TC_IMPL_TC_Bonobo_ControlFrame_1</NAME>
#define TC_IMPL_TC_Bonobo_ControlFrame_1 'o'
</MACRO>
<MACRO>
<NAME>TC_IMPL_TC_Bonobo_ControlFrame_2</NAME>
#define TC_IMPL_TC_Bonobo_ControlFrame_2 'n'
</MACRO>
<MACRO>
<NAME>TC_IMPL_TC_Bonobo_ControlFrame_3</NAME>
#define TC_IMPL_TC_Bonobo_ControlFrame_3 'o'
</MACRO>
<MACRO>
<NAME>TC_IMPL_TC_Bonobo_ControlFrame_4</NAME>
#define TC_IMPL_TC_Bonobo_ControlFrame_4 'b'
</MACRO>
<MACRO>
<NAME>TC_IMPL_TC_Bonobo_ControlFrame_5</NAME>
#define TC_IMPL_TC_Bonobo_ControlFrame_5 'o'
</MACRO>
<MACRO>
<NAME>TC_Bonobo_ControlFrame</NAME>
#define TC_Bonobo_ControlFrame ((CORBA_TypeCode)&TC_Bonobo_ControlFrame_struct)
</MACRO>
<MACRO>
<NAME>ORBIT_DECL_Bonobo_Control</NAME>
#define ORBIT_DECL_Bonobo_Control 1
</MACRO>
<MACRO>
<NAME>Bonobo_Control__freekids</NAME>
#define Bonobo_Control__freekids CORBA_Object__freekids
</MACRO>
<TYPEDEF>
<NAME>Bonobo_Control</NAME>
   typedef CORBA_Object Bonobo_Control;
</TYPEDEF>
<VARIABLE>
<NAME>Bonobo_Control__classid</NAME>
   extern CORBA_unsigned_long Bonobo_Control__classid;
</VARIABLE>
<MACRO>
<NAME>TC_IMPL_TC_Bonobo_Control_0</NAME>
#define TC_IMPL_TC_Bonobo_Control_0 'B'
</MACRO>
<MACRO>
<NAME>TC_IMPL_TC_Bonobo_Control_1</NAME>
#define TC_IMPL_TC_Bonobo_Control_1 'o'
</MACRO>
<MACRO>
<NAME>TC_IMPL_TC_Bonobo_Control_2</NAME>
#define TC_IMPL_TC_Bonobo_Control_2 'n'
</MACRO>
<MACRO>
<NAME>TC_IMPL_TC_Bonobo_Control_3</NAME>
#define TC_IMPL_TC_Bonobo_Control_3 'o'
</MACRO>
<MACRO>
<NAME>TC_IMPL_TC_Bonobo_Control_4</NAME>
#define TC_IMPL_TC_Bonobo_Control_4 'b'
</MACRO>
<MACRO>
<NAME>TC_IMPL_TC_Bonobo_Control_5</NAME>
#define TC_IMPL_TC_Bonobo_Control_5 'o'
</MACRO>
<MACRO>
<NAME>TC_Bonobo_Control</NAME>
#define TC_Bonobo_Control ((CORBA_TypeCode)&TC_Bonobo_Control_struct)
</MACRO>
<MACRO>
<NAME>ex_Bonobo_Control_NoContents</NAME>
#define ex_Bonobo_Control_NoContents "IDL:Bonobo/Control/NoContents:1.0"
</MACRO>
<MACRO>
<NAME>TC_IMPL_TC_Bonobo_Control_NoContents_0</NAME>
#define TC_IMPL_TC_Bonobo_Control_NoContents_0 'B'
</MACRO>
<MACRO>
<NAME>TC_IMPL_TC_Bonobo_Control_NoContents_1</NAME>
#define TC_IMPL_TC_Bonobo_Control_NoContents_1 'o'
</MACRO>
<MACRO>
<NAME>TC_IMPL_TC_Bonobo_Control_NoContents_2</NAME>
#define TC_IMPL_TC_Bonobo_Control_NoContents_2 'n'
</MACRO>
<MACRO>
<NAME>TC_IMPL_TC_Bonobo_Control_NoContents_3</NAME>
#define TC_IMPL_TC_Bonobo_Control_NoContents_3 'o'
</MACRO>
<MACRO>
<NAME>TC_IMPL_TC_Bonobo_Control_NoContents_4</NAME>
#define TC_IMPL_TC_Bonobo_Control_NoContents_4 'b'
</MACRO>
<MACRO>
<NAME>TC_IMPL_TC_Bonobo_Control_NoContents_5</NAME>
#define TC_IMPL_TC_Bonobo_Control_NoContents_5 'o'
</MACRO>
<MACRO>
<NAME>TC_Bonobo_Control_NoContents</NAME>
#define TC_Bonobo_Control_NoContents ((CORBA_TypeCode)&TC_Bonobo_Control_NoContents_struct)
</MACRO>
<MACRO>
<NAME>Bonobo_Control_NoContents__alloc</NAME>
#define Bonobo_Control_NoContents__alloc() ((Bonobo_Control_NoContents *)ORBit_small_alloc (TC_Bonobo_Control_NoContents))
</MACRO>
<MACRO>
<NAME>Bonobo_Control_NoContents__freekids</NAME>
#define Bonobo_Control_NoContents__freekids(m,d) ORBit_small_freekids (TC_Bonobo_Control_NoContents,(m),(d))
</MACRO>
<MACRO>
<NAME>ORBIT_DECL_Bonobo_PropertyControl</NAME>
#define ORBIT_DECL_Bonobo_PropertyControl 1
</MACRO>
<MACRO>
<NAME>Bonobo_PropertyControl__freekids</NAME>
#define Bonobo_PropertyControl__freekids CORBA_Object__freekids
</MACRO>
<TYPEDEF>
<NAME>Bonobo_PropertyControl</NAME>
   typedef CORBA_Object Bonobo_PropertyControl;
</TYPEDEF>
<VARIABLE>
<NAME>Bonobo_PropertyControl__classid</NAME>
   extern CORBA_unsigned_long Bonobo_PropertyControl__classid;
</VARIABLE>
<MACRO>
<NAME>TC_IMPL_TC_Bonobo_PropertyControl_0</NAME>
#define TC_IMPL_TC_Bonobo_PropertyControl_0 'B'
</MACRO>
<MACRO>
<NAME>TC_IMPL_TC_Bonobo_PropertyControl_1</NAME>
#define TC_IMPL_TC_Bonobo_PropertyControl_1 'o'
</MACRO>
<MACRO>
<NAME>TC_IMPL_TC_Bonobo_PropertyControl_2</NAME>
#define TC_IMPL_TC_Bonobo_PropertyControl_2 'n'
</MACRO>
<MACRO>
<NAME>TC_IMPL_TC_Bonobo_PropertyControl_3</NAME>
#define TC_IMPL_TC_Bonobo_PropertyControl_3 'o'
</MACRO>
<MACRO>
<NAME>TC_IMPL_TC_Bonobo_PropertyControl_4</NAME>
#define TC_IMPL_TC_Bonobo_PropertyControl_4 'b'
</MACRO>
<MACRO>
<NAME>TC_IMPL_TC_Bonobo_PropertyControl_5</NAME>
#define TC_IMPL_TC_Bonobo_PropertyControl_5 'o'
</MACRO>
<MACRO>
<NAME>TC_Bonobo_PropertyControl</NAME>
#define TC_Bonobo_PropertyControl ((CORBA_TypeCode)&TC_Bonobo_PropertyControl_struct)
</MACRO>
<ENUM>
<NAME>Bonobo_PropertyControl_Action</NAME>
   typedef enum
   {
      Bonobo_PropertyControl_APPLY,
      Bonobo_PropertyControl_HELP
   }
   Bonobo_PropertyControl_Action;
</ENUM>
<MACRO>
<NAME>TC_IMPL_TC_Bonobo_PropertyControl_Action_0</NAME>
#define TC_IMPL_TC_Bonobo_PropertyControl_Action_0 'B'
</MACRO>
<MACRO>
<NAME>TC_IMPL_TC_Bonobo_PropertyControl_Action_1</NAME>
#define TC_IMPL_TC_Bonobo_PropertyControl_Action_1 'o'
</MACRO>
<MACRO>
<NAME>TC_IMPL_TC_Bonobo_PropertyControl_Action_2</NAME>
#define TC_IMPL_TC_Bonobo_PropertyControl_Action_2 'n'
</MACRO>
<MACRO>
<NAME>TC_IMPL_TC_Bonobo_PropertyControl_Action_3</NAME>
#define TC_IMPL_TC_Bonobo_PropertyControl_Action_3 'o'
</MACRO>
<MACRO>
<NAME>TC_IMPL_TC_Bonobo_PropertyControl_Action_4</NAME>
#define TC_IMPL_TC_Bonobo_PropertyControl_Action_4 'b'
</MACRO>
<MACRO>
<NAME>TC_IMPL_TC_Bonobo_PropertyControl_Action_5</NAME>
#define TC_IMPL_TC_Bonobo_PropertyControl_Action_5 'o'
</MACRO>
<MACRO>
<NAME>TC_Bonobo_PropertyControl_Action</NAME>
#define TC_Bonobo_PropertyControl_Action ((CORBA_TypeCode)&TC_Bonobo_PropertyControl_Action_struct)
</MACRO>
<MACRO>
<NAME>ex_Bonobo_PropertyControl_NoPage</NAME>
#define ex_Bonobo_PropertyControl_NoPage "IDL:Bonobo/PropertyControl/NoPage:1.0"
</MACRO>
<MACRO>
<NAME>TC_IMPL_TC_Bonobo_PropertyControl_NoPage_0</NAME>
#define TC_IMPL_TC_Bonobo_PropertyControl_NoPage_0 'B'
</MACRO>
<MACRO>
<NAME>TC_IMPL_TC_Bonobo_PropertyControl_NoPage_1</NAME>
#define TC_IMPL_TC_Bonobo_PropertyControl_NoPage_1 'o'
</MACRO>
<MACRO>
<NAME>TC_IMPL_TC_Bonobo_PropertyControl_NoPage_2</NAME>
#define TC_IMPL_TC_Bonobo_PropertyControl_NoPage_2 'n'
</MACRO>
<MACRO>
<NAME>TC_IMPL_TC_Bonobo_PropertyControl_NoPage_3</NAME>
#define TC_IMPL_TC_Bonobo_PropertyControl_NoPage_3 'o'
</MACRO>
<MACRO>
<NAME>TC_IMPL_TC_Bonobo_PropertyControl_NoPage_4</NAME>
#define TC_IMPL_TC_Bonobo_PropertyControl_NoPage_4 'b'
</MACRO>
<MACRO>
<NAME>TC_IMPL_TC_Bonobo_PropertyControl_NoPage_5</NAME>
#define TC_IMPL_TC_Bonobo_PropertyControl_NoPage_5 'o'
</MACRO>
<MACRO>
<NAME>TC_Bonobo_PropertyControl_NoPage</NAME>
#define TC_Bonobo_PropertyControl_NoPage ((CORBA_TypeCode)&TC_Bonobo_PropertyControl_NoPage_struct)
</MACRO>
<MACRO>
<NAME>Bonobo_PropertyControl_NoPage__alloc</NAME>
#define Bonobo_PropertyControl_NoPage__alloc() ((Bonobo_PropertyControl_NoPage *)ORBit_small_alloc (TC_Bonobo_PropertyControl_NoPage))
</MACRO>
<MACRO>
<NAME>Bonobo_PropertyControl_NoPage__freekids</NAME>
#define Bonobo_PropertyControl_NoPage__freekids(m,d) ORBit_small_freekids (TC_Bonobo_PropertyControl_NoPage,(m),(d))
</MACRO>
<TYPEDEF>
<NAME>Bonobo_ZoomLevel</NAME>
   typedef CORBA_float Bonobo_ZoomLevel;
</TYPEDEF>
<MACRO>
<NAME>Bonobo_ZoomLevel_marshal</NAME>
#define Bonobo_ZoomLevel_marshal(x,y,z) CORBA_float_marshal((x),(y),(z))
</MACRO>
<MACRO>
<NAME>Bonobo_ZoomLevel_demarshal</NAME>
#define Bonobo_ZoomLevel_demarshal(x,y,z,i) CORBA_float_demarshal((x),(y),(z),(i))
</MACRO>
<MACRO>
<NAME>TC_IMPL_TC_Bonobo_ZoomLevel_0</NAME>
#define TC_IMPL_TC_Bonobo_ZoomLevel_0 'B'
</MACRO>
<MACRO>
<NAME>TC_IMPL_TC_Bonobo_ZoomLevel_1</NAME>
#define TC_IMPL_TC_Bonobo_ZoomLevel_1 'o'
</MACRO>
<MACRO>
<NAME>TC_IMPL_TC_Bonobo_ZoomLevel_2</NAME>
#define TC_IMPL_TC_Bonobo_ZoomLevel_2 'n'
</MACRO>
<MACRO>
<NAME>TC_IMPL_TC_Bonobo_ZoomLevel_3</NAME>
#define TC_IMPL_TC_Bonobo_ZoomLevel_3 'o'
</MACRO>
<MACRO>
<NAME>TC_IMPL_TC_Bonobo_ZoomLevel_4</NAME>
#define TC_IMPL_TC_Bonobo_ZoomLevel_4 'b'
</MACRO>
<MACRO>
<NAME>TC_IMPL_TC_Bonobo_ZoomLevel_5</NAME>
#define TC_IMPL_TC_Bonobo_ZoomLevel_5 'o'
</MACRO>
<MACRO>
<NAME>TC_Bonobo_ZoomLevel</NAME>
#define TC_Bonobo_ZoomLevel ((CORBA_TypeCode)&TC_Bonobo_ZoomLevel_struct)
</MACRO>
<MACRO>
<NAME>Bonobo_ZoomLevel__alloc</NAME>
#define Bonobo_ZoomLevel__alloc() ((Bonobo_ZoomLevel *)ORBit_small_alloc (TC_CORBA_float))
</MACRO>
<MACRO>
<NAME>Bonobo_ZoomLevel__freekids</NAME>
#define Bonobo_ZoomLevel__freekids(m,d) ORBit_small_freekids (TC_CORBA_float,(m),(d))
</MACRO>
<TYPEDEF>
<NAME>Bonobo_ZoomLevelName</NAME>
   typedef CORBA_string Bonobo_ZoomLevelName;
</TYPEDEF>
<MACRO>
<NAME>Bonobo_ZoomLevelName_marshal</NAME>
#define Bonobo_ZoomLevelName_marshal(x,y,z) CORBA_string_marshal((x),(y),(z))
</MACRO>
<MACRO>
<NAME>Bonobo_ZoomLevelName_demarshal</NAME>
#define Bonobo_ZoomLevelName_demarshal(x,y,z,i) CORBA_string_demarshal((x),(y),(z),(i))
</MACRO>
<MACRO>
<NAME>TC_IMPL_TC_Bonobo_ZoomLevelName_0</NAME>
#define TC_IMPL_TC_Bonobo_ZoomLevelName_0 'B'
</MACRO>
<MACRO>
<NAME>TC_IMPL_TC_Bonobo_ZoomLevelName_1</NAME>
#define TC_IMPL_TC_Bonobo_ZoomLevelName_1 'o'
</MACRO>
<MACRO>
<NAME>TC_IMPL_TC_Bonobo_ZoomLevelName_2</NAME>
#define TC_IMPL_TC_Bonobo_ZoomLevelName_2 'n'
</MACRO>
<MACRO>
<NAME>TC_IMPL_TC_Bonobo_ZoomLevelName_3</NAME>
#define TC_IMPL_TC_Bonobo_ZoomLevelName_3 'o'
</MACRO>
<MACRO>
<NAME>TC_IMPL_TC_Bonobo_ZoomLevelName_4</NAME>
#define TC_IMPL_TC_Bonobo_ZoomLevelName_4 'b'
</MACRO>
<MACRO>
<NAME>TC_IMPL_TC_Bonobo_ZoomLevelName_5</NAME>
#define TC_IMPL_TC_Bonobo_ZoomLevelName_5 'o'
</MACRO>
<MACRO>
<NAME>TC_Bonobo_ZoomLevelName</NAME>
#define TC_Bonobo_ZoomLevelName ((CORBA_TypeCode)&TC_Bonobo_ZoomLevelName_struct)
</MACRO>
<MACRO>
<NAME>Bonobo_ZoomLevelName__alloc</NAME>
#define Bonobo_ZoomLevelName__alloc() ((Bonobo_ZoomLevelName *)ORBit_small_alloc (TC_CORBA_string))
</MACRO>
<MACRO>
<NAME>Bonobo_ZoomLevelName__freekids</NAME>
#define Bonobo_ZoomLevelName__freekids(m,d) ORBit_small_freekids (TC_CORBA_string,(m),(d))
</MACRO>
<MACRO>
<NAME>ORBIT_DECL_CORBA_sequence_CORBA_float</NAME>
#define ORBIT_DECL_CORBA_sequence_CORBA_float 1
</MACRO>
<MACRO>
<NAME>ORBIT_IMPL_CORBA_sequence_CORBA_float_0</NAME>
#define ORBIT_IMPL_CORBA_sequence_CORBA_float_0 'B'
</MACRO>
<MACRO>
<NAME>ORBIT_IMPL_CORBA_sequence_CORBA_float_1</NAME>
#define ORBIT_IMPL_CORBA_sequence_CORBA_float_1 'o'
</MACRO>
<MACRO>
<NAME>ORBIT_IMPL_CORBA_sequence_CORBA_float_2</NAME>
#define ORBIT_IMPL_CORBA_sequence_CORBA_float_2 'n'
</MACRO>
<MACRO>
<NAME>ORBIT_IMPL_CORBA_sequence_CORBA_float_3</NAME>
#define ORBIT_IMPL_CORBA_sequence_CORBA_float_3 'o'
</MACRO>
<MACRO>
<NAME>ORBIT_IMPL_CORBA_sequence_CORBA_float_4</NAME>
#define ORBIT_IMPL_CORBA_sequence_CORBA_float_4 'b'
</MACRO>
<MACRO>
<NAME>ORBIT_IMPL_CORBA_sequence_CORBA_float_5</NAME>
#define ORBIT_IMPL_CORBA_sequence_CORBA_float_5 'o'
</MACRO>
<MACRO>
<NAME>TC_IMPL_TC_CORBA_sequence_CORBA_float_0</NAME>
#define TC_IMPL_TC_CORBA_sequence_CORBA_float_0 'B'
</MACRO>
<MACRO>
<NAME>TC_IMPL_TC_CORBA_sequence_CORBA_float_1</NAME>
#define TC_IMPL_TC_CORBA_sequence_CORBA_float_1 'o'
</MACRO>
<MACRO>
<NAME>TC_IMPL_TC_CORBA_sequence_CORBA_float_2</NAME>
#define TC_IMPL_TC_CORBA_sequence_CORBA_float_2 'n'
</MACRO>
<MACRO>
<NAME>TC_IMPL_TC_CORBA_sequence_CORBA_float_3</NAME>
#define TC_IMPL_TC_CORBA_sequence_CORBA_float_3 'o'
</MACRO>
<MACRO>
<NAME>TC_IMPL_TC_CORBA_sequence_CORBA_float_4</NAME>
#define TC_IMPL_TC_CORBA_sequence_CORBA_float_4 'b'
</MACRO>
<MACRO>
<NAME>TC_IMPL_TC_CORBA_sequence_CORBA_float_5</NAME>
#define TC_IMPL_TC_CORBA_sequence_CORBA_float_5 'o'
</MACRO>
<MACRO>
<NAME>TC_CORBA_sequence_CORBA_float</NAME>
#define TC_CORBA_sequence_CORBA_float ((CORBA_TypeCode)&TC_CORBA_sequence_CORBA_float_struct)
</MACRO>
<MACRO>
<NAME>CORBA_sequence_CORBA_float__alloc</NAME>
#define CORBA_sequence_CORBA_float__alloc() ((CORBA_sequence_CORBA_float *)ORBit_small_alloc (TC_CORBA_sequence_CORBA_float))
</MACRO>
<MACRO>
<NAME>CORBA_sequence_CORBA_float__freekids</NAME>
#define CORBA_sequence_CORBA_float__freekids(m,d) ORBit_small_freekids (TC_CORBA_sequence_CORBA_float,(m),(d))
</MACRO>
<MACRO>
<NAME>CORBA_sequence_CORBA_float_allocbuf</NAME>
#define CORBA_sequence_CORBA_float_allocbuf(l) ORBit_small_allocbuf (TC_CORBA_sequence_CORBA_float, (l))
</MACRO>
<MACRO>
<NAME>CORBA_sequence_CORBA_float_allocbuf</NAME>
#define CORBA_sequence_CORBA_float_allocbuf(l) ORBit_small_allocbuf (TC_CORBA_sequence_CORBA_float, (l))
</MACRO>
<MACRO>
<NAME>ORBIT_DECL_CORBA_sequence_Bonobo_ZoomLevel</NAME>
#define ORBIT_DECL_CORBA_sequence_Bonobo_ZoomLevel 1
</MACRO>
<MACRO>
<NAME>ORBIT_IMPL_CORBA_sequence_Bonobo_ZoomLevel_0</NAME>
#define ORBIT_IMPL_CORBA_sequence_Bonobo_ZoomLevel_0 'B'
</MACRO>
<MACRO>
<NAME>ORBIT_IMPL_CORBA_sequence_Bonobo_ZoomLevel_1</NAME>
#define ORBIT_IMPL_CORBA_sequence_Bonobo_ZoomLevel_1 'o'
</MACRO>
<MACRO>
<NAME>ORBIT_IMPL_CORBA_sequence_Bonobo_ZoomLevel_2</NAME>
#define ORBIT_IMPL_CORBA_sequence_Bonobo_ZoomLevel_2 'n'
</MACRO>
<MACRO>
<NAME>ORBIT_IMPL_CORBA_sequence_Bonobo_ZoomLevel_3</NAME>
#define ORBIT_IMPL_CORBA_sequence_Bonobo_ZoomLevel_3 'o'
</MACRO>
<MACRO>
<NAME>ORBIT_IMPL_CORBA_sequence_Bonobo_ZoomLevel_4</NAME>
#define ORBIT_IMPL_CORBA_sequence_Bonobo_ZoomLevel_4 'b'
</MACRO>
<MACRO>
<NAME>ORBIT_IMPL_CORBA_sequence_Bonobo_ZoomLevel_5</NAME>
#define ORBIT_IMPL_CORBA_sequence_Bonobo_ZoomLevel_5 'o'
</MACRO>
<TYPEDEF>
<NAME>CORBA_sequence_Bonobo_ZoomLevel</NAME>
   typedef CORBA_sequence_CORBA_float CORBA_sequence_Bonobo_ZoomLevel;
</TYPEDEF>
<MACRO>
<NAME>TC_IMPL_TC_CORBA_sequence_Bonobo_ZoomLevel_0</NAME>
#define TC_IMPL_TC_CORBA_sequence_Bonobo_ZoomLevel_0 'B'
</MACRO>
<MACRO>
<NAME>TC_IMPL_TC_CORBA_sequence_Bonobo_ZoomLevel_1</NAME>
#define TC_IMPL_TC_CORBA_sequence_Bonobo_ZoomLevel_1 'o'
</MACRO>
<MACRO>
<NAME>TC_IMPL_TC_CORBA_sequence_Bonobo_ZoomLevel_2</NAME>
#define TC_IMPL_TC_CORBA_sequence_Bonobo_ZoomLevel_2 'n'
</MACRO>
<MACRO>
<NAME>TC_IMPL_TC_CORBA_sequence_Bonobo_ZoomLevel_3</NAME>
#define TC_IMPL_TC_CORBA_sequence_Bonobo_ZoomLevel_3 'o'
</MACRO>
<MACRO>
<NAME>TC_IMPL_TC_CORBA_sequence_Bonobo_ZoomLevel_4</NAME>
#define TC_IMPL_TC_CORBA_sequence_Bonobo_ZoomLevel_4 'b'
</MACRO>
<MACRO>
<NAME>TC_IMPL_TC_CORBA_sequence_Bonobo_ZoomLevel_5</NAME>
#define TC_IMPL_TC_CORBA_sequence_Bonobo_ZoomLevel_5 'o'
</MACRO>
<MACRO>
<NAME>TC_CORBA_sequence_Bonobo_ZoomLevel</NAME>
#define TC_CORBA_sequence_Bonobo_ZoomLevel ((CORBA_TypeCode)&TC_CORBA_sequence_Bonobo_ZoomLevel_struct)
</MACRO>
<MACRO>
<NAME>CORBA_sequence_Bonobo_ZoomLevel__alloc</NAME>
#define CORBA_sequence_Bonobo_ZoomLevel__alloc CORBA_sequence_CORBA_float__alloc
</MACRO>
<MACRO>
<NAME>CORBA_sequence_Bonobo_ZoomLevel__freekids</NAME>
#define CORBA_sequence_Bonobo_ZoomLevel__freekids CORBA_sequence_CORBA_float__freekids
</MACRO>
<MACRO>
<NAME>CORBA_sequence_Bonobo_ZoomLevel_allocbuf</NAME>
#define CORBA_sequence_Bonobo_ZoomLevel_allocbuf CORBA_sequence_CORBA_float_allocbuf
</MACRO>
<MACRO>
<NAME>CORBA_sequence_Bonobo_ZoomLevel_marshal</NAME>
#define CORBA_sequence_Bonobo_ZoomLevel_marshal(x,y,z) CORBA_sequence_CORBA_float_marshal((x),(y),(z))
</MACRO>
<MACRO>
<NAME>CORBA_sequence_Bonobo_ZoomLevel_demarshal</NAME>
#define CORBA_sequence_Bonobo_ZoomLevel_demarshal(x,y,z,i) CORBA_sequence_CORBA_float_demarshal((x),(y),(z),(i))
</MACRO>
<TYPEDEF>
<NAME>Bonobo_ZoomLevelList</NAME>
   typedef CORBA_sequence_Bonobo_ZoomLevel Bonobo_ZoomLevelList;
</TYPEDEF>
<MACRO>
<NAME>Bonobo_ZoomLevelList_marshal</NAME>
#define Bonobo_ZoomLevelList_marshal(x,y,z) CORBA_sequence_Bonobo_ZoomLevel_marshal((x),(y),(z))
</MACRO>
<MACRO>
<NAME>Bonobo_ZoomLevelList_demarshal</NAME>
#define Bonobo_ZoomLevelList_demarshal(x,y,z,i) CORBA_sequence_Bonobo_ZoomLevel_demarshal((x),(y),(z),(i))
</MACRO>
<MACRO>
<NAME>TC_IMPL_TC_Bonobo_ZoomLevelList_0</NAME>
#define TC_IMPL_TC_Bonobo_ZoomLevelList_0 'B'
</MACRO>
<MACRO>
<NAME>TC_IMPL_TC_Bonobo_ZoomLevelList_1</NAME>
#define TC_IMPL_TC_Bonobo_ZoomLevelList_1 'o'
</MACRO>
<MACRO>
<NAME>TC_IMPL_TC_Bonobo_ZoomLevelList_2</NAME>
#define TC_IMPL_TC_Bonobo_ZoomLevelList_2 'n'
</MACRO>
<MACRO>
<NAME>TC_IMPL_TC_Bonobo_ZoomLevelList_3</NAME>
#define TC_IMPL_TC_Bonobo_ZoomLevelList_3 'o'
</MACRO>
<MACRO>
<NAME>TC_IMPL_TC_Bonobo_ZoomLevelList_4</NAME>
#define TC_IMPL_TC_Bonobo_ZoomLevelList_4 'b'
</MACRO>
<MACRO>
<NAME>TC_IMPL_TC_Bonobo_ZoomLevelList_5</NAME>
#define TC_IMPL_TC_Bonobo_ZoomLevelList_5 'o'
</MACRO>
<MACRO>
<NAME>TC_Bonobo_ZoomLevelList</NAME>
#define TC_Bonobo_ZoomLevelList ((CORBA_TypeCode)&TC_Bonobo_ZoomLevelList_struct)
</MACRO>
<MACRO>
<NAME>Bonobo_ZoomLevelList__alloc</NAME>
#define Bonobo_ZoomLevelList__alloc() ((Bonobo_ZoomLevelList *)ORBit_small_alloc (TC_CORBA_sequence_Bonobo_ZoomLevel))
</MACRO>
<MACRO>
<NAME>Bonobo_ZoomLevelList__freekids</NAME>
#define Bonobo_ZoomLevelList__freekids(m,d) ORBit_small_freekids (TC_CORBA_sequence_Bonobo_ZoomLevel,(m),(d))
</MACRO>
<MACRO>
<NAME>Bonobo_ZoomLevelList_allocbuf</NAME>
#define Bonobo_ZoomLevelList_allocbuf(l) ORBit_small_allocbuf (TC_CORBA_sequence_Bonobo_ZoomLevel, (l))
</MACRO>
<MACRO>
<NAME>ORBIT_DECL_CORBA_sequence_CORBA_string</NAME>
#define ORBIT_DECL_CORBA_sequence_CORBA_string 1
</MACRO>
<MACRO>
<NAME>ORBIT_IMPL_CORBA_sequence_CORBA_string_0</NAME>
#define ORBIT_IMPL_CORBA_sequence_CORBA_string_0 'B'
</MACRO>
<MACRO>
<NAME>ORBIT_IMPL_CORBA_sequence_CORBA_string_1</NAME>
#define ORBIT_IMPL_CORBA_sequence_CORBA_string_1 'o'
</MACRO>
<MACRO>
<NAME>ORBIT_IMPL_CORBA_sequence_CORBA_string_2</NAME>
#define ORBIT_IMPL_CORBA_sequence_CORBA_string_2 'n'
</MACRO>
<MACRO>
<NAME>ORBIT_IMPL_CORBA_sequence_CORBA_string_3</NAME>
#define ORBIT_IMPL_CORBA_sequence_CORBA_string_3 'o'
</MACRO>
<MACRO>
<NAME>ORBIT_IMPL_CORBA_sequence_CORBA_string_4</NAME>
#define ORBIT_IMPL_CORBA_sequence_CORBA_string_4 'b'
</MACRO>
<MACRO>
<NAME>ORBIT_IMPL_CORBA_sequence_CORBA_string_5</NAME>
#define ORBIT_IMPL_CORBA_sequence_CORBA_string_5 'o'
</MACRO>
<MACRO>
<NAME>TC_IMPL_TC_CORBA_sequence_CORBA_string_0</NAME>
#define TC_IMPL_TC_CORBA_sequence_CORBA_string_0 'B'
</MACRO>
<MACRO>
<NAME>TC_IMPL_TC_CORBA_sequence_CORBA_string_1</NAME>
#define TC_IMPL_TC_CORBA_sequence_CORBA_string_1 'o'
</MACRO>
<MACRO>
<NAME>TC_IMPL_TC_CORBA_sequence_CORBA_string_2</NAME>
#define TC_IMPL_TC_CORBA_sequence_CORBA_string_2 'n'
</MACRO>
<MACRO>
<NAME>TC_IMPL_TC_CORBA_sequence_CORBA_string_3</NAME>
#define TC_IMPL_TC_CORBA_sequence_CORBA_string_3 'o'
</MACRO>
<MACRO>
<NAME>TC_IMPL_TC_CORBA_sequence_CORBA_string_4</NAME>
#define TC_IMPL_TC_CORBA_sequence_CORBA_string_4 'b'
</MACRO>
<MACRO>
<NAME>TC_IMPL_TC_CORBA_sequence_CORBA_string_5</NAME>
#define TC_IMPL_TC_CORBA_sequence_CORBA_string_5 'o'
</MACRO>
<MACRO>
<NAME>TC_CORBA_sequence_CORBA_string</NAME>
#define TC_CORBA_sequence_CORBA_string ((CORBA_TypeCode)&TC_CORBA_sequence_CORBA_string_struct)
</MACRO>
<MACRO>
<NAME>CORBA_sequence_CORBA_string__alloc</NAME>
#define CORBA_sequence_CORBA_string__alloc() ((CORBA_sequence_CORBA_string *)ORBit_small_alloc (TC_CORBA_sequence_CORBA_string))
</MACRO>
<MACRO>
<NAME>CORBA_sequence_CORBA_string__freekids</NAME>
#define CORBA_sequence_CORBA_string__freekids(m,d) ORBit_small_freekids (TC_CORBA_sequence_CORBA_string,(m),(d))
</MACRO>
<MACRO>
<NAME>CORBA_sequence_CORBA_string_allocbuf</NAME>
#define CORBA_sequence_CORBA_string_allocbuf(l) ORBit_small_allocbuf (TC_CORBA_sequence_CORBA_string, (l))
</MACRO>
<MACRO>
<NAME>CORBA_sequence_CORBA_string_allocbuf</NAME>
#define CORBA_sequence_CORBA_string_allocbuf(l) ORBit_small_allocbuf (TC_CORBA_sequence_CORBA_string, (l))
</MACRO>
<MACRO>
<NAME>ORBIT_DECL_CORBA_sequence_Bonobo_ZoomLevelName</NAME>
#define ORBIT_DECL_CORBA_sequence_Bonobo_ZoomLevelName 1
</MACRO>
<MACRO>
<NAME>ORBIT_IMPL_CORBA_sequence_Bonobo_ZoomLevelName_0</NAME>
#define ORBIT_IMPL_CORBA_sequence_Bonobo_ZoomLevelName_0 'B'
</MACRO>
<MACRO>
<NAME>ORBIT_IMPL_CORBA_sequence_Bonobo_ZoomLevelName_1</NAME>
#define ORBIT_IMPL_CORBA_sequence_Bonobo_ZoomLevelName_1 'o'
</MACRO>
<MACRO>
<NAME>ORBIT_IMPL_CORBA_sequence_Bonobo_ZoomLevelName_2</NAME>
#define ORBIT_IMPL_CORBA_sequence_Bonobo_ZoomLevelName_2 'n'
</MACRO>
<MACRO>
<NAME>ORBIT_IMPL_CORBA_sequence_Bonobo_ZoomLevelName_3</NAME>
#define ORBIT_IMPL_CORBA_sequence_Bonobo_ZoomLevelName_3 'o'
</MACRO>
<MACRO>
<NAME>ORBIT_IMPL_CORBA_sequence_Bonobo_ZoomLevelName_4</NAME>
#define ORBIT_IMPL_CORBA_sequence_Bonobo_ZoomLevelName_4 'b'
</MACRO>
<MACRO>
<NAME>ORBIT_IMPL_CORBA_sequence_Bonobo_ZoomLevelName_5</NAME>
#define ORBIT_IMPL_CORBA_sequence_Bonobo_ZoomLevelName_5 'o'
</MACRO>
<TYPEDEF>
<NAME>CORBA_sequence_Bonobo_ZoomLevelName</NAME>
   typedef CORBA_sequence_CORBA_string CORBA_sequence_Bonobo_ZoomLevelName;
</TYPEDEF>
<MACRO>
<NAME>TC_IMPL_TC_CORBA_sequence_Bonobo_ZoomLevelName_0</NAME>
#define TC_IMPL_TC_CORBA_sequence_Bonobo_ZoomLevelName_0 'B'
</MACRO>
<MACRO>
<NAME>TC_IMPL_TC_CORBA_sequence_Bonobo_ZoomLevelName_1</NAME>
#define TC_IMPL_TC_CORBA_sequence_Bonobo_ZoomLevelName_1 'o'
</MACRO>
<MACRO>
<NAME>TC_IMPL_TC_CORBA_sequence_Bonobo_ZoomLevelName_2</NAME>
#define TC_IMPL_TC_CORBA_sequence_Bonobo_ZoomLevelName_2 'n'
</MACRO>
<MACRO>
<NAME>TC_IMPL_TC_CORBA_sequence_Bonobo_ZoomLevelName_3</NAME>
#define TC_IMPL_TC_CORBA_sequence_Bonobo_ZoomLevelName_3 'o'
</MACRO>
<MACRO>
<NAME>TC_IMPL_TC_CORBA_sequence_Bonobo_ZoomLevelName_4</NAME>
#define TC_IMPL_TC_CORBA_sequence_Bonobo_ZoomLevelName_4 'b'
</MACRO>
<MACRO>
<NAME>TC_IMPL_TC_CORBA_sequence_Bonobo_ZoomLevelName_5</NAME>
#define TC_IMPL_TC_CORBA_sequence_Bonobo_ZoomLevelName_5 'o'
</MACRO>
<MACRO>
<NAME>TC_CORBA_sequence_Bonobo_ZoomLevelName</NAME>
#define TC_CORBA_sequence_Bonobo_ZoomLevelName ((CORBA_TypeCode)&TC_CORBA_sequence_Bonobo_ZoomLevelName_struct)
</MACRO>
<MACRO>
<NAME>CORBA_sequence_Bonobo_ZoomLevelName__alloc</NAME>
#define CORBA_sequence_Bonobo_ZoomLevelName__alloc CORBA_sequence_CORBA_string__alloc
</MACRO>
<MACRO>
<NAME>CORBA_sequence_Bonobo_ZoomLevelName__freekids</NAME>
#define CORBA_sequence_Bonobo_ZoomLevelName__freekids CORBA_sequence_CORBA_string__freekids
</MACRO>
<MACRO>
<NAME>CORBA_sequence_Bonobo_ZoomLevelName_allocbuf</NAME>
#define CORBA_sequence_Bonobo_ZoomLevelName_allocbuf CORBA_sequence_CORBA_string_allocbuf
</MACRO>
<MACRO>
<NAME>CORBA_sequence_Bonobo_ZoomLevelName_marshal</NAME>
#define CORBA_sequence_Bonobo_ZoomLevelName_marshal(x,y,z) CORBA_sequence_CORBA_string_marshal((x),(y),(z))
</MACRO>
<MACRO>
<NAME>CORBA_sequence_Bonobo_ZoomLevelName_demarshal</NAME>
#define CORBA_sequence_Bonobo_ZoomLevelName_demarshal(x,y,z,i) CORBA_sequence_CORBA_string_demarshal((x),(y),(z),(i))
</MACRO>
<TYPEDEF>
<NAME>Bonobo_ZoomLevelNameList</NAME>
   typedef CORBA_sequence_Bonobo_ZoomLevelName Bonobo_ZoomLevelNameList;
</TYPEDEF>
<MACRO>
<NAME>Bonobo_ZoomLevelNameList_marshal</NAME>
#define Bonobo_ZoomLevelNameList_marshal(x,y,z) CORBA_sequence_Bonobo_ZoomLevelName_marshal((x),(y),(z))
</MACRO>
<MACRO>
<NAME>Bonobo_ZoomLevelNameList_demarshal</NAME>
#define Bonobo_ZoomLevelNameList_demarshal(x,y,z,i) CORBA_sequence_Bonobo_ZoomLevelName_demarshal((x),(y),(z),(i))
</MACRO>
<MACRO>
<NAME>TC_IMPL_TC_Bonobo_ZoomLevelNameList_0</NAME>
#define TC_IMPL_TC_Bonobo_ZoomLevelNameList_0 'B'
</MACRO>
<MACRO>
<NAME>TC_IMPL_TC_Bonobo_ZoomLevelNameList_1</NAME>
#define TC_IMPL_TC_Bonobo_ZoomLevelNameList_1 'o'
</MACRO>
<MACRO>
<NAME>TC_IMPL_TC_Bonobo_ZoomLevelNameList_2</NAME>
#define TC_IMPL_TC_Bonobo_ZoomLevelNameList_2 'n'
</MACRO>
<MACRO>
<NAME>TC_IMPL_TC_Bonobo_ZoomLevelNameList_3</NAME>
#define TC_IMPL_TC_Bonobo_ZoomLevelNameList_3 'o'
</MACRO>
<MACRO>
<NAME>TC_IMPL_TC_Bonobo_ZoomLevelNameList_4</NAME>
#define TC_IMPL_TC_Bonobo_ZoomLevelNameList_4 'b'
</MACRO>
<MACRO>
<NAME>TC_IMPL_TC_Bonobo_ZoomLevelNameList_5</NAME>
#define TC_IMPL_TC_Bonobo_ZoomLevelNameList_5 'o'
</MACRO>
<MACRO>
<NAME>TC_Bonobo_ZoomLevelNameList</NAME>
#define TC_Bonobo_ZoomLevelNameList ((CORBA_TypeCode)&TC_Bonobo_ZoomLevelNameList_struct)
</MACRO>
<MACRO>
<NAME>Bonobo_ZoomLevelNameList__alloc</NAME>
#define Bonobo_ZoomLevelNameList__alloc() ((Bonobo_ZoomLevelNameList *)ORBit_small_alloc (TC_CORBA_sequence_Bonobo_ZoomLevelName))
</MACRO>
<MACRO>
<NAME>Bonobo_ZoomLevelNameList__freekids</NAME>
#define Bonobo_ZoomLevelNameList__freekids(m,d) ORBit_small_freekids (TC_CORBA_sequence_Bonobo_ZoomLevelName,(m),(d))
</MACRO>
<MACRO>
<NAME>Bonobo_ZoomLevelNameList_allocbuf</NAME>
#define Bonobo_ZoomLevelNameList_allocbuf(l) ORBit_small_allocbuf (TC_CORBA_sequence_Bonobo_ZoomLevelName, (l))
</MACRO>
<MACRO>
<NAME>ORBIT_DECL_Bonobo_ZoomableFrame</NAME>
#define ORBIT_DECL_Bonobo_ZoomableFrame 1
</MACRO>
<MACRO>
<NAME>Bonobo_ZoomableFrame__freekids</NAME>
#define Bonobo_ZoomableFrame__freekids CORBA_Object__freekids
</MACRO>
<TYPEDEF>
<NAME>Bonobo_ZoomableFrame</NAME>
   typedef CORBA_Object Bonobo_ZoomableFrame;
</TYPEDEF>
<VARIABLE>
<NAME>Bonobo_ZoomableFrame__classid</NAME>
   extern CORBA_unsigned_long Bonobo_ZoomableFrame__classid;
</VARIABLE>
<MACRO>
<NAME>TC_IMPL_TC_Bonobo_ZoomableFrame_0</NAME>
#define TC_IMPL_TC_Bonobo_ZoomableFrame_0 'B'
</MACRO>
<MACRO>
<NAME>TC_IMPL_TC_Bonobo_ZoomableFrame_1</NAME>
#define TC_IMPL_TC_Bonobo_ZoomableFrame_1 'o'
</MACRO>
<MACRO>
<NAME>TC_IMPL_TC_Bonobo_ZoomableFrame_2</NAME>
#define TC_IMPL_TC_Bonobo_ZoomableFrame_2 'n'
</MACRO>
<MACRO>
<NAME>TC_IMPL_TC_Bonobo_ZoomableFrame_3</NAME>
#define TC_IMPL_TC_Bonobo_ZoomableFrame_3 'o'
</MACRO>
<MACRO>
<NAME>TC_IMPL_TC_Bonobo_ZoomableFrame_4</NAME>
#define TC_IMPL_TC_Bonobo_ZoomableFrame_4 'b'
</MACRO>
<MACRO>
<NAME>TC_IMPL_TC_Bonobo_ZoomableFrame_5</NAME>
#define TC_IMPL_TC_Bonobo_ZoomableFrame_5 'o'
</MACRO>
<MACRO>
<NAME>TC_Bonobo_ZoomableFrame</NAME>
#define TC_Bonobo_ZoomableFrame ((CORBA_TypeCode)&TC_Bonobo_ZoomableFrame_struct)
</MACRO>
<MACRO>
<NAME>ORBIT_DECL_Bonobo_Zoomable</NAME>
#define ORBIT_DECL_Bonobo_Zoomable 1
</MACRO>
<MACRO>
<NAME>Bonobo_Zoomable__freekids</NAME>
#define Bonobo_Zoomable__freekids CORBA_Object__freekids
</MACRO>
<TYPEDEF>
<NAME>Bonobo_Zoomable</NAME>
   typedef CORBA_Object Bonobo_Zoomable;
</TYPEDEF>
<VARIABLE>
<NAME>Bonobo_Zoomable__classid</NAME>
   extern CORBA_unsigned_long Bonobo_Zoomable__classid;
</VARIABLE>
<MACRO>
<NAME>TC_IMPL_TC_Bonobo_Zoomable_0</NAME>
#define TC_IMPL_TC_Bonobo_Zoomable_0 'B'
</MACRO>
<MACRO>
<NAME>TC_IMPL_TC_Bonobo_Zoomable_1</NAME>
#define TC_IMPL_TC_Bonobo_Zoomable_1 'o'
</MACRO>
<MACRO>
<NAME>TC_IMPL_TC_Bonobo_Zoomable_2</NAME>
#define TC_IMPL_TC_Bonobo_Zoomable_2 'n'
</MACRO>
<MACRO>
<NAME>TC_IMPL_TC_Bonobo_Zoomable_3</NAME>
#define TC_IMPL_TC_Bonobo_Zoomable_3 'o'
</MACRO>
<MACRO>
<NAME>TC_IMPL_TC_Bonobo_Zoomable_4</NAME>
#define TC_IMPL_TC_Bonobo_Zoomable_4 'b'
</MACRO>
<MACRO>
<NAME>TC_IMPL_TC_Bonobo_Zoomable_5</NAME>
#define TC_IMPL_TC_Bonobo_Zoomable_5 'o'
</MACRO>
<MACRO>
<NAME>TC_Bonobo_Zoomable</NAME>
#define TC_Bonobo_Zoomable ((CORBA_TypeCode)&TC_Bonobo_Zoomable_struct)
</MACRO>
<MACRO>
<NAME>ORBIT_DECL_Bonobo_ItemContainer</NAME>
#define ORBIT_DECL_Bonobo_ItemContainer 1
</MACRO>
<MACRO>
<NAME>Bonobo_ItemContainer__freekids</NAME>
#define Bonobo_ItemContainer__freekids CORBA_Object__freekids
</MACRO>
<TYPEDEF>
<NAME>Bonobo_ItemContainer</NAME>
   typedef CORBA_Object Bonobo_ItemContainer;
</TYPEDEF>
<VARIABLE>
<NAME>Bonobo_ItemContainer__classid</NAME>
   extern CORBA_unsigned_long Bonobo_ItemContainer__classid;
</VARIABLE>
<MACRO>
<NAME>TC_IMPL_TC_Bonobo_ItemContainer_0</NAME>
#define TC_IMPL_TC_Bonobo_ItemContainer_0 'B'
</MACRO>
<MACRO>
<NAME>TC_IMPL_TC_Bonobo_ItemContainer_1</NAME>
#define TC_IMPL_TC_Bonobo_ItemContainer_1 'o'
</MACRO>
<MACRO>
<NAME>TC_IMPL_TC_Bonobo_ItemContainer_2</NAME>
#define TC_IMPL_TC_Bonobo_ItemContainer_2 'n'
</MACRO>
<MACRO>
<NAME>TC_IMPL_TC_Bonobo_ItemContainer_3</NAME>
#define TC_IMPL_TC_Bonobo_ItemContainer_3 'o'
</MACRO>
<MACRO>
<NAME>TC_IMPL_TC_Bonobo_ItemContainer_4</NAME>
#define TC_IMPL_TC_Bonobo_ItemContainer_4 'b'
</MACRO>
<MACRO>
<NAME>TC_IMPL_TC_Bonobo_ItemContainer_5</NAME>
#define TC_IMPL_TC_Bonobo_ItemContainer_5 'o'
</MACRO>
<MACRO>
<NAME>TC_Bonobo_ItemContainer</NAME>
#define TC_Bonobo_ItemContainer ((CORBA_TypeCode)&TC_Bonobo_ItemContainer_struct)
</MACRO>
<MACRO>
<NAME>ORBIT_DECL_CORBA_sequence_CORBA_string</NAME>
#define ORBIT_DECL_CORBA_sequence_CORBA_string 1
</MACRO>
<MACRO>
<NAME>ORBIT_IMPL_CORBA_sequence_CORBA_string_0</NAME>
#define ORBIT_IMPL_CORBA_sequence_CORBA_string_0 'B'
</MACRO>
<MACRO>
<NAME>ORBIT_IMPL_CORBA_sequence_CORBA_string_1</NAME>
#define ORBIT_IMPL_CORBA_sequence_CORBA_string_1 'o'
</MACRO>
<MACRO>
<NAME>ORBIT_IMPL_CORBA_sequence_CORBA_string_2</NAME>
#define ORBIT_IMPL_CORBA_sequence_CORBA_string_2 'n'
</MACRO>
<MACRO>
<NAME>ORBIT_IMPL_CORBA_sequence_CORBA_string_3</NAME>
#define ORBIT_IMPL_CORBA_sequence_CORBA_string_3 'o'
</MACRO>
<MACRO>
<NAME>ORBIT_IMPL_CORBA_sequence_CORBA_string_4</NAME>
#define ORBIT_IMPL_CORBA_sequence_CORBA_string_4 'b'
</MACRO>
<MACRO>
<NAME>ORBIT_IMPL_CORBA_sequence_CORBA_string_5</NAME>
#define ORBIT_IMPL_CORBA_sequence_CORBA_string_5 'o'
</MACRO>
<MACRO>
<NAME>TC_IMPL_TC_CORBA_sequence_CORBA_string_0</NAME>
#define TC_IMPL_TC_CORBA_sequence_CORBA_string_0 'B'
</MACRO>
<MACRO>
<NAME>TC_IMPL_TC_CORBA_sequence_CORBA_string_1</NAME>
#define TC_IMPL_TC_CORBA_sequence_CORBA_string_1 'o'
</MACRO>
<MACRO>
<NAME>TC_IMPL_TC_CORBA_sequence_CORBA_string_2</NAME>
#define TC_IMPL_TC_CORBA_sequence_CORBA_string_2 'n'
</MACRO>
<MACRO>
<NAME>TC_IMPL_TC_CORBA_sequence_CORBA_string_3</NAME>
#define TC_IMPL_TC_CORBA_sequence_CORBA_string_3 'o'
</MACRO>
<MACRO>
<NAME>TC_IMPL_TC_CORBA_sequence_CORBA_string_4</NAME>
#define TC_IMPL_TC_CORBA_sequence_CORBA_string_4 'b'
</MACRO>
<MACRO>
<NAME>TC_IMPL_TC_CORBA_sequence_CORBA_string_5</NAME>
#define TC_IMPL_TC_CORBA_sequence_CORBA_string_5 'o'
</MACRO>
<MACRO>
<NAME>TC_CORBA_sequence_CORBA_string</NAME>
#define TC_CORBA_sequence_CORBA_string ((CORBA_TypeCode)&TC_CORBA_sequence_CORBA_string_struct)
</MACRO>
<MACRO>
<NAME>CORBA_sequence_CORBA_string__alloc</NAME>
#define CORBA_sequence_CORBA_string__alloc() ((CORBA_sequence_CORBA_string *)ORBit_small_alloc (TC_CORBA_sequence_CORBA_string))
</MACRO>
<MACRO>
<NAME>CORBA_sequence_CORBA_string__freekids</NAME>
#define CORBA_sequence_CORBA_string__freekids(m,d) ORBit_small_freekids (TC_CORBA_sequence_CORBA_string,(m),(d))
</MACRO>
<MACRO>
<NAME>CORBA_sequence_CORBA_string_allocbuf</NAME>
#define CORBA_sequence_CORBA_string_allocbuf(l) ORBit_small_allocbuf (TC_CORBA_sequence_CORBA_string, (l))
</MACRO>
<MACRO>
<NAME>CORBA_sequence_CORBA_string_allocbuf</NAME>
#define CORBA_sequence_CORBA_string_allocbuf(l) ORBit_small_allocbuf (TC_CORBA_sequence_CORBA_string, (l))
</MACRO>
<TYPEDEF>
<NAME>Bonobo_ItemContainer_ObjectNames</NAME>
   typedef CORBA_sequence_CORBA_string Bonobo_ItemContainer_ObjectNames;
</TYPEDEF>
<MACRO>
<NAME>Bonobo_ItemContainer_ObjectNames_marshal</NAME>
#define Bonobo_ItemContainer_ObjectNames_marshal(x,y,z) CORBA_sequence_CORBA_string_marshal((x),(y),(z))
</MACRO>
<MACRO>
<NAME>Bonobo_ItemContainer_ObjectNames_demarshal</NAME>
#define Bonobo_ItemContainer_ObjectNames_demarshal(x,y,z,i) CORBA_sequence_CORBA_string_demarshal((x),(y),(z),(i))
</MACRO>
<MACRO>
<NAME>TC_IMPL_TC_Bonobo_ItemContainer_ObjectNames_0</NAME>
#define TC_IMPL_TC_Bonobo_ItemContainer_ObjectNames_0 'B'
</MACRO>
<MACRO>
<NAME>TC_IMPL_TC_Bonobo_ItemContainer_ObjectNames_1</NAME>
#define TC_IMPL_TC_Bonobo_ItemContainer_ObjectNames_1 'o'
</MACRO>
<MACRO>
<NAME>TC_IMPL_TC_Bonobo_ItemContainer_ObjectNames_2</NAME>
#define TC_IMPL_TC_Bonobo_ItemContainer_ObjectNames_2 'n'
</MACRO>
<MACRO>
<NAME>TC_IMPL_TC_Bonobo_ItemContainer_ObjectNames_3</NAME>
#define TC_IMPL_TC_Bonobo_ItemContainer_ObjectNames_3 'o'
</MACRO>
<MACRO>
<NAME>TC_IMPL_TC_Bonobo_ItemContainer_ObjectNames_4</NAME>
#define TC_IMPL_TC_Bonobo_ItemContainer_ObjectNames_4 'b'
</MACRO>
<MACRO>
<NAME>TC_IMPL_TC_Bonobo_ItemContainer_ObjectNames_5</NAME>
#define TC_IMPL_TC_Bonobo_ItemContainer_ObjectNames_5 'o'
</MACRO>
<MACRO>
<NAME>TC_Bonobo_ItemContainer_ObjectNames</NAME>
#define TC_Bonobo_ItemContainer_ObjectNames ((CORBA_TypeCode)&TC_Bonobo_ItemContainer_ObjectNames_struct)
</MACRO>
<MACRO>
<NAME>Bonobo_ItemContainer_ObjectNames__alloc</NAME>
#define Bonobo_ItemContainer_ObjectNames__alloc() ((Bonobo_ItemContainer_ObjectNames *)ORBit_small_alloc (TC_CORBA_sequence_CORBA_string))
</MACRO>
<MACRO>
<NAME>Bonobo_ItemContainer_ObjectNames__freekids</NAME>
#define Bonobo_ItemContainer_ObjectNames__freekids(m,d) ORBit_small_freekids (TC_CORBA_sequence_CORBA_string,(m),(d))
</MACRO>
<MACRO>
<NAME>Bonobo_ItemContainer_ObjectNames_allocbuf</NAME>
#define Bonobo_ItemContainer_ObjectNames_allocbuf(l) ORBit_small_allocbuf (TC_CORBA_sequence_CORBA_string, (l))
</MACRO>
<MACRO>
<NAME>ex_Bonobo_ItemContainer_NotFound</NAME>
#define ex_Bonobo_ItemContainer_NotFound "IDL:Bonobo/ItemContainer/NotFound:1.0"
</MACRO>
<MACRO>
<NAME>TC_IMPL_TC_Bonobo_ItemContainer_NotFound_0</NAME>
#define TC_IMPL_TC_Bonobo_ItemContainer_NotFound_0 'B'
</MACRO>
<MACRO>
<NAME>TC_IMPL_TC_Bonobo_ItemContainer_NotFound_1</NAME>
#define TC_IMPL_TC_Bonobo_ItemContainer_NotFound_1 'o'
</MACRO>
<MACRO>
<NAME>TC_IMPL_TC_Bonobo_ItemContainer_NotFound_2</NAME>
#define TC_IMPL_TC_Bonobo_ItemContainer_NotFound_2 'n'
</MACRO>
<MACRO>
<NAME>TC_IMPL_TC_Bonobo_ItemContainer_NotFound_3</NAME>
#define TC_IMPL_TC_Bonobo_ItemContainer_NotFound_3 'o'
</MACRO>
<MACRO>
<NAME>TC_IMPL_TC_Bonobo_ItemContainer_NotFound_4</NAME>
#define TC_IMPL_TC_Bonobo_ItemContainer_NotFound_4 'b'
</MACRO>
<MACRO>
<NAME>TC_IMPL_TC_Bonobo_ItemContainer_NotFound_5</NAME>
#define TC_IMPL_TC_Bonobo_ItemContainer_NotFound_5 'o'
</MACRO>
<MACRO>
<NAME>TC_Bonobo_ItemContainer_NotFound</NAME>
#define TC_Bonobo_ItemContainer_NotFound ((CORBA_TypeCode)&TC_Bonobo_ItemContainer_NotFound_struct)
</MACRO>
<MACRO>
<NAME>Bonobo_ItemContainer_NotFound__alloc</NAME>
#define Bonobo_ItemContainer_NotFound__alloc() ((Bonobo_ItemContainer_NotFound *)ORBit_small_alloc (TC_Bonobo_ItemContainer_NotFound))
</MACRO>
<MACRO>
<NAME>Bonobo_ItemContainer_NotFound__freekids</NAME>
#define Bonobo_ItemContainer_NotFound__freekids(m,d) ORBit_small_freekids (TC_Bonobo_ItemContainer_NotFound,(m),(d))
</MACRO>
<MACRO>
<NAME>ex_Bonobo_ItemContainer_SyntaxError</NAME>
#define ex_Bonobo_ItemContainer_SyntaxError "IDL:Bonobo/ItemContainer/SyntaxError:1.0"
</MACRO>
<MACRO>
<NAME>TC_IMPL_TC_Bonobo_ItemContainer_SyntaxError_0</NAME>
#define TC_IMPL_TC_Bonobo_ItemContainer_SyntaxError_0 'B'
</MACRO>
<MACRO>
<NAME>TC_IMPL_TC_Bonobo_ItemContainer_SyntaxError_1</NAME>
#define TC_IMPL_TC_Bonobo_ItemContainer_SyntaxError_1 'o'
</MACRO>
<MACRO>
<NAME>TC_IMPL_TC_Bonobo_ItemContainer_SyntaxError_2</NAME>
#define TC_IMPL_TC_Bonobo_ItemContainer_SyntaxError_2 'n'
</MACRO>
<MACRO>
<NAME>TC_IMPL_TC_Bonobo_ItemContainer_SyntaxError_3</NAME>
#define TC_IMPL_TC_Bonobo_ItemContainer_SyntaxError_3 'o'
</MACRO>
<MACRO>
<NAME>TC_IMPL_TC_Bonobo_ItemContainer_SyntaxError_4</NAME>
#define TC_IMPL_TC_Bonobo_ItemContainer_SyntaxError_4 'b'
</MACRO>
<MACRO>
<NAME>TC_IMPL_TC_Bonobo_ItemContainer_SyntaxError_5</NAME>
#define TC_IMPL_TC_Bonobo_ItemContainer_SyntaxError_5 'o'
</MACRO>
<MACRO>
<NAME>TC_Bonobo_ItemContainer_SyntaxError</NAME>
#define TC_Bonobo_ItemContainer_SyntaxError ((CORBA_TypeCode)&TC_Bonobo_ItemContainer_SyntaxError_struct)
</MACRO>
<MACRO>
<NAME>Bonobo_ItemContainer_SyntaxError__alloc</NAME>
#define Bonobo_ItemContainer_SyntaxError__alloc() ((Bonobo_ItemContainer_SyntaxError *)ORBit_small_alloc (TC_Bonobo_ItemContainer_SyntaxError))
</MACRO>
<MACRO>
<NAME>Bonobo_ItemContainer_SyntaxError__freekids</NAME>
#define Bonobo_ItemContainer_SyntaxError__freekids(m,d) ORBit_small_freekids (TC_Bonobo_ItemContainer_SyntaxError,(m),(d))
</MACRO>
<MACRO>
<NAME>ORBIT_DECL_CORBA_sequence_CORBA_octet</NAME>
#define ORBIT_DECL_CORBA_sequence_CORBA_octet 1
</MACRO>
<MACRO>
<NAME>ORBIT_IMPL_CORBA_sequence_CORBA_octet_0</NAME>
#define ORBIT_IMPL_CORBA_sequence_CORBA_octet_0 'B'
</MACRO>
<MACRO>
<NAME>ORBIT_IMPL_CORBA_sequence_CORBA_octet_1</NAME>
#define ORBIT_IMPL_CORBA_sequence_CORBA_octet_1 'o'
</MACRO>
<MACRO>
<NAME>ORBIT_IMPL_CORBA_sequence_CORBA_octet_2</NAME>
#define ORBIT_IMPL_CORBA_sequence_CORBA_octet_2 'n'
</MACRO>
<MACRO>
<NAME>ORBIT_IMPL_CORBA_sequence_CORBA_octet_3</NAME>
#define ORBIT_IMPL_CORBA_sequence_CORBA_octet_3 'o'
</MACRO>
<MACRO>
<NAME>ORBIT_IMPL_CORBA_sequence_CORBA_octet_4</NAME>
#define ORBIT_IMPL_CORBA_sequence_CORBA_octet_4 'b'
</MACRO>
<MACRO>
<NAME>ORBIT_IMPL_CORBA_sequence_CORBA_octet_5</NAME>
#define ORBIT_IMPL_CORBA_sequence_CORBA_octet_5 'o'
</MACRO>
<MACRO>
<NAME>TC_IMPL_TC_CORBA_sequence_CORBA_octet_0</NAME>
#define TC_IMPL_TC_CORBA_sequence_CORBA_octet_0 'B'
</MACRO>
<MACRO>
<NAME>TC_IMPL_TC_CORBA_sequence_CORBA_octet_1</NAME>
#define TC_IMPL_TC_CORBA_sequence_CORBA_octet_1 'o'
</MACRO>
<MACRO>
<NAME>TC_IMPL_TC_CORBA_sequence_CORBA_octet_2</NAME>
#define TC_IMPL_TC_CORBA_sequence_CORBA_octet_2 'n'
</MACRO>
<MACRO>
<NAME>TC_IMPL_TC_CORBA_sequence_CORBA_octet_3</NAME>
#define TC_IMPL_TC_CORBA_sequence_CORBA_octet_3 'o'
</MACRO>
<MACRO>
<NAME>TC_IMPL_TC_CORBA_sequence_CORBA_octet_4</NAME>
#define TC_IMPL_TC_CORBA_sequence_CORBA_octet_4 'b'
</MACRO>
<MACRO>
<NAME>TC_IMPL_TC_CORBA_sequence_CORBA_octet_5</NAME>
#define TC_IMPL_TC_CORBA_sequence_CORBA_octet_5 'o'
</MACRO>
<MACRO>
<NAME>TC_CORBA_sequence_CORBA_octet</NAME>
#define TC_CORBA_sequence_CORBA_octet ((CORBA_TypeCode)&TC_CORBA_sequence_CORBA_octet_struct)
</MACRO>
<MACRO>
<NAME>CORBA_sequence_CORBA_octet__alloc</NAME>
#define CORBA_sequence_CORBA_octet__alloc() ((CORBA_sequence_CORBA_octet *)ORBit_small_alloc (TC_CORBA_sequence_CORBA_octet))
</MACRO>
<MACRO>
<NAME>CORBA_sequence_CORBA_octet__freekids</NAME>
#define CORBA_sequence_CORBA_octet__freekids(m,d) ORBit_small_freekids (TC_CORBA_sequence_CORBA_octet,(m),(d))
</MACRO>
<MACRO>
<NAME>CORBA_sequence_CORBA_octet_allocbuf</NAME>
#define CORBA_sequence_CORBA_octet_allocbuf(l) ORBit_small_allocbuf (TC_CORBA_sequence_CORBA_octet, (l))
</MACRO>
<MACRO>
<NAME>CORBA_sequence_CORBA_octet_allocbuf</NAME>
#define CORBA_sequence_CORBA_octet_allocbuf(l) ORBit_small_allocbuf (TC_CORBA_sequence_CORBA_octet, (l))
</MACRO>
<TYPEDEF>
<NAME>Bonobo_Canvas_pixbuf</NAME>
   typedef CORBA_sequence_CORBA_octet Bonobo_Canvas_pixbuf;
</TYPEDEF>
<MACRO>
<NAME>Bonobo_Canvas_pixbuf_marshal</NAME>
#define Bonobo_Canvas_pixbuf_marshal(x,y,z) CORBA_sequence_CORBA_octet_marshal((x),(y),(z))
</MACRO>
<MACRO>
<NAME>Bonobo_Canvas_pixbuf_demarshal</NAME>
#define Bonobo_Canvas_pixbuf_demarshal(x,y,z,i) CORBA_sequence_CORBA_octet_demarshal((x),(y),(z),(i))
</MACRO>
<MACRO>
<NAME>TC_IMPL_TC_Bonobo_Canvas_pixbuf_0</NAME>
#define TC_IMPL_TC_Bonobo_Canvas_pixbuf_0 'B'
</MACRO>
<MACRO>
<NAME>TC_IMPL_TC_Bonobo_Canvas_pixbuf_1</NAME>
#define TC_IMPL_TC_Bonobo_Canvas_pixbuf_1 'o'
</MACRO>
<MACRO>
<NAME>TC_IMPL_TC_Bonobo_Canvas_pixbuf_2</NAME>
#define TC_IMPL_TC_Bonobo_Canvas_pixbuf_2 'n'
</MACRO>
<MACRO>
<NAME>TC_IMPL_TC_Bonobo_Canvas_pixbuf_3</NAME>
#define TC_IMPL_TC_Bonobo_Canvas_pixbuf_3 'o'
</MACRO>
<MACRO>
<NAME>TC_IMPL_TC_Bonobo_Canvas_pixbuf_4</NAME>
#define TC_IMPL_TC_Bonobo_Canvas_pixbuf_4 'b'
</MACRO>
<MACRO>
<NAME>TC_IMPL_TC_Bonobo_Canvas_pixbuf_5</NAME>
#define TC_IMPL_TC_Bonobo_Canvas_pixbuf_5 'o'
</MACRO>
<MACRO>
<NAME>TC_Bonobo_Canvas_pixbuf</NAME>
#define TC_Bonobo_Canvas_pixbuf ((CORBA_TypeCode)&TC_Bonobo_Canvas_pixbuf_struct)
</MACRO>
<MACRO>
<NAME>Bonobo_Canvas_pixbuf__alloc</NAME>
#define Bonobo_Canvas_pixbuf__alloc() ((Bonobo_Canvas_pixbuf *)ORBit_small_alloc (TC_CORBA_sequence_CORBA_octet))
</MACRO>
<MACRO>
<NAME>Bonobo_Canvas_pixbuf__freekids</NAME>
#define Bonobo_Canvas_pixbuf__freekids(m,d) ORBit_small_freekids (TC_CORBA_sequence_CORBA_octet,(m),(d))
</MACRO>
<MACRO>
<NAME>Bonobo_Canvas_pixbuf_allocbuf</NAME>
#define Bonobo_Canvas_pixbuf_allocbuf(l) ORBit_small_allocbuf (TC_CORBA_sequence_CORBA_octet, (l))
</MACRO>
<TYPEDEF>
<NAME>Bonobo_Canvas_window_id</NAME>
   typedef CORBA_unsigned_long Bonobo_Canvas_window_id;
</TYPEDEF>
<MACRO>
<NAME>Bonobo_Canvas_window_id_marshal</NAME>
#define Bonobo_Canvas_window_id_marshal(x,y,z) CORBA_unsigned_long_marshal((x),(y),(z))
</MACRO>
<MACRO>
<NAME>Bonobo_Canvas_window_id_demarshal</NAME>
#define Bonobo_Canvas_window_id_demarshal(x,y,z,i) CORBA_unsigned_long_demarshal((x),(y),(z),(i))
</MACRO>
<MACRO>
<NAME>TC_IMPL_TC_Bonobo_Canvas_window_id_0</NAME>
#define TC_IMPL_TC_Bonobo_Canvas_window_id_0 'B'
</MACRO>
<MACRO>
<NAME>TC_IMPL_TC_Bonobo_Canvas_window_id_1</NAME>
#define TC_IMPL_TC_Bonobo_Canvas_window_id_1 'o'
</MACRO>
<MACRO>
<NAME>TC_IMPL_TC_Bonobo_Canvas_window_id_2</NAME>
#define TC_IMPL_TC_Bonobo_Canvas_window_id_2 'n'
</MACRO>
<MACRO>
<NAME>TC_IMPL_TC_Bonobo_Canvas_window_id_3</NAME>
#define TC_IMPL_TC_Bonobo_Canvas_window_id_3 'o'
</MACRO>
<MACRO>
<NAME>TC_IMPL_TC_Bonobo_Canvas_window_id_4</NAME>
#define TC_IMPL_TC_Bonobo_Canvas_window_id_4 'b'
</MACRO>
<MACRO>
<NAME>TC_IMPL_TC_Bonobo_Canvas_window_id_5</NAME>
#define TC_IMPL_TC_Bonobo_Canvas_window_id_5 'o'
</MACRO>
<MACRO>
<NAME>TC_Bonobo_Canvas_window_id</NAME>
#define TC_Bonobo_Canvas_window_id ((CORBA_TypeCode)&TC_Bonobo_Canvas_window_id_struct)
</MACRO>
<MACRO>
<NAME>Bonobo_Canvas_window_id__alloc</NAME>
#define Bonobo_Canvas_window_id__alloc() ((Bonobo_Canvas_window_id *)ORBit_small_alloc (TC_CORBA_unsigned_long))
</MACRO>
<MACRO>
<NAME>Bonobo_Canvas_window_id__freekids</NAME>
#define Bonobo_Canvas_window_id__freekids(m,d) ORBit_small_freekids (TC_CORBA_unsigned_long,(m),(d))
</MACRO>
<TYPEDEF>
<NAME>Bonobo_Canvas_int32</NAME>
   typedef CORBA_long Bonobo_Canvas_int32;
</TYPEDEF>
<MACRO>
<NAME>Bonobo_Canvas_int32_marshal</NAME>
#define Bonobo_Canvas_int32_marshal(x,y,z) CORBA_long_marshal((x),(y),(z))
</MACRO>
<MACRO>
<NAME>Bonobo_Canvas_int32_demarshal</NAME>
#define Bonobo_Canvas_int32_demarshal(x,y,z,i) CORBA_long_demarshal((x),(y),(z),(i))
</MACRO>
<MACRO>
<NAME>TC_IMPL_TC_Bonobo_Canvas_int32_0</NAME>
#define TC_IMPL_TC_Bonobo_Canvas_int32_0 'B'
</MACRO>
<MACRO>
<NAME>TC_IMPL_TC_Bonobo_Canvas_int32_1</NAME>
#define TC_IMPL_TC_Bonobo_Canvas_int32_1 'o'
</MACRO>
<MACRO>
<NAME>TC_IMPL_TC_Bonobo_Canvas_int32_2</NAME>
#define TC_IMPL_TC_Bonobo_Canvas_int32_2 'n'
</MACRO>
<MACRO>
<NAME>TC_IMPL_TC_Bonobo_Canvas_int32_3</NAME>
#define TC_IMPL_TC_Bonobo_Canvas_int32_3 'o'
</MACRO>
<MACRO>
<NAME>TC_IMPL_TC_Bonobo_Canvas_int32_4</NAME>
#define TC_IMPL_TC_Bonobo_Canvas_int32_4 'b'
</MACRO>
<MACRO>
<NAME>TC_IMPL_TC_Bonobo_Canvas_int32_5</NAME>
#define TC_IMPL_TC_Bonobo_Canvas_int32_5 'o'
</MACRO>
<MACRO>
<NAME>TC_Bonobo_Canvas_int32</NAME>
#define TC_Bonobo_Canvas_int32 ((CORBA_TypeCode)&TC_Bonobo_Canvas_int32_struct)
</MACRO>
<MACRO>
<NAME>Bonobo_Canvas_int32__alloc</NAME>
#define Bonobo_Canvas_int32__alloc() ((Bonobo_Canvas_int32 *)ORBit_small_alloc (TC_CORBA_long))
</MACRO>
<MACRO>
<NAME>Bonobo_Canvas_int32__freekids</NAME>
#define Bonobo_Canvas_int32__freekids(m,d) ORBit_small_freekids (TC_CORBA_long,(m),(d))
</MACRO>
<MACRO>
<NAME>TC_IMPL_TC_Bonobo_Canvas_IRect_0</NAME>
#define TC_IMPL_TC_Bonobo_Canvas_IRect_0 'B'
</MACRO>
<MACRO>
<NAME>TC_IMPL_TC_Bonobo_Canvas_IRect_1</NAME>
#define TC_IMPL_TC_Bonobo_Canvas_IRect_1 'o'
</MACRO>
<MACRO>
<NAME>TC_IMPL_TC_Bonobo_Canvas_IRect_2</NAME>
#define TC_IMPL_TC_Bonobo_Canvas_IRect_2 'n'
</MACRO>
<MACRO>
<NAME>TC_IMPL_TC_Bonobo_Canvas_IRect_3</NAME>
#define TC_IMPL_TC_Bonobo_Canvas_IRect_3 'o'
</MACRO>
<MACRO>
<NAME>TC_IMPL_TC_Bonobo_Canvas_IRect_4</NAME>
#define TC_IMPL_TC_Bonobo_Canvas_IRect_4 'b'
</MACRO>
<MACRO>
<NAME>TC_IMPL_TC_Bonobo_Canvas_IRect_5</NAME>
#define TC_IMPL_TC_Bonobo_Canvas_IRect_5 'o'
</MACRO>
<MACRO>
<NAME>TC_Bonobo_Canvas_IRect</NAME>
#define TC_Bonobo_Canvas_IRect ((CORBA_TypeCode)&TC_Bonobo_Canvas_IRect_struct)
</MACRO>
<MACRO>
<NAME>Bonobo_Canvas_IRect__alloc</NAME>
#define Bonobo_Canvas_IRect__alloc() ((Bonobo_Canvas_IRect *)ORBit_small_alloc (TC_Bonobo_Canvas_IRect))
</MACRO>
<MACRO>
<NAME>Bonobo_Canvas_IRect__freekids</NAME>
#define Bonobo_Canvas_IRect__freekids(m,d) ORBit_small_freekids (TC_Bonobo_Canvas_IRect,(m),(d))
</MACRO>
<MACRO>
<NAME>TC_IMPL_TC_Bonobo_Canvas_DRect_0</NAME>
#define TC_IMPL_TC_Bonobo_Canvas_DRect_0 'B'
</MACRO>
<MACRO>
<NAME>TC_IMPL_TC_Bonobo_Canvas_DRect_1</NAME>
#define TC_IMPL_TC_Bonobo_Canvas_DRect_1 'o'
</MACRO>
<MACRO>
<NAME>TC_IMPL_TC_Bonobo_Canvas_DRect_2</NAME>
#define TC_IMPL_TC_Bonobo_Canvas_DRect_2 'n'
</MACRO>
<MACRO>
<NAME>TC_IMPL_TC_Bonobo_Canvas_DRect_3</NAME>
#define TC_IMPL_TC_Bonobo_Canvas_DRect_3 'o'
</MACRO>
<MACRO>
<NAME>TC_IMPL_TC_Bonobo_Canvas_DRect_4</NAME>
#define TC_IMPL_TC_Bonobo_Canvas_DRect_4 'b'
</MACRO>
<MACRO>
<NAME>TC_IMPL_TC_Bonobo_Canvas_DRect_5</NAME>
#define TC_IMPL_TC_Bonobo_Canvas_DRect_5 'o'
</MACRO>
<MACRO>
<NAME>TC_Bonobo_Canvas_DRect</NAME>
#define TC_Bonobo_Canvas_DRect ((CORBA_TypeCode)&TC_Bonobo_Canvas_DRect_struct)
</MACRO>
<MACRO>
<NAME>Bonobo_Canvas_DRect__alloc</NAME>
#define Bonobo_Canvas_DRect__alloc() ((Bonobo_Canvas_DRect *)ORBit_small_alloc (TC_Bonobo_Canvas_DRect))
</MACRO>
<MACRO>
<NAME>Bonobo_Canvas_DRect__freekids</NAME>
#define Bonobo_Canvas_DRect__freekids(m,d) ORBit_small_freekids (TC_Bonobo_Canvas_DRect,(m),(d))
</MACRO>
<MACRO>
<NAME>Bonobo_Canvas_IS_BG</NAME>
#define Bonobo_Canvas_IS_BG 1
</MACRO>
<MACRO>
<NAME>Bonobo_Canvas_IS_BUF</NAME>
#define Bonobo_Canvas_IS_BUF 2
</MACRO>
<TYPEDEF>
<NAME>Bonobo_Canvas_affine[6]</NAME>
   typedef CORBA_double Bonobo_Canvas_affine[6];
</TYPEDEF>
<TYPEDEF>
<NAME>Bonobo_Canvas_affine_slice</NAME>
   typedef CORBA_double Bonobo_Canvas_affine_slice;
</TYPEDEF>
<MACRO>
<NAME>TC_IMPL_TC_Bonobo_Canvas_affine_0</NAME>
#define TC_IMPL_TC_Bonobo_Canvas_affine_0 'B'
</MACRO>
<MACRO>
<NAME>TC_IMPL_TC_Bonobo_Canvas_affine_1</NAME>
#define TC_IMPL_TC_Bonobo_Canvas_affine_1 'o'
</MACRO>
<MACRO>
<NAME>TC_IMPL_TC_Bonobo_Canvas_affine_2</NAME>
#define TC_IMPL_TC_Bonobo_Canvas_affine_2 'n'
</MACRO>
<MACRO>
<NAME>TC_IMPL_TC_Bonobo_Canvas_affine_3</NAME>
#define TC_IMPL_TC_Bonobo_Canvas_affine_3 'o'
</MACRO>
<MACRO>
<NAME>TC_IMPL_TC_Bonobo_Canvas_affine_4</NAME>
#define TC_IMPL_TC_Bonobo_Canvas_affine_4 'b'
</MACRO>
<MACRO>
<NAME>TC_IMPL_TC_Bonobo_Canvas_affine_5</NAME>
#define TC_IMPL_TC_Bonobo_Canvas_affine_5 'o'
</MACRO>
<MACRO>
<NAME>TC_Bonobo_Canvas_affine</NAME>
#define TC_Bonobo_Canvas_affine ((CORBA_TypeCode)&TC_Bonobo_Canvas_affine_struct)
</MACRO>
<MACRO>
<NAME>Bonobo_Canvas_affine__alloc</NAME>
#define Bonobo_Canvas_affine__alloc() ((Bonobo_Canvas_affine_slice *)ORBit_small_alloc (TC_Bonobo_Canvas_affine))
</MACRO>
<MACRO>
<NAME>Bonobo_Canvas_affine__freekids</NAME>
#define Bonobo_Canvas_affine__freekids(m,d) ORBit_small_freekids (TC_Bonobo_Canvas_affine,(m),(d))
</MACRO>
<MACRO>
<NAME>TC_IMPL_TC_Bonobo_Canvas_Buf_0</NAME>
#define TC_IMPL_TC_Bonobo_Canvas_Buf_0 'B'
</MACRO>
<MACRO>
<NAME>TC_IMPL_TC_Bonobo_Canvas_Buf_1</NAME>
#define TC_IMPL_TC_Bonobo_Canvas_Buf_1 'o'
</MACRO>
<MACRO>
<NAME>TC_IMPL_TC_Bonobo_Canvas_Buf_2</NAME>
#define TC_IMPL_TC_Bonobo_Canvas_Buf_2 'n'
</MACRO>
<MACRO>
<NAME>TC_IMPL_TC_Bonobo_Canvas_Buf_3</NAME>
#define TC_IMPL_TC_Bonobo_Canvas_Buf_3 'o'
</MACRO>
<MACRO>
<NAME>TC_IMPL_TC_Bonobo_Canvas_Buf_4</NAME>
#define TC_IMPL_TC_Bonobo_Canvas_Buf_4 'b'
</MACRO>
<MACRO>
<NAME>TC_IMPL_TC_Bonobo_Canvas_Buf_5</NAME>
#define TC_IMPL_TC_Bonobo_Canvas_Buf_5 'o'
</MACRO>
<MACRO>
<NAME>TC_Bonobo_Canvas_Buf</NAME>
#define TC_Bonobo_Canvas_Buf ((CORBA_TypeCode)&TC_Bonobo_Canvas_Buf_struct)
</MACRO>
<MACRO>
<NAME>Bonobo_Canvas_Buf__alloc</NAME>
#define Bonobo_Canvas_Buf__alloc() ((Bonobo_Canvas_Buf *)ORBit_small_alloc (TC_Bonobo_Canvas_Buf))
</MACRO>
<MACRO>
<NAME>Bonobo_Canvas_Buf__freekids</NAME>
#define Bonobo_Canvas_Buf__freekids(m,d) ORBit_small_freekids (TC_Bonobo_Canvas_Buf,(m),(d))
</MACRO>
<MACRO>
<NAME>TC_IMPL_TC_Bonobo_Canvas_Point_0</NAME>
#define TC_IMPL_TC_Bonobo_Canvas_Point_0 'B'
</MACRO>
<MACRO>
<NAME>TC_IMPL_TC_Bonobo_Canvas_Point_1</NAME>
#define TC_IMPL_TC_Bonobo_Canvas_Point_1 'o'
</MACRO>
<MACRO>
<NAME>TC_IMPL_TC_Bonobo_Canvas_Point_2</NAME>
#define TC_IMPL_TC_Bonobo_Canvas_Point_2 'n'
</MACRO>
<MACRO>
<NAME>TC_IMPL_TC_Bonobo_Canvas_Point_3</NAME>
#define TC_IMPL_TC_Bonobo_Canvas_Point_3 'o'
</MACRO>
<MACRO>
<NAME>TC_IMPL_TC_Bonobo_Canvas_Point_4</NAME>
#define TC_IMPL_TC_Bonobo_Canvas_Point_4 'b'
</MACRO>
<MACRO>
<NAME>TC_IMPL_TC_Bonobo_Canvas_Point_5</NAME>
#define TC_IMPL_TC_Bonobo_Canvas_Point_5 'o'
</MACRO>
<MACRO>
<NAME>TC_Bonobo_Canvas_Point</NAME>
#define TC_Bonobo_Canvas_Point ((CORBA_TypeCode)&TC_Bonobo_Canvas_Point_struct)
</MACRO>
<MACRO>
<NAME>Bonobo_Canvas_Point__alloc</NAME>
#define Bonobo_Canvas_Point__alloc() ((Bonobo_Canvas_Point *)ORBit_small_alloc (TC_Bonobo_Canvas_Point))
</MACRO>
<MACRO>
<NAME>Bonobo_Canvas_Point__freekids</NAME>
#define Bonobo_Canvas_Point__freekids(m,d) ORBit_small_freekids (TC_Bonobo_Canvas_Point,(m),(d))
</MACRO>
<MACRO>
<NAME>ORBIT_DECL_CORBA_sequence_Bonobo_Canvas_Point</NAME>
#define ORBIT_DECL_CORBA_sequence_Bonobo_Canvas_Point 1
</MACRO>
<MACRO>
<NAME>ORBIT_IMPL_CORBA_sequence_Bonobo_Canvas_Point_0</NAME>
#define ORBIT_IMPL_CORBA_sequence_Bonobo_Canvas_Point_0 'B'
</MACRO>
<MACRO>
<NAME>ORBIT_IMPL_CORBA_sequence_Bonobo_Canvas_Point_1</NAME>
#define ORBIT_IMPL_CORBA_sequence_Bonobo_Canvas_Point_1 'o'
</MACRO>
<MACRO>
<NAME>ORBIT_IMPL_CORBA_sequence_Bonobo_Canvas_Point_2</NAME>
#define ORBIT_IMPL_CORBA_sequence_Bonobo_Canvas_Point_2 'n'
</MACRO>
<MACRO>
<NAME>ORBIT_IMPL_CORBA_sequence_Bonobo_Canvas_Point_3</NAME>
#define ORBIT_IMPL_CORBA_sequence_Bonobo_Canvas_Point_3 'o'
</MACRO>
<MACRO>
<NAME>ORBIT_IMPL_CORBA_sequence_Bonobo_Canvas_Point_4</NAME>
#define ORBIT_IMPL_CORBA_sequence_Bonobo_Canvas_Point_4 'b'
</MACRO>
<MACRO>
<NAME>ORBIT_IMPL_CORBA_sequence_Bonobo_Canvas_Point_5</NAME>
#define ORBIT_IMPL_CORBA_sequence_Bonobo_Canvas_Point_5 'o'
</MACRO>
<MACRO>
<NAME>TC_IMPL_TC_CORBA_sequence_Bonobo_Canvas_Point_0</NAME>
#define TC_IMPL_TC_CORBA_sequence_Bonobo_Canvas_Point_0 'B'
</MACRO>
<MACRO>
<NAME>TC_IMPL_TC_CORBA_sequence_Bonobo_Canvas_Point_1</NAME>
#define TC_IMPL_TC_CORBA_sequence_Bonobo_Canvas_Point_1 'o'
</MACRO>
<MACRO>
<NAME>TC_IMPL_TC_CORBA_sequence_Bonobo_Canvas_Point_2</NAME>
#define TC_IMPL_TC_CORBA_sequence_Bonobo_Canvas_Point_2 'n'
</MACRO>
<MACRO>
<NAME>TC_IMPL_TC_CORBA_sequence_Bonobo_Canvas_Point_3</NAME>
#define TC_IMPL_TC_CORBA_sequence_Bonobo_Canvas_Point_3 'o'
</MACRO>
<MACRO>
<NAME>TC_IMPL_TC_CORBA_sequence_Bonobo_Canvas_Point_4</NAME>
#define TC_IMPL_TC_CORBA_sequence_Bonobo_Canvas_Point_4 'b'
</MACRO>
<MACRO>
<NAME>TC_IMPL_TC_CORBA_sequence_Bonobo_Canvas_Point_5</NAME>
#define TC_IMPL_TC_CORBA_sequence_Bonobo_Canvas_Point_5 'o'
</MACRO>
<MACRO>
<NAME>TC_CORBA_sequence_Bonobo_Canvas_Point</NAME>
#define TC_CORBA_sequence_Bonobo_Canvas_Point ((CORBA_TypeCode)&TC_CORBA_sequence_Bonobo_Canvas_Point_struct)
</MACRO>
<MACRO>
<NAME>CORBA_sequence_Bonobo_Canvas_Point__alloc</NAME>
#define CORBA_sequence_Bonobo_Canvas_Point__alloc() ((CORBA_sequence_Bonobo_Canvas_Point *)ORBit_small_alloc (TC_CORBA_sequence_Bonobo_Canvas_Point))
</MACRO>
<MACRO>
<NAME>CORBA_sequence_Bonobo_Canvas_Point__freekids</NAME>
#define CORBA_sequence_Bonobo_Canvas_Point__freekids(m,d) ORBit_small_freekids (TC_CORBA_sequence_Bonobo_Canvas_Point,(m),(d))
</MACRO>
<MACRO>
<NAME>CORBA_sequence_Bonobo_Canvas_Point_allocbuf</NAME>
#define CORBA_sequence_Bonobo_Canvas_Point_allocbuf(l) ORBit_small_allocbuf (TC_CORBA_sequence_Bonobo_Canvas_Point, (l))
</MACRO>
<MACRO>
<NAME>CORBA_sequence_Bonobo_Canvas_Point_allocbuf</NAME>
#define CORBA_sequence_Bonobo_Canvas_Point_allocbuf(l) ORBit_small_allocbuf (TC_CORBA_sequence_Bonobo_Canvas_Point, (l))
</MACRO>
<TYPEDEF>
<NAME>Bonobo_Canvas_Points</NAME>
   typedef CORBA_sequence_Bonobo_Canvas_Point Bonobo_Canvas_Points;
</TYPEDEF>
<MACRO>
<NAME>Bonobo_Canvas_Points_marshal</NAME>
#define Bonobo_Canvas_Points_marshal(x,y,z) CORBA_sequence_Bonobo_Canvas_Point_marshal((x),(y),(z))
</MACRO>
<MACRO>
<NAME>Bonobo_Canvas_Points_demarshal</NAME>
#define Bonobo_Canvas_Points_demarshal(x,y,z,i) CORBA_sequence_Bonobo_Canvas_Point_demarshal((x),(y),(z),(i))
</MACRO>
<MACRO>
<NAME>TC_IMPL_TC_Bonobo_Canvas_Points_0</NAME>
#define TC_IMPL_TC_Bonobo_Canvas_Points_0 'B'
</MACRO>
<MACRO>
<NAME>TC_IMPL_TC_Bonobo_Canvas_Points_1</NAME>
#define TC_IMPL_TC_Bonobo_Canvas_Points_1 'o'
</MACRO>
<MACRO>
<NAME>TC_IMPL_TC_Bonobo_Canvas_Points_2</NAME>
#define TC_IMPL_TC_Bonobo_Canvas_Points_2 'n'
</MACRO>
<MACRO>
<NAME>TC_IMPL_TC_Bonobo_Canvas_Points_3</NAME>
#define TC_IMPL_TC_Bonobo_Canvas_Points_3 'o'
</MACRO>
<MACRO>
<NAME>TC_IMPL_TC_Bonobo_Canvas_Points_4</NAME>
#define TC_IMPL_TC_Bonobo_Canvas_Points_4 'b'
</MACRO>
<MACRO>
<NAME>TC_IMPL_TC_Bonobo_Canvas_Points_5</NAME>
#define TC_IMPL_TC_Bonobo_Canvas_Points_5 'o'
</MACRO>
<MACRO>
<NAME>TC_Bonobo_Canvas_Points</NAME>
#define TC_Bonobo_Canvas_Points ((CORBA_TypeCode)&TC_Bonobo_Canvas_Points_struct)
</MACRO>
<MACRO>
<NAME>Bonobo_Canvas_Points__alloc</NAME>
#define Bonobo_Canvas_Points__alloc() ((Bonobo_Canvas_Points *)ORBit_small_alloc (TC_CORBA_sequence_Bonobo_Canvas_Point))
</MACRO>
<MACRO>
<NAME>Bonobo_Canvas_Points__freekids</NAME>
#define Bonobo_Canvas_Points__freekids(m,d) ORBit_small_freekids (TC_CORBA_sequence_Bonobo_Canvas_Point,(m),(d))
</MACRO>
<MACRO>
<NAME>Bonobo_Canvas_Points_allocbuf</NAME>
#define Bonobo_Canvas_Points_allocbuf(l) ORBit_small_allocbuf (TC_CORBA_sequence_Bonobo_Canvas_Point, (l))
</MACRO>
<MACRO>
<NAME>TC_IMPL_TC_Bonobo_Canvas_SVPSegment_0</NAME>
#define TC_IMPL_TC_Bonobo_Canvas_SVPSegment_0 'B'
</MACRO>
<MACRO>
<NAME>TC_IMPL_TC_Bonobo_Canvas_SVPSegment_1</NAME>
#define TC_IMPL_TC_Bonobo_Canvas_SVPSegment_1 'o'
</MACRO>
<MACRO>
<NAME>TC_IMPL_TC_Bonobo_Canvas_SVPSegment_2</NAME>
#define TC_IMPL_TC_Bonobo_Canvas_SVPSegment_2 'n'
</MACRO>
<MACRO>
<NAME>TC_IMPL_TC_Bonobo_Canvas_SVPSegment_3</NAME>
#define TC_IMPL_TC_Bonobo_Canvas_SVPSegment_3 'o'
</MACRO>
<MACRO>
<NAME>TC_IMPL_TC_Bonobo_Canvas_SVPSegment_4</NAME>
#define TC_IMPL_TC_Bonobo_Canvas_SVPSegment_4 'b'
</MACRO>
<MACRO>
<NAME>TC_IMPL_TC_Bonobo_Canvas_SVPSegment_5</NAME>
#define TC_IMPL_TC_Bonobo_Canvas_SVPSegment_5 'o'
</MACRO>
<MACRO>
<NAME>TC_Bonobo_Canvas_SVPSegment</NAME>
#define TC_Bonobo_Canvas_SVPSegment ((CORBA_TypeCode)&TC_Bonobo_Canvas_SVPSegment_struct)
</MACRO>
<MACRO>
<NAME>Bonobo_Canvas_SVPSegment__alloc</NAME>
#define Bonobo_Canvas_SVPSegment__alloc() ((Bonobo_Canvas_SVPSegment *)ORBit_small_alloc (TC_Bonobo_Canvas_SVPSegment))
</MACRO>
<MACRO>
<NAME>Bonobo_Canvas_SVPSegment__freekids</NAME>
#define Bonobo_Canvas_SVPSegment__freekids(m,d) ORBit_small_freekids (TC_Bonobo_Canvas_SVPSegment,(m),(d))
</MACRO>
<MACRO>
<NAME>ORBIT_DECL_CORBA_sequence_Bonobo_Canvas_SVPSegment</NAME>
#define ORBIT_DECL_CORBA_sequence_Bonobo_Canvas_SVPSegment 1
</MACRO>
<MACRO>
<NAME>ORBIT_IMPL_CORBA_sequence_Bonobo_Canvas_SVPSegment_0</NAME>
#define ORBIT_IMPL_CORBA_sequence_Bonobo_Canvas_SVPSegment_0 'B'
</MACRO>
<MACRO>
<NAME>ORBIT_IMPL_CORBA_sequence_Bonobo_Canvas_SVPSegment_1</NAME>
#define ORBIT_IMPL_CORBA_sequence_Bonobo_Canvas_SVPSegment_1 'o'
</MACRO>
<MACRO>
<NAME>ORBIT_IMPL_CORBA_sequence_Bonobo_Canvas_SVPSegment_2</NAME>
#define ORBIT_IMPL_CORBA_sequence_Bonobo_Canvas_SVPSegment_2 'n'
</MACRO>
<MACRO>
<NAME>ORBIT_IMPL_CORBA_sequence_Bonobo_Canvas_SVPSegment_3</NAME>
#define ORBIT_IMPL_CORBA_sequence_Bonobo_Canvas_SVPSegment_3 'o'
</MACRO>
<MACRO>
<NAME>ORBIT_IMPL_CORBA_sequence_Bonobo_Canvas_SVPSegment_4</NAME>
#define ORBIT_IMPL_CORBA_sequence_Bonobo_Canvas_SVPSegment_4 'b'
</MACRO>
<MACRO>
<NAME>ORBIT_IMPL_CORBA_sequence_Bonobo_Canvas_SVPSegment_5</NAME>
#define ORBIT_IMPL_CORBA_sequence_Bonobo_Canvas_SVPSegment_5 'o'
</MACRO>
<MACRO>
<NAME>TC_IMPL_TC_CORBA_sequence_Bonobo_Canvas_SVPSegment_0</NAME>
#define TC_IMPL_TC_CORBA_sequence_Bonobo_Canvas_SVPSegment_0 'B'
</MACRO>
<MACRO>
<NAME>TC_IMPL_TC_CORBA_sequence_Bonobo_Canvas_SVPSegment_1</NAME>
#define TC_IMPL_TC_CORBA_sequence_Bonobo_Canvas_SVPSegment_1 'o'
</MACRO>
<MACRO>
<NAME>TC_IMPL_TC_CORBA_sequence_Bonobo_Canvas_SVPSegment_2</NAME>
#define TC_IMPL_TC_CORBA_sequence_Bonobo_Canvas_SVPSegment_2 'n'
</MACRO>
<MACRO>
<NAME>TC_IMPL_TC_CORBA_sequence_Bonobo_Canvas_SVPSegment_3</NAME>
#define TC_IMPL_TC_CORBA_sequence_Bonobo_Canvas_SVPSegment_3 'o'
</MACRO>
<MACRO>
<NAME>TC_IMPL_TC_CORBA_sequence_Bonobo_Canvas_SVPSegment_4</NAME>
#define TC_IMPL_TC_CORBA_sequence_Bonobo_Canvas_SVPSegment_4 'b'
</MACRO>
<MACRO>
<NAME>TC_IMPL_TC_CORBA_sequence_Bonobo_Canvas_SVPSegment_5</NAME>
#define TC_IMPL_TC_CORBA_sequence_Bonobo_Canvas_SVPSegment_5 'o'
</MACRO>
<MACRO>
<NAME>TC_CORBA_sequence_Bonobo_Canvas_SVPSegment</NAME>
#define TC_CORBA_sequence_Bonobo_Canvas_SVPSegment ((CORBA_TypeCode)&TC_CORBA_sequence_Bonobo_Canvas_SVPSegment_struct)
</MACRO>
<MACRO>
<NAME>CORBA_sequence_Bonobo_Canvas_SVPSegment__alloc</NAME>
#define CORBA_sequence_Bonobo_Canvas_SVPSegment__alloc() ((CORBA_sequence_Bonobo_Canvas_SVPSegment *)ORBit_small_alloc (TC_CORBA_sequence_Bonobo_Canvas_SVPSegment))
</MACRO>
<MACRO>
<NAME>CORBA_sequence_Bonobo_Canvas_SVPSegment__freekids</NAME>
#define CORBA_sequence_Bonobo_Canvas_SVPSegment__freekids(m,d) ORBit_small_freekids (TC_CORBA_sequence_Bonobo_Canvas_SVPSegment,(m),(d))
</MACRO>
<MACRO>
<NAME>CORBA_sequence_Bonobo_Canvas_SVPSegment_allocbuf</NAME>
#define CORBA_sequence_Bonobo_Canvas_SVPSegment_allocbuf(l) ORBit_small_allocbuf (TC_CORBA_sequence_Bonobo_Canvas_SVPSegment, (l))
</MACRO>
<MACRO>
<NAME>CORBA_sequence_Bonobo_Canvas_SVPSegment_allocbuf</NAME>
#define CORBA_sequence_Bonobo_Canvas_SVPSegment_allocbuf(l) ORBit_small_allocbuf (TC_CORBA_sequence_Bonobo_Canvas_SVPSegment, (l))
</MACRO>
<TYPEDEF>
<NAME>Bonobo_Canvas_SVP</NAME>
   typedef CORBA_sequence_Bonobo_Canvas_SVPSegment Bonobo_Canvas_SVP;
</TYPEDEF>
<MACRO>
<NAME>Bonobo_Canvas_SVP_marshal</NAME>
#define Bonobo_Canvas_SVP_marshal(x,y,z) CORBA_sequence_Bonobo_Canvas_SVPSegment_marshal((x),(y),(z))
</MACRO>
<MACRO>
<NAME>Bonobo_Canvas_SVP_demarshal</NAME>
#define Bonobo_Canvas_SVP_demarshal(x,y,z,i) CORBA_sequence_Bonobo_Canvas_SVPSegment_demarshal((x),(y),(z),(i))
</MACRO>
<MACRO>
<NAME>TC_IMPL_TC_Bonobo_Canvas_SVP_0</NAME>
#define TC_IMPL_TC_Bonobo_Canvas_SVP_0 'B'
</MACRO>
<MACRO>
<NAME>TC_IMPL_TC_Bonobo_Canvas_SVP_1</NAME>
#define TC_IMPL_TC_Bonobo_Canvas_SVP_1 'o'
</MACRO>
<MACRO>
<NAME>TC_IMPL_TC_Bonobo_Canvas_SVP_2</NAME>
#define TC_IMPL_TC_Bonobo_Canvas_SVP_2 'n'
</MACRO>
<MACRO>
<NAME>TC_IMPL_TC_Bonobo_Canvas_SVP_3</NAME>
#define TC_IMPL_TC_Bonobo_Canvas_SVP_3 'o'
</MACRO>
<MACRO>
<NAME>TC_IMPL_TC_Bonobo_Canvas_SVP_4</NAME>
#define TC_IMPL_TC_Bonobo_Canvas_SVP_4 'b'
</MACRO>
<MACRO>
<NAME>TC_IMPL_TC_Bonobo_Canvas_SVP_5</NAME>
#define TC_IMPL_TC_Bonobo_Canvas_SVP_5 'o'
</MACRO>
<MACRO>
<NAME>TC_Bonobo_Canvas_SVP</NAME>
#define TC_Bonobo_Canvas_SVP ((CORBA_TypeCode)&TC_Bonobo_Canvas_SVP_struct)
</MACRO>
<MACRO>
<NAME>Bonobo_Canvas_SVP__alloc</NAME>
#define Bonobo_Canvas_SVP__alloc() ((Bonobo_Canvas_SVP *)ORBit_small_alloc (TC_CORBA_sequence_Bonobo_Canvas_SVPSegment))
</MACRO>
<MACRO>
<NAME>Bonobo_Canvas_SVP__freekids</NAME>
#define Bonobo_Canvas_SVP__freekids(m,d) ORBit_small_freekids (TC_CORBA_sequence_Bonobo_Canvas_SVPSegment,(m),(d))
</MACRO>
<MACRO>
<NAME>Bonobo_Canvas_SVP_allocbuf</NAME>
#define Bonobo_Canvas_SVP_allocbuf(l) ORBit_small_allocbuf (TC_CORBA_sequence_Bonobo_Canvas_SVPSegment, (l))
</MACRO>
<MACRO>
<NAME>ORBIT_DECL_CORBA_sequence_CORBA_long</NAME>
#define ORBIT_DECL_CORBA_sequence_CORBA_long 1
</MACRO>
<MACRO>
<NAME>ORBIT_IMPL_CORBA_sequence_CORBA_long_0</NAME>
#define ORBIT_IMPL_CORBA_sequence_CORBA_long_0 'B'
</MACRO>
<MACRO>
<NAME>ORBIT_IMPL_CORBA_sequence_CORBA_long_1</NAME>
#define ORBIT_IMPL_CORBA_sequence_CORBA_long_1 'o'
</MACRO>
<MACRO>
<NAME>ORBIT_IMPL_CORBA_sequence_CORBA_long_2</NAME>
#define ORBIT_IMPL_CORBA_sequence_CORBA_long_2 'n'
</MACRO>
<MACRO>
<NAME>ORBIT_IMPL_CORBA_sequence_CORBA_long_3</NAME>
#define ORBIT_IMPL_CORBA_sequence_CORBA_long_3 'o'
</MACRO>
<MACRO>
<NAME>ORBIT_IMPL_CORBA_sequence_CORBA_long_4</NAME>
#define ORBIT_IMPL_CORBA_sequence_CORBA_long_4 'b'
</MACRO>
<MACRO>
<NAME>ORBIT_IMPL_CORBA_sequence_CORBA_long_5</NAME>
#define ORBIT_IMPL_CORBA_sequence_CORBA_long_5 'o'
</MACRO>
<MACRO>
<NAME>TC_IMPL_TC_CORBA_sequence_CORBA_long_0</NAME>
#define TC_IMPL_TC_CORBA_sequence_CORBA_long_0 'B'
</MACRO>
<MACRO>
<NAME>TC_IMPL_TC_CORBA_sequence_CORBA_long_1</NAME>
#define TC_IMPL_TC_CORBA_sequence_CORBA_long_1 'o'
</MACRO>
<MACRO>
<NAME>TC_IMPL_TC_CORBA_sequence_CORBA_long_2</NAME>
#define TC_IMPL_TC_CORBA_sequence_CORBA_long_2 'n'
</MACRO>
<MACRO>
<NAME>TC_IMPL_TC_CORBA_sequence_CORBA_long_3</NAME>
#define TC_IMPL_TC_CORBA_sequence_CORBA_long_3 'o'
</MACRO>
<MACRO>
<NAME>TC_IMPL_TC_CORBA_sequence_CORBA_long_4</NAME>
#define TC_IMPL_TC_CORBA_sequence_CORBA_long_4 'b'
</MACRO>
<MACRO>
<NAME>TC_IMPL_TC_CORBA_sequence_CORBA_long_5</NAME>
#define TC_IMPL_TC_CORBA_sequence_CORBA_long_5 'o'
</MACRO>
<MACRO>
<NAME>TC_CORBA_sequence_CORBA_long</NAME>
#define TC_CORBA_sequence_CORBA_long ((CORBA_TypeCode)&TC_CORBA_sequence_CORBA_long_struct)
</MACRO>
<MACRO>
<NAME>CORBA_sequence_CORBA_long__alloc</NAME>
#define CORBA_sequence_CORBA_long__alloc() ((CORBA_sequence_CORBA_long *)ORBit_small_alloc (TC_CORBA_sequence_CORBA_long))
</MACRO>
<MACRO>
<NAME>CORBA_sequence_CORBA_long__freekids</NAME>
#define CORBA_sequence_CORBA_long__freekids(m,d) ORBit_small_freekids (TC_CORBA_sequence_CORBA_long,(m),(d))
</MACRO>
<MACRO>
<NAME>CORBA_sequence_CORBA_long_allocbuf</NAME>
#define CORBA_sequence_CORBA_long_allocbuf(l) ORBit_small_allocbuf (TC_CORBA_sequence_CORBA_long, (l))
</MACRO>
<MACRO>
<NAME>CORBA_sequence_CORBA_long_allocbuf</NAME>
#define CORBA_sequence_CORBA_long_allocbuf(l) ORBit_small_allocbuf (TC_CORBA_sequence_CORBA_long, (l))
</MACRO>
<MACRO>
<NAME>ORBIT_DECL_CORBA_sequence_Bonobo_Canvas_int32</NAME>
#define ORBIT_DECL_CORBA_sequence_Bonobo_Canvas_int32 1
</MACRO>
<MACRO>
<NAME>ORBIT_IMPL_CORBA_sequence_Bonobo_Canvas_int32_0</NAME>
#define ORBIT_IMPL_CORBA_sequence_Bonobo_Canvas_int32_0 'B'
</MACRO>
<MACRO>
<NAME>ORBIT_IMPL_CORBA_sequence_Bonobo_Canvas_int32_1</NAME>
#define ORBIT_IMPL_CORBA_sequence_Bonobo_Canvas_int32_1 'o'
</MACRO>
<MACRO>
<NAME>ORBIT_IMPL_CORBA_sequence_Bonobo_Canvas_int32_2</NAME>
#define ORBIT_IMPL_CORBA_sequence_Bonobo_Canvas_int32_2 'n'
</MACRO>
<MACRO>
<NAME>ORBIT_IMPL_CORBA_sequence_Bonobo_Canvas_int32_3</NAME>
#define ORBIT_IMPL_CORBA_sequence_Bonobo_Canvas_int32_3 'o'
</MACRO>
<MACRO>
<NAME>ORBIT_IMPL_CORBA_sequence_Bonobo_Canvas_int32_4</NAME>
#define ORBIT_IMPL_CORBA_sequence_Bonobo_Canvas_int32_4 'b'
</MACRO>
<MACRO>
<NAME>ORBIT_IMPL_CORBA_sequence_Bonobo_Canvas_int32_5</NAME>
#define ORBIT_IMPL_CORBA_sequence_Bonobo_Canvas_int32_5 'o'
</MACRO>
<TYPEDEF>
<NAME>CORBA_sequence_Bonobo_Canvas_int32</NAME>
   typedef CORBA_sequence_CORBA_long CORBA_sequence_Bonobo_Canvas_int32;
</TYPEDEF>
<MACRO>
<NAME>TC_IMPL_TC_CORBA_sequence_Bonobo_Canvas_int32_0</NAME>
#define TC_IMPL_TC_CORBA_sequence_Bonobo_Canvas_int32_0 'B'
</MACRO>
<MACRO>
<NAME>TC_IMPL_TC_CORBA_sequence_Bonobo_Canvas_int32_1</NAME>
#define TC_IMPL_TC_CORBA_sequence_Bonobo_Canvas_int32_1 'o'
</MACRO>
<MACRO>
<NAME>TC_IMPL_TC_CORBA_sequence_Bonobo_Canvas_int32_2</NAME>
#define TC_IMPL_TC_CORBA_sequence_Bonobo_Canvas_int32_2 'n'
</MACRO>
<MACRO>
<NAME>TC_IMPL_TC_CORBA_sequence_Bonobo_Canvas_int32_3</NAME>
#define TC_IMPL_TC_CORBA_sequence_Bonobo_Canvas_int32_3 'o'
</MACRO>
<MACRO>
<NAME>TC_IMPL_TC_CORBA_sequence_Bonobo_Canvas_int32_4</NAME>
#define TC_IMPL_TC_CORBA_sequence_Bonobo_Canvas_int32_4 'b'
</MACRO>
<MACRO>
<NAME>TC_IMPL_TC_CORBA_sequence_Bonobo_Canvas_int32_5</NAME>
#define TC_IMPL_TC_CORBA_sequence_Bonobo_Canvas_int32_5 'o'
</MACRO>
<MACRO>
<NAME>TC_CORBA_sequence_Bonobo_Canvas_int32</NAME>
#define TC_CORBA_sequence_Bonobo_Canvas_int32 ((CORBA_TypeCode)&TC_CORBA_sequence_Bonobo_Canvas_int32_struct)
</MACRO>
<MACRO>
<NAME>CORBA_sequence_Bonobo_Canvas_int32__alloc</NAME>
#define CORBA_sequence_Bonobo_Canvas_int32__alloc CORBA_sequence_CORBA_long__alloc
</MACRO>
<MACRO>
<NAME>CORBA_sequence_Bonobo_Canvas_int32__freekids</NAME>
#define CORBA_sequence_Bonobo_Canvas_int32__freekids CORBA_sequence_CORBA_long__freekids
</MACRO>
<MACRO>
<NAME>CORBA_sequence_Bonobo_Canvas_int32_allocbuf</NAME>
#define CORBA_sequence_Bonobo_Canvas_int32_allocbuf CORBA_sequence_CORBA_long_allocbuf
</MACRO>
<MACRO>
<NAME>CORBA_sequence_Bonobo_Canvas_int32_marshal</NAME>
#define CORBA_sequence_Bonobo_Canvas_int32_marshal(x,y,z) CORBA_sequence_CORBA_long_marshal((x),(y),(z))
</MACRO>
<MACRO>
<NAME>CORBA_sequence_Bonobo_Canvas_int32_demarshal</NAME>
#define CORBA_sequence_Bonobo_Canvas_int32_demarshal(x,y,z,i) CORBA_sequence_CORBA_long_demarshal((x),(y),(z),(i))
</MACRO>
<MACRO>
<NAME>TC_IMPL_TC_Bonobo_Canvas_ArtUTA_0</NAME>
#define TC_IMPL_TC_Bonobo_Canvas_ArtUTA_0 'B'
</MACRO>
<MACRO>
<NAME>TC_IMPL_TC_Bonobo_Canvas_ArtUTA_1</NAME>
#define TC_IMPL_TC_Bonobo_Canvas_ArtUTA_1 'o'
</MACRO>
<MACRO>
<NAME>TC_IMPL_TC_Bonobo_Canvas_ArtUTA_2</NAME>
#define TC_IMPL_TC_Bonobo_Canvas_ArtUTA_2 'n'
</MACRO>
<MACRO>
<NAME>TC_IMPL_TC_Bonobo_Canvas_ArtUTA_3</NAME>
#define TC_IMPL_TC_Bonobo_Canvas_ArtUTA_3 'o'
</MACRO>
<MACRO>
<NAME>TC_IMPL_TC_Bonobo_Canvas_ArtUTA_4</NAME>
#define TC_IMPL_TC_Bonobo_Canvas_ArtUTA_4 'b'
</MACRO>
<MACRO>
<NAME>TC_IMPL_TC_Bonobo_Canvas_ArtUTA_5</NAME>
#define TC_IMPL_TC_Bonobo_Canvas_ArtUTA_5 'o'
</MACRO>
<MACRO>
<NAME>TC_Bonobo_Canvas_ArtUTA</NAME>
#define TC_Bonobo_Canvas_ArtUTA ((CORBA_TypeCode)&TC_Bonobo_Canvas_ArtUTA_struct)
</MACRO>
<MACRO>
<NAME>Bonobo_Canvas_ArtUTA__alloc</NAME>
#define Bonobo_Canvas_ArtUTA__alloc() ((Bonobo_Canvas_ArtUTA *)ORBit_small_alloc (TC_Bonobo_Canvas_ArtUTA))
</MACRO>
<MACRO>
<NAME>Bonobo_Canvas_ArtUTA__freekids</NAME>
#define Bonobo_Canvas_ArtUTA__freekids(m,d) ORBit_small_freekids (TC_Bonobo_Canvas_ArtUTA,(m),(d))
</MACRO>
<MACRO>
<NAME>TC_IMPL_TC_Bonobo_Canvas_State_0</NAME>
#define TC_IMPL_TC_Bonobo_Canvas_State_0 'B'
</MACRO>
<MACRO>
<NAME>TC_IMPL_TC_Bonobo_Canvas_State_1</NAME>
#define TC_IMPL_TC_Bonobo_Canvas_State_1 'o'
</MACRO>
<MACRO>
<NAME>TC_IMPL_TC_Bonobo_Canvas_State_2</NAME>
#define TC_IMPL_TC_Bonobo_Canvas_State_2 'n'
</MACRO>
<MACRO>
<NAME>TC_IMPL_TC_Bonobo_Canvas_State_3</NAME>
#define TC_IMPL_TC_Bonobo_Canvas_State_3 'o'
</MACRO>
<MACRO>
<NAME>TC_IMPL_TC_Bonobo_Canvas_State_4</NAME>
#define TC_IMPL_TC_Bonobo_Canvas_State_4 'b'
</MACRO>
<MACRO>
<NAME>TC_IMPL_TC_Bonobo_Canvas_State_5</NAME>
#define TC_IMPL_TC_Bonobo_Canvas_State_5 'o'
</MACRO>
<MACRO>
<NAME>TC_Bonobo_Canvas_State</NAME>
#define TC_Bonobo_Canvas_State ((CORBA_TypeCode)&TC_Bonobo_Canvas_State_struct)
</MACRO>
<MACRO>
<NAME>Bonobo_Canvas_State__alloc</NAME>
#define Bonobo_Canvas_State__alloc() ((Bonobo_Canvas_State *)ORBit_small_alloc (TC_Bonobo_Canvas_State))
</MACRO>
<MACRO>
<NAME>Bonobo_Canvas_State__freekids</NAME>
#define Bonobo_Canvas_State__freekids(m,d) ORBit_small_freekids (TC_Bonobo_Canvas_State,(m),(d))
</MACRO>
<MACRO>
<NAME>ORBIT_DECL_Bonobo_Canvas_Component</NAME>
#define ORBIT_DECL_Bonobo_Canvas_Component 1
</MACRO>
<MACRO>
<NAME>Bonobo_Canvas_Component__freekids</NAME>
#define Bonobo_Canvas_Component__freekids CORBA_Object__freekids
</MACRO>
<TYPEDEF>
<NAME>Bonobo_Canvas_Component</NAME>
   typedef CORBA_Object Bonobo_Canvas_Component;
</TYPEDEF>
<VARIABLE>
<NAME>Bonobo_Canvas_Component__classid</NAME>
   extern CORBA_unsigned_long Bonobo_Canvas_Component__classid;
</VARIABLE>
<MACRO>
<NAME>TC_IMPL_TC_Bonobo_Canvas_Component_0</NAME>
#define TC_IMPL_TC_Bonobo_Canvas_Component_0 'B'
</MACRO>
<MACRO>
<NAME>TC_IMPL_TC_Bonobo_Canvas_Component_1</NAME>
#define TC_IMPL_TC_Bonobo_Canvas_Component_1 'o'
</MACRO>
<MACRO>
<NAME>TC_IMPL_TC_Bonobo_Canvas_Component_2</NAME>
#define TC_IMPL_TC_Bonobo_Canvas_Component_2 'n'
</MACRO>
<MACRO>
<NAME>TC_IMPL_TC_Bonobo_Canvas_Component_3</NAME>
#define TC_IMPL_TC_Bonobo_Canvas_Component_3 'o'
</MACRO>
<MACRO>
<NAME>TC_IMPL_TC_Bonobo_Canvas_Component_4</NAME>
#define TC_IMPL_TC_Bonobo_Canvas_Component_4 'b'
</MACRO>
<MACRO>
<NAME>TC_IMPL_TC_Bonobo_Canvas_Component_5</NAME>
#define TC_IMPL_TC_Bonobo_Canvas_Component_5 'o'
</MACRO>
<MACRO>
<NAME>TC_Bonobo_Canvas_Component</NAME>
#define TC_Bonobo_Canvas_Component ((CORBA_TypeCode)&TC_Bonobo_Canvas_Component_struct)
</MACRO>
<MACRO>
<NAME>ORBIT_DECL_Bonobo_Canvas_ComponentProxy</NAME>
#define ORBIT_DECL_Bonobo_Canvas_ComponentProxy 1
</MACRO>
<MACRO>
<NAME>Bonobo_Canvas_ComponentProxy__freekids</NAME>
#define Bonobo_Canvas_ComponentProxy__freekids CORBA_Object__freekids
</MACRO>
<TYPEDEF>
<NAME>Bonobo_Canvas_ComponentProxy</NAME>
   typedef CORBA_Object Bonobo_Canvas_ComponentProxy;
</TYPEDEF>
<VARIABLE>
<NAME>Bonobo_Canvas_ComponentProxy__classid</NAME>
   extern CORBA_unsigned_long Bonobo_Canvas_ComponentProxy__classid;
</VARIABLE>
<MACRO>
<NAME>TC_IMPL_TC_Bonobo_Canvas_ComponentProxy_0</NAME>
#define TC_IMPL_TC_Bonobo_Canvas_ComponentProxy_0 'B'
</MACRO>
<MACRO>
<NAME>TC_IMPL_TC_Bonobo_Canvas_ComponentProxy_1</NAME>
#define TC_IMPL_TC_Bonobo_Canvas_ComponentProxy_1 'o'
</MACRO>
<MACRO>
<NAME>TC_IMPL_TC_Bonobo_Canvas_ComponentProxy_2</NAME>
#define TC_IMPL_TC_Bonobo_Canvas_ComponentProxy_2 'n'
</MACRO>
<MACRO>
<NAME>TC_IMPL_TC_Bonobo_Canvas_ComponentProxy_3</NAME>
#define TC_IMPL_TC_Bonobo_Canvas_ComponentProxy_3 'o'
</MACRO>
<MACRO>
<NAME>TC_IMPL_TC_Bonobo_Canvas_ComponentProxy_4</NAME>
#define TC_IMPL_TC_Bonobo_Canvas_ComponentProxy_4 'b'
</MACRO>
<MACRO>
<NAME>TC_IMPL_TC_Bonobo_Canvas_ComponentProxy_5</NAME>
#define TC_IMPL_TC_Bonobo_Canvas_ComponentProxy_5 'o'
</MACRO>
<MACRO>
<NAME>TC_Bonobo_Canvas_ComponentProxy</NAME>
#define TC_Bonobo_Canvas_ComponentProxy ((CORBA_TypeCode)&TC_Bonobo_Canvas_ComponentProxy_struct)
</MACRO>
<MACRO>
<NAME>ORBIT_DECL_Bonobo_ControlFactory</NAME>
#define ORBIT_DECL_Bonobo_ControlFactory 1
</MACRO>
<MACRO>
<NAME>Bonobo_ControlFactory__freekids</NAME>
#define Bonobo_ControlFactory__freekids CORBA_Object__freekids
</MACRO>
<TYPEDEF>
<NAME>Bonobo_ControlFactory</NAME>
   typedef CORBA_Object Bonobo_ControlFactory;
</TYPEDEF>
<VARIABLE>
<NAME>Bonobo_ControlFactory__classid</NAME>
   extern CORBA_unsigned_long Bonobo_ControlFactory__classid;
</VARIABLE>
<MACRO>
<NAME>TC_IMPL_TC_Bonobo_ControlFactory_0</NAME>
#define TC_IMPL_TC_Bonobo_ControlFactory_0 'B'
</MACRO>
<MACRO>
<NAME>TC_IMPL_TC_Bonobo_ControlFactory_1</NAME>
#define TC_IMPL_TC_Bonobo_ControlFactory_1 'o'
</MACRO>
<MACRO>
<NAME>TC_IMPL_TC_Bonobo_ControlFactory_2</NAME>
#define TC_IMPL_TC_Bonobo_ControlFactory_2 'n'
</MACRO>
<MACRO>
<NAME>TC_IMPL_TC_Bonobo_ControlFactory_3</NAME>
#define TC_IMPL_TC_Bonobo_ControlFactory_3 'o'
</MACRO>
<MACRO>
<NAME>TC_IMPL_TC_Bonobo_ControlFactory_4</NAME>
#define TC_IMPL_TC_Bonobo_ControlFactory_4 'b'
</MACRO>
<MACRO>
<NAME>TC_IMPL_TC_Bonobo_ControlFactory_5</NAME>
#define TC_IMPL_TC_Bonobo_ControlFactory_5 'o'
</MACRO>
<MACRO>
<NAME>TC_Bonobo_ControlFactory</NAME>
#define TC_Bonobo_ControlFactory ((CORBA_TypeCode)&TC_Bonobo_ControlFactory_struct)
</MACRO>
<MACRO>
<NAME>ORBIT_DECL_Bonobo_CanvasComponentFactory</NAME>
#define ORBIT_DECL_Bonobo_CanvasComponentFactory 1
</MACRO>
<MACRO>
<NAME>Bonobo_CanvasComponentFactory__freekids</NAME>
#define Bonobo_CanvasComponentFactory__freekids CORBA_Object__freekids
</MACRO>
<TYPEDEF>
<NAME>Bonobo_CanvasComponentFactory</NAME>
   typedef CORBA_Object Bonobo_CanvasComponentFactory;
</TYPEDEF>
<VARIABLE>
<NAME>Bonobo_CanvasComponentFactory__classid</NAME>
   extern CORBA_unsigned_long Bonobo_CanvasComponentFactory__classid;
</VARIABLE>
<MACRO>
<NAME>TC_IMPL_TC_Bonobo_CanvasComponentFactory_0</NAME>
#define TC_IMPL_TC_Bonobo_CanvasComponentFactory_0 'B'
</MACRO>
<MACRO>
<NAME>TC_IMPL_TC_Bonobo_CanvasComponentFactory_1</NAME>
#define TC_IMPL_TC_Bonobo_CanvasComponentFactory_1 'o'
</MACRO>
<MACRO>
<NAME>TC_IMPL_TC_Bonobo_CanvasComponentFactory_2</NAME>
#define TC_IMPL_TC_Bonobo_CanvasComponentFactory_2 'n'
</MACRO>
<MACRO>
<NAME>TC_IMPL_TC_Bonobo_CanvasComponentFactory_3</NAME>
#define TC_IMPL_TC_Bonobo_CanvasComponentFactory_3 'o'
</MACRO>
<MACRO>
<NAME>TC_IMPL_TC_Bonobo_CanvasComponentFactory_4</NAME>
#define TC_IMPL_TC_Bonobo_CanvasComponentFactory_4 'b'
</MACRO>
<MACRO>
<NAME>TC_IMPL_TC_Bonobo_CanvasComponentFactory_5</NAME>
#define TC_IMPL_TC_Bonobo_CanvasComponentFactory_5 'o'
</MACRO>
<MACRO>
<NAME>TC_Bonobo_CanvasComponentFactory</NAME>
#define TC_Bonobo_CanvasComponentFactory ((CORBA_TypeCode)&TC_Bonobo_CanvasComponentFactory_struct)
</MACRO>
<MACRO>
<NAME>ORBIT_DECL_Bonobo_Embeddable</NAME>
#define ORBIT_DECL_Bonobo_Embeddable 1
</MACRO>
<MACRO>
<NAME>Bonobo_Embeddable__freekids</NAME>
#define Bonobo_Embeddable__freekids CORBA_Object__freekids
</MACRO>
<TYPEDEF>
<NAME>Bonobo_Embeddable</NAME>
   typedef CORBA_Object Bonobo_Embeddable;
</TYPEDEF>
<VARIABLE>
<NAME>Bonobo_Embeddable__classid</NAME>
   extern CORBA_unsigned_long Bonobo_Embeddable__classid;
</VARIABLE>
<MACRO>
<NAME>TC_IMPL_TC_Bonobo_Embeddable_0</NAME>
#define TC_IMPL_TC_Bonobo_Embeddable_0 'B'
</MACRO>
<MACRO>
<NAME>TC_IMPL_TC_Bonobo_Embeddable_1</NAME>
#define TC_IMPL_TC_Bonobo_Embeddable_1 'o'
</MACRO>
<MACRO>
<NAME>TC_IMPL_TC_Bonobo_Embeddable_2</NAME>
#define TC_IMPL_TC_Bonobo_Embeddable_2 'n'
</MACRO>
<MACRO>
<NAME>TC_IMPL_TC_Bonobo_Embeddable_3</NAME>
#define TC_IMPL_TC_Bonobo_Embeddable_3 'o'
</MACRO>
<MACRO>
<NAME>TC_IMPL_TC_Bonobo_Embeddable_4</NAME>
#define TC_IMPL_TC_Bonobo_Embeddable_4 'b'
</MACRO>
<MACRO>
<NAME>TC_IMPL_TC_Bonobo_Embeddable_5</NAME>
#define TC_IMPL_TC_Bonobo_Embeddable_5 'o'
</MACRO>
<MACRO>
<NAME>TC_Bonobo_Embeddable</NAME>
#define TC_Bonobo_Embeddable ((CORBA_TypeCode)&TC_Bonobo_Embeddable_struct)
</MACRO>
<MACRO>
<NAME>TC_IMPL_TC_Bonobo_PrintScissor_0</NAME>
#define TC_IMPL_TC_Bonobo_PrintScissor_0 'B'
</MACRO>
<MACRO>
<NAME>TC_IMPL_TC_Bonobo_PrintScissor_1</NAME>
#define TC_IMPL_TC_Bonobo_PrintScissor_1 'o'
</MACRO>
<MACRO>
<NAME>TC_IMPL_TC_Bonobo_PrintScissor_2</NAME>
#define TC_IMPL_TC_Bonobo_PrintScissor_2 'n'
</MACRO>
<MACRO>
<NAME>TC_IMPL_TC_Bonobo_PrintScissor_3</NAME>
#define TC_IMPL_TC_Bonobo_PrintScissor_3 'o'
</MACRO>
<MACRO>
<NAME>TC_IMPL_TC_Bonobo_PrintScissor_4</NAME>
#define TC_IMPL_TC_Bonobo_PrintScissor_4 'b'
</MACRO>
<MACRO>
<NAME>TC_IMPL_TC_Bonobo_PrintScissor_5</NAME>
#define TC_IMPL_TC_Bonobo_PrintScissor_5 'o'
</MACRO>
<MACRO>
<NAME>TC_Bonobo_PrintScissor</NAME>
#define TC_Bonobo_PrintScissor ((CORBA_TypeCode)&TC_Bonobo_PrintScissor_struct)
</MACRO>
<MACRO>
<NAME>Bonobo_PrintScissor__alloc</NAME>
#define Bonobo_PrintScissor__alloc() ((Bonobo_PrintScissor *)ORBit_small_alloc (TC_Bonobo_PrintScissor))
</MACRO>
<MACRO>
<NAME>Bonobo_PrintScissor__freekids</NAME>
#define Bonobo_PrintScissor__freekids(m,d) ORBit_small_freekids (TC_Bonobo_PrintScissor,(m),(d))
</MACRO>
<MACRO>
<NAME>TC_IMPL_TC_Bonobo_PrintDimensions_0</NAME>
#define TC_IMPL_TC_Bonobo_PrintDimensions_0 'B'
</MACRO>
<MACRO>
<NAME>TC_IMPL_TC_Bonobo_PrintDimensions_1</NAME>
#define TC_IMPL_TC_Bonobo_PrintDimensions_1 'o'
</MACRO>
<MACRO>
<NAME>TC_IMPL_TC_Bonobo_PrintDimensions_2</NAME>
#define TC_IMPL_TC_Bonobo_PrintDimensions_2 'n'
</MACRO>
<MACRO>
<NAME>TC_IMPL_TC_Bonobo_PrintDimensions_3</NAME>
#define TC_IMPL_TC_Bonobo_PrintDimensions_3 'o'
</MACRO>
<MACRO>
<NAME>TC_IMPL_TC_Bonobo_PrintDimensions_4</NAME>
#define TC_IMPL_TC_Bonobo_PrintDimensions_4 'b'
</MACRO>
<MACRO>
<NAME>TC_IMPL_TC_Bonobo_PrintDimensions_5</NAME>
#define TC_IMPL_TC_Bonobo_PrintDimensions_5 'o'
</MACRO>
<MACRO>
<NAME>TC_Bonobo_PrintDimensions</NAME>
#define TC_Bonobo_PrintDimensions ((CORBA_TypeCode)&TC_Bonobo_PrintDimensions_struct)
</MACRO>
<MACRO>
<NAME>Bonobo_PrintDimensions__alloc</NAME>
#define Bonobo_PrintDimensions__alloc() ((Bonobo_PrintDimensions *)ORBit_small_alloc (TC_Bonobo_PrintDimensions))
</MACRO>
<MACRO>
<NAME>Bonobo_PrintDimensions__freekids</NAME>
#define Bonobo_PrintDimensions__freekids(m,d) ORBit_small_freekids (TC_Bonobo_PrintDimensions,(m),(d))
</MACRO>
<MACRO>
<NAME>ORBIT_DECL_Bonobo_Print</NAME>
#define ORBIT_DECL_Bonobo_Print 1
</MACRO>
<MACRO>
<NAME>Bonobo_Print__freekids</NAME>
#define Bonobo_Print__freekids CORBA_Object__freekids
</MACRO>
<TYPEDEF>
<NAME>Bonobo_Print</NAME>
   typedef CORBA_Object Bonobo_Print;
</TYPEDEF>
<VARIABLE>
<NAME>Bonobo_Print__classid</NAME>
   extern CORBA_unsigned_long Bonobo_Print__classid;
</VARIABLE>
<MACRO>
<NAME>TC_IMPL_TC_Bonobo_Print_0</NAME>
#define TC_IMPL_TC_Bonobo_Print_0 'B'
</MACRO>
<MACRO>
<NAME>TC_IMPL_TC_Bonobo_Print_1</NAME>
#define TC_IMPL_TC_Bonobo_Print_1 'o'
</MACRO>
<MACRO>
<NAME>TC_IMPL_TC_Bonobo_Print_2</NAME>
#define TC_IMPL_TC_Bonobo_Print_2 'n'
</MACRO>
<MACRO>
<NAME>TC_IMPL_TC_Bonobo_Print_3</NAME>
#define TC_IMPL_TC_Bonobo_Print_3 'o'
</MACRO>
<MACRO>
<NAME>TC_IMPL_TC_Bonobo_Print_4</NAME>
#define TC_IMPL_TC_Bonobo_Print_4 'b'
</MACRO>
<MACRO>
<NAME>TC_IMPL_TC_Bonobo_Print_5</NAME>
#define TC_IMPL_TC_Bonobo_Print_5 'o'
</MACRO>
<MACRO>
<NAME>TC_Bonobo_Print</NAME>
#define TC_Bonobo_Print ((CORBA_TypeCode)&TC_Bonobo_Print_struct)
</MACRO>
<MACRO>
<NAME>ORBIT_DECL_Bonobo_Clipboard</NAME>
#define ORBIT_DECL_Bonobo_Clipboard 1
</MACRO>
<MACRO>
<NAME>Bonobo_Clipboard__freekids</NAME>
#define Bonobo_Clipboard__freekids CORBA_Object__freekids
</MACRO>
<TYPEDEF>
<NAME>Bonobo_Clipboard</NAME>
   typedef CORBA_Object Bonobo_Clipboard;
</TYPEDEF>
<VARIABLE>
<NAME>Bonobo_Clipboard__classid</NAME>
   extern CORBA_unsigned_long Bonobo_Clipboard__classid;
</VARIABLE>
<MACRO>
<NAME>TC_IMPL_TC_Bonobo_Clipboard_0</NAME>
#define TC_IMPL_TC_Bonobo_Clipboard_0 'B'
</MACRO>
<MACRO>
<NAME>TC_IMPL_TC_Bonobo_Clipboard_1</NAME>
#define TC_IMPL_TC_Bonobo_Clipboard_1 'o'
</MACRO>
<MACRO>
<NAME>TC_IMPL_TC_Bonobo_Clipboard_2</NAME>
#define TC_IMPL_TC_Bonobo_Clipboard_2 'n'
</MACRO>
<MACRO>
<NAME>TC_IMPL_TC_Bonobo_Clipboard_3</NAME>
#define TC_IMPL_TC_Bonobo_Clipboard_3 'o'
</MACRO>
<MACRO>
<NAME>TC_IMPL_TC_Bonobo_Clipboard_4</NAME>
#define TC_IMPL_TC_Bonobo_Clipboard_4 'b'
</MACRO>
<MACRO>
<NAME>TC_IMPL_TC_Bonobo_Clipboard_5</NAME>
#define TC_IMPL_TC_Bonobo_Clipboard_5 'o'
</MACRO>
<MACRO>
<NAME>TC_Bonobo_Clipboard</NAME>
#define TC_Bonobo_Clipboard ((CORBA_TypeCode)&TC_Bonobo_Clipboard_struct)
</MACRO>
<MACRO>
<NAME>ORBIT_DECL_Bonobo_ClipboardStore</NAME>
#define ORBIT_DECL_Bonobo_ClipboardStore 1
</MACRO>
<MACRO>
<NAME>Bonobo_ClipboardStore__freekids</NAME>
#define Bonobo_ClipboardStore__freekids CORBA_Object__freekids
</MACRO>
<TYPEDEF>
<NAME>Bonobo_ClipboardStore</NAME>
   typedef CORBA_Object Bonobo_ClipboardStore;
</TYPEDEF>
<VARIABLE>
<NAME>Bonobo_ClipboardStore__classid</NAME>
   extern CORBA_unsigned_long Bonobo_ClipboardStore__classid;
</VARIABLE>
<MACRO>
<NAME>TC_IMPL_TC_Bonobo_ClipboardStore_0</NAME>
#define TC_IMPL_TC_Bonobo_ClipboardStore_0 'B'
</MACRO>
<MACRO>
<NAME>TC_IMPL_TC_Bonobo_ClipboardStore_1</NAME>
#define TC_IMPL_TC_Bonobo_ClipboardStore_1 'o'
</MACRO>
<MACRO>
<NAME>TC_IMPL_TC_Bonobo_ClipboardStore_2</NAME>
#define TC_IMPL_TC_Bonobo_ClipboardStore_2 'n'
</MACRO>
<MACRO>
<NAME>TC_IMPL_TC_Bonobo_ClipboardStore_3</NAME>
#define TC_IMPL_TC_Bonobo_ClipboardStore_3 'o'
</MACRO>
<MACRO>
<NAME>TC_IMPL_TC_Bonobo_ClipboardStore_4</NAME>
#define TC_IMPL_TC_Bonobo_ClipboardStore_4 'b'
</MACRO>
<MACRO>
<NAME>TC_IMPL_TC_Bonobo_ClipboardStore_5</NAME>
#define TC_IMPL_TC_Bonobo_ClipboardStore_5 'o'
</MACRO>
<MACRO>
<NAME>TC_Bonobo_ClipboardStore</NAME>
#define TC_Bonobo_ClipboardStore ((CORBA_TypeCode)&TC_Bonobo_ClipboardStore_struct)
</MACRO>
<FUNCTION>
<NAME>POA_Bonobo_Moniker__init</NAME>
<RETURNS>void  </RETURNS>
PortableServer_Servant servant,CORBA_Environment * ev
</FUNCTION>
<FUNCTION>
<NAME>POA_Bonobo_Moniker__fini</NAME>
<RETURNS>void  </RETURNS>
PortableServer_Servant servant,CORBA_Environment * ev
</FUNCTION>
<FUNCTION>
<NAME>POA_Bonobo_MonikerExtender__init</NAME>
<RETURNS>void  </RETURNS>
PortableServer_Servantservant,CORBA_Environment * ev
</FUNCTION>
<FUNCTION>
<NAME>POA_Bonobo_MonikerExtender__fini</NAME>
<RETURNS>void  </RETURNS>
PortableServer_Servantservant,CORBA_Environment * ev
</FUNCTION>
<FUNCTION>
<NAME>POA_Bonobo_Stream__init</NAME>
<RETURNS>void  </RETURNS>
PortableServer_Servant servant,CORBA_Environment * ev
</FUNCTION>
<FUNCTION>
<NAME>POA_Bonobo_Stream__fini</NAME>
<RETURNS>void  </RETURNS>
PortableServer_Servant servant,CORBA_Environment * ev
</FUNCTION>
<FUNCTION>
<NAME>POA_Bonobo_Storage__init</NAME>
<RETURNS>void  </RETURNS>
PortableServer_Servant servant,CORBA_Environment * ev
</FUNCTION>
<FUNCTION>
<NAME>POA_Bonobo_Storage__fini</NAME>
<RETURNS>void  </RETURNS>
PortableServer_Servant servant,CORBA_Environment * ev
</FUNCTION>
<FUNCTION>
<NAME>POA_Bonobo_MonikerContext__init</NAME>
<RETURNS>void  </RETURNS>
PortableServer_Servant servant,CORBA_Environment * ev
</FUNCTION>
<FUNCTION>
<NAME>POA_Bonobo_MonikerContext__fini</NAME>
<RETURNS>void  </RETURNS>
PortableServer_Servant servant,CORBA_Environment * ev
</FUNCTION>
<FUNCTION>
<NAME>POA_Bonobo_RunningContext__init</NAME>
<RETURNS>void  </RETURNS>
PortableServer_Servant servant,CORBA_Environment * ev
</FUNCTION>
<FUNCTION>
<NAME>POA_Bonobo_RunningContext__fini</NAME>
<RETURNS>void  </RETURNS>
PortableServer_Servant servant,CORBA_Environment * ev
</FUNCTION>
<FUNCTION>
<NAME>POA_Bonobo_Persist__init</NAME>
<RETURNS>void  </RETURNS>
PortableServer_Servant servant,CORBA_Environment * ev
</FUNCTION>
<FUNCTION>
<NAME>POA_Bonobo_Persist__fini</NAME>
<RETURNS>void  </RETURNS>
PortableServer_Servant servant,CORBA_Environment * ev
</FUNCTION>
<FUNCTION>
<NAME>POA_Bonobo_PersistFile__init</NAME>
<RETURNS>void  </RETURNS>
PortableServer_Servant servant,CORBA_Environment * ev
</FUNCTION>
<FUNCTION>
<NAME>POA_Bonobo_PersistFile__fini</NAME>
<RETURNS>void  </RETURNS>
PortableServer_Servant servant,CORBA_Environment * ev
</FUNCTION>
<FUNCTION>
<NAME>POA_Bonobo_PersistStorage__init</NAME>
<RETURNS>void  </RETURNS>
PortableServer_Servant servant,CORBA_Environment * ev
</FUNCTION>
<FUNCTION>
<NAME>POA_Bonobo_PersistStorage__fini</NAME>
<RETURNS>void  </RETURNS>
PortableServer_Servant servant,CORBA_Environment * ev
</FUNCTION>
<FUNCTION>
<NAME>POA_Bonobo_PersistStream__init</NAME>
<RETURNS>void  </RETURNS>
PortableServer_Servant servant,CORBA_Environment * ev
</FUNCTION>
<FUNCTION>
<NAME>POA_Bonobo_PersistStream__fini</NAME>
<RETURNS>void  </RETURNS>
PortableServer_Servant servant,CORBA_Environment * ev
</FUNCTION>
<FUNCTION>
<NAME>POA_Bonobo_Listener__init</NAME>
<RETURNS>void  </RETURNS>
PortableServer_Servant servant,CORBA_Environment * ev
</FUNCTION>
<FUNCTION>
<NAME>POA_Bonobo_Listener__fini</NAME>
<RETURNS>void  </RETURNS>
PortableServer_Servant servant,CORBA_Environment * ev
</FUNCTION>
<FUNCTION>
<NAME>POA_Bonobo_EventSource__init</NAME>
<RETURNS>void  </RETURNS>
PortableServer_Servant servant,CORBA_Environment * ev
</FUNCTION>
<FUNCTION>
<NAME>POA_Bonobo_EventSource__fini</NAME>
<RETURNS>void  </RETURNS>
PortableServer_Servant servant,CORBA_Environment * ev
</FUNCTION>
<FUNCTION>
<NAME>POA_Bonobo_UIComponent__init</NAME>
<RETURNS>void  </RETURNS>
PortableServer_Servant servant,CORBA_Environment * ev
</FUNCTION>
<FUNCTION>
<NAME>POA_Bonobo_UIComponent__fini</NAME>
<RETURNS>void  </RETURNS>
PortableServer_Servant servant,CORBA_Environment * ev
</FUNCTION>
<FUNCTION>
<NAME>POA_Bonobo_UIContainer__init</NAME>
<RETURNS>void  </RETURNS>
PortableServer_Servant servant,CORBA_Environment * ev
</FUNCTION>
<FUNCTION>
<NAME>POA_Bonobo_UIContainer__fini</NAME>
<RETURNS>void  </RETURNS>
PortableServer_Servant servant,CORBA_Environment * ev
</FUNCTION>
<FUNCTION>
<NAME>POA_Bonobo_PropertyBag__init</NAME>
<RETURNS>void  </RETURNS>
PortableServer_Servant servant,CORBA_Environment * ev
</FUNCTION>
<FUNCTION>
<NAME>POA_Bonobo_PropertyBag__fini</NAME>
<RETURNS>void  </RETURNS>
PortableServer_Servant servant,CORBA_Environment * ev
</FUNCTION>
<FUNCTION>
<NAME>POA_Bonobo_ConfigDatabase__init</NAME>
<RETURNS>void  </RETURNS>
PortableServer_Servant servant,CORBA_Environment * ev
</FUNCTION>
<FUNCTION>
<NAME>POA_Bonobo_ConfigDatabase__fini</NAME>
<RETURNS>void  </RETURNS>
PortableServer_Servant servant,CORBA_Environment * ev
</FUNCTION>
<FUNCTION>
<NAME>POA_Bonobo_ControlFrame__init</NAME>
<RETURNS>void  </RETURNS>
PortableServer_Servant servant,CORBA_Environment * ev
</FUNCTION>
<FUNCTION>
<NAME>POA_Bonobo_ControlFrame__fini</NAME>
<RETURNS>void  </RETURNS>
PortableServer_Servant servant,CORBA_Environment * ev
</FUNCTION>
<FUNCTION>
<NAME>POA_Bonobo_Control__init</NAME>
<RETURNS>void  </RETURNS>
PortableServer_Servant servant,CORBA_Environment * ev
</FUNCTION>
<FUNCTION>
<NAME>POA_Bonobo_Control__fini</NAME>
<RETURNS>void  </RETURNS>
PortableServer_Servant servant,CORBA_Environment * ev
</FUNCTION>
<FUNCTION>
<NAME>POA_Bonobo_PropertyControl__init</NAME>
<RETURNS>void  </RETURNS>
PortableServer_Servantservant,CORBA_Environment * ev
</FUNCTION>
<FUNCTION>
<NAME>POA_Bonobo_PropertyControl__fini</NAME>
<RETURNS>void  </RETURNS>
PortableServer_Servantservant,CORBA_Environment * ev
</FUNCTION>
<FUNCTION>
<NAME>POA_Bonobo_ZoomableFrame__init</NAME>
<RETURNS>void  </RETURNS>
PortableServer_Servant servant,CORBA_Environment * ev
</FUNCTION>
<FUNCTION>
<NAME>POA_Bonobo_ZoomableFrame__fini</NAME>
<RETURNS>void  </RETURNS>
PortableServer_Servant servant,CORBA_Environment * ev
</FUNCTION>
<FUNCTION>
<NAME>POA_Bonobo_Zoomable__init</NAME>
<RETURNS>void  </RETURNS>
PortableServer_Servant servant,CORBA_Environment * ev
</FUNCTION>
<FUNCTION>
<NAME>POA_Bonobo_Zoomable__fini</NAME>
<RETURNS>void  </RETURNS>
PortableServer_Servant servant,CORBA_Environment * ev
</FUNCTION>
<FUNCTION>
<NAME>POA_Bonobo_ItemContainer__init</NAME>
<RETURNS>void  </RETURNS>
PortableServer_Servant servant,CORBA_Environment * ev
</FUNCTION>
<FUNCTION>
<NAME>POA_Bonobo_ItemContainer__fini</NAME>
<RETURNS>void  </RETURNS>
PortableServer_Servant servant,CORBA_Environment * ev
</FUNCTION>
<FUNCTION>
<NAME>POA_Bonobo_Canvas_Component__init</NAME>
<RETURNS>void  </RETURNS>
PortableServer_Servantservant,CORBA_Environment * ev
</FUNCTION>
<FUNCTION>
<NAME>POA_Bonobo_Canvas_Component__fini</NAME>
<RETURNS>void  </RETURNS>
PortableServer_Servantservant,CORBA_Environment * ev
</FUNCTION>
<FUNCTION>
<NAME>POA_Bonobo_Canvas_ComponentProxy__init</NAME>
<RETURNS>void  </RETURNS>
PortableServer_Servantservant,CORBA_Environment * ev
</FUNCTION>
<FUNCTION>
<NAME>POA_Bonobo_Canvas_ComponentProxy__fini</NAME>
<RETURNS>void  </RETURNS>
PortableServer_Servantservant,CORBA_Environment * ev
</FUNCTION>
<FUNCTION>
<NAME>POA_Bonobo_ControlFactory__init</NAME>
<RETURNS>void  </RETURNS>
PortableServer_Servant servant,CORBA_Environment * ev
</FUNCTION>
<FUNCTION>
<NAME>POA_Bonobo_ControlFactory__fini</NAME>
<RETURNS>void  </RETURNS>
PortableServer_Servant servant,CORBA_Environment * ev
</FUNCTION>
<FUNCTION>
<NAME>POA_Bonobo_CanvasComponentFactory__init</NAME>
<RETURNS>void  </RETURNS>
PortableServer_Servantservant,CORBA_Environment *ev
</FUNCTION>
<FUNCTION>
<NAME>POA_Bonobo_CanvasComponentFactory__fini</NAME>
<RETURNS>void  </RETURNS>
PortableServer_Servantservant,CORBA_Environment *ev
</FUNCTION>
<FUNCTION>
<NAME>POA_Bonobo_Embeddable__init</NAME>
<RETURNS>void  </RETURNS>
PortableServer_Servant servant,CORBA_Environment * ev
</FUNCTION>
<FUNCTION>
<NAME>POA_Bonobo_Embeddable__fini</NAME>
<RETURNS>void  </RETURNS>
PortableServer_Servant servant,CORBA_Environment * ev
</FUNCTION>
<FUNCTION>
<NAME>POA_Bonobo_Print__init</NAME>
<RETURNS>void  </RETURNS>
PortableServer_Servant servant,CORBA_Environment * ev
</FUNCTION>
<FUNCTION>
<NAME>POA_Bonobo_Print__fini</NAME>
<RETURNS>void  </RETURNS>
PortableServer_Servant servant,CORBA_Environment * ev
</FUNCTION>
<FUNCTION>
<NAME>POA_Bonobo_Clipboard__init</NAME>
<RETURNS>void  </RETURNS>
PortableServer_Servant servant,CORBA_Environment * ev
</FUNCTION>
<FUNCTION>
<NAME>POA_Bonobo_Clipboard__fini</NAME>
<RETURNS>void  </RETURNS>
PortableServer_Servant servant,CORBA_Environment * ev
</FUNCTION>
<FUNCTION>
<NAME>POA_Bonobo_ClipboardStore__init</NAME>
<RETURNS>void  </RETURNS>
PortableServer_Servant servant,CORBA_Environment * ev
</FUNCTION>
<FUNCTION>
<NAME>POA_Bonobo_ClipboardStore__fini</NAME>
<RETURNS>void  </RETURNS>
PortableServer_Servant servant,CORBA_Environment * ev
</FUNCTION>
<MACRO>
<NAME>Bonobo_Moniker_ref</NAME>
#define Bonobo_Moniker_ref Bonobo_Unknown_ref
</MACRO>
<MACRO>
<NAME>Bonobo_Moniker_unref</NAME>
#define Bonobo_Moniker_unref Bonobo_Unknown_unref
</MACRO>
<MACRO>
<NAME>Bonobo_Moniker_queryInterface</NAME>
#define Bonobo_Moniker_queryInterface Bonobo_Unknown_queryInterface
</MACRO>
<FUNCTION>
<NAME>Bonobo_Moniker_getParent</NAME>
<RETURNS>Bonobo_Moniker  </RETURNS>
Bonobo_Moniker _obj,CORBA_Environment * ev
</FUNCTION>
<FUNCTION>
<NAME>Bonobo_Moniker_setParent</NAME>
<RETURNS>void  </RETURNS>
Bonobo_Moniker _obj,const Bonobo_Moniker parent,CORBA_Environment * ev
</FUNCTION>
<FUNCTION>
<NAME>Bonobo_Moniker_getName</NAME>
<RETURNS>CORBA_string  </RETURNS>
Bonobo_Moniker _obj,CORBA_Environment * ev
</FUNCTION>
<FUNCTION>
<NAME>Bonobo_Moniker_setName</NAME>
<RETURNS>void  </RETURNS>
Bonobo_Moniker _obj, const CORBA_char * name,CORBA_Environment * ev
</FUNCTION>
<FUNCTION>
<NAME>Bonobo_Moniker_resolve</NAME>
<RETURNS>Bonobo_Unknown  </RETURNS>
Bonobo_Moniker _obj,const Bonobo_ResolveOptions *options,const CORBA_char *requestedInterface,CORBA_Environment * ev
</FUNCTION>
<FUNCTION>
<NAME>Bonobo_Moniker_equal</NAME>
<RETURNS>CORBA_long  </RETURNS>
Bonobo_Moniker _obj,const CORBA_char * name,CORBA_Environment * ev
</FUNCTION>
<MACRO>
<NAME>Bonobo_MonikerExtender_ref</NAME>
#define Bonobo_MonikerExtender_ref Bonobo_Unknown_ref
</MACRO>
<MACRO>
<NAME>Bonobo_MonikerExtender_unref</NAME>
#define Bonobo_MonikerExtender_unref Bonobo_Unknown_unref
</MACRO>
<MACRO>
<NAME>Bonobo_MonikerExtender_queryInterface</NAME>
#define Bonobo_MonikerExtender_queryInterface Bonobo_Unknown_queryInterface
</MACRO>
<FUNCTION>
<NAME>Bonobo_MonikerExtender_resolve</NAME>
<RETURNS>Bonobo_Unknown  </RETURNS>
Bonobo_MonikerExtender _obj,const Bonobo_Moniker m,const Bonobo_ResolveOptions *options,const CORBA_char * name,const CORBA_char *requestedInterface,CORBA_Environment * ev
</FUNCTION>
<MACRO>
<NAME>Bonobo_Stream_ref</NAME>
#define Bonobo_Stream_ref Bonobo_Unknown_ref
</MACRO>
<MACRO>
<NAME>Bonobo_Stream_unref</NAME>
#define Bonobo_Stream_unref Bonobo_Unknown_unref
</MACRO>
<MACRO>
<NAME>Bonobo_Stream_queryInterface</NAME>
#define Bonobo_Stream_queryInterface Bonobo_Unknown_queryInterface
</MACRO>
<FUNCTION>
<NAME>Bonobo_Stream_getInfo</NAME>
<RETURNS>Bonobo_StorageInfo  *</RETURNS>
Bonobo_Stream _obj,const Bonobo_StorageInfoFieldsmask, CORBA_Environment * ev
</FUNCTION>
<FUNCTION>
<NAME>Bonobo_Stream_setInfo</NAME>
<RETURNS>void  </RETURNS>
Bonobo_Stream _obj,const Bonobo_StorageInfo * info,const Bonobo_StorageInfoFields mask,CORBA_Environment * ev
</FUNCTION>
<FUNCTION>
<NAME>Bonobo_Stream_read</NAME>
<RETURNS>void  </RETURNS>
Bonobo_Stream _obj, const CORBA_long count,Bonobo_Stream_iobuf ** buffer,CORBA_Environment * ev
</FUNCTION>
<FUNCTION>
<NAME>Bonobo_Stream_write</NAME>
<RETURNS>void  </RETURNS>
Bonobo_Stream _obj,const Bonobo_Stream_iobuf * buffer,CORBA_Environment * ev
</FUNCTION>
<FUNCTION>
<NAME>Bonobo_Stream_seek</NAME>
<RETURNS>CORBA_long  </RETURNS>
Bonobo_Stream _obj, const CORBA_long offset,const Bonobo_Stream_SeekType whence,CORBA_Environment * ev
</FUNCTION>
<FUNCTION>
<NAME>Bonobo_Stream_truncate</NAME>
<RETURNS>void  </RETURNS>
Bonobo_Stream _obj, const CORBA_long length,CORBA_Environment * ev
</FUNCTION>
<FUNCTION>
<NAME>Bonobo_Stream_commit</NAME>
<RETURNS>void  </RETURNS>
Bonobo_Stream _obj, CORBA_Environment * ev
</FUNCTION>
<FUNCTION>
<NAME>Bonobo_Stream_revert</NAME>
<RETURNS>void  </RETURNS>
Bonobo_Stream _obj, CORBA_Environment * ev
</FUNCTION>
<MACRO>
<NAME>Bonobo_Storage_ref</NAME>
#define Bonobo_Storage_ref Bonobo_Unknown_ref
</MACRO>
<MACRO>
<NAME>Bonobo_Storage_unref</NAME>
#define Bonobo_Storage_unref Bonobo_Unknown_unref
</MACRO>
<MACRO>
<NAME>Bonobo_Storage_queryInterface</NAME>
#define Bonobo_Storage_queryInterface Bonobo_Unknown_queryInterface
</MACRO>
<FUNCTION>
<NAME>Bonobo_Storage_getInfo</NAME>
<RETURNS>Bonobo_StorageInfo  *</RETURNS>
Bonobo_Storage _obj,const CORBA_char * path,const Bonobo_StorageInfoFieldsmask, CORBA_Environment * ev
</FUNCTION>
<FUNCTION>
<NAME>Bonobo_Storage_setInfo</NAME>
<RETURNS>void  </RETURNS>
Bonobo_Storage _obj, const CORBA_char * path,const Bonobo_StorageInfo * info,const Bonobo_StorageInfoFields mask,CORBA_Environment * ev
</FUNCTION>
<FUNCTION>
<NAME>Bonobo_Storage_openStream</NAME>
<RETURNS>Bonobo_Stream  </RETURNS>
Bonobo_Storage _obj,const CORBA_char * path,const Bonobo_Storage_OpenMode mode,CORBA_Environment * ev
</FUNCTION>
<FUNCTION>
<NAME>Bonobo_Storage_openStorage</NAME>
<RETURNS>Bonobo_Storage  </RETURNS>
Bonobo_Storage _obj,const CORBA_char * path,const Bonobo_Storage_OpenModemode, CORBA_Environment * ev
</FUNCTION>
<FUNCTION>
<NAME>Bonobo_Storage_copyTo</NAME>
<RETURNS>void  </RETURNS>
Bonobo_Storage _obj,const Bonobo_Storage target,CORBA_Environment * ev
</FUNCTION>
<FUNCTION>
<NAME>Bonobo_Storage_listContents</NAME>
<RETURNS>Bonobo_Storage_DirectoryList  *</RETURNS>
Bonobo_Storage_obj,const CORBA_char* path,constBonobo_StorageInfoFieldsmask,CORBA_Environment* ev
</FUNCTION>
<FUNCTION>
<NAME>Bonobo_Storage_erase</NAME>
<RETURNS>void  </RETURNS>
Bonobo_Storage _obj, const CORBA_char * path,CORBA_Environment * ev
</FUNCTION>
<FUNCTION>
<NAME>Bonobo_Storage_rename</NAME>
<RETURNS>void  </RETURNS>
Bonobo_Storage _obj,const CORBA_char * path_name,const CORBA_char * new_path_name,CORBA_Environment * ev
</FUNCTION>
<FUNCTION>
<NAME>Bonobo_Storage_commit</NAME>
<RETURNS>void  </RETURNS>
Bonobo_Storage _obj, CORBA_Environment * ev
</FUNCTION>
<FUNCTION>
<NAME>Bonobo_Storage_revert</NAME>
<RETURNS>void  </RETURNS>
Bonobo_Storage _obj, CORBA_Environment * ev
</FUNCTION>
<MACRO>
<NAME>Bonobo_MonikerContext_ref</NAME>
#define Bonobo_MonikerContext_ref Bonobo_Unknown_ref
</MACRO>
<MACRO>
<NAME>Bonobo_MonikerContext_unref</NAME>
#define Bonobo_MonikerContext_unref Bonobo_Unknown_unref
</MACRO>
<MACRO>
<NAME>Bonobo_MonikerContext_queryInterface</NAME>
#define Bonobo_MonikerContext_queryInterface Bonobo_Unknown_queryInterface
</MACRO>
<FUNCTION>
<NAME>Bonobo_MonikerContext_getObject</NAME>
<RETURNS>Bonobo_Unknown  </RETURNS>
Bonobo_MonikerContext _obj,const CORBA_char * name,const CORBA_char * repoId,CORBA_Environment * ev
</FUNCTION>
<FUNCTION>
<NAME>Bonobo_MonikerContext_createFromName</NAME>
<RETURNS>Bonobo_Moniker  </RETURNS>
Bonobo_MonikerContext_obj,const CORBA_char *name,CORBA_Environment *ev
</FUNCTION>
<FUNCTION>
<NAME>Bonobo_MonikerContext_getExtender</NAME>
<RETURNS>Bonobo_MonikerExtender</RETURNS>
Bonobo_MonikerContext _obj,const CORBA_char * monikerPrefix,const CORBA_char * interfaceId,CORBA_Environment * ev
</FUNCTION>
<MACRO>
<NAME>Bonobo_RunningContext_ref</NAME>
#define Bonobo_RunningContext_ref Bonobo_Unknown_ref
</MACRO>
<MACRO>
<NAME>Bonobo_RunningContext_unref</NAME>
#define Bonobo_RunningContext_unref Bonobo_Unknown_unref
</MACRO>
<MACRO>
<NAME>Bonobo_RunningContext_queryInterface</NAME>
#define Bonobo_RunningContext_queryInterface Bonobo_Unknown_queryInterface
</MACRO>
<FUNCTION>
<NAME>Bonobo_RunningContext_addObject</NAME>
<RETURNS>void  </RETURNS>
Bonobo_RunningContext _obj,const CORBA_Object obj,CORBA_Environment * ev
</FUNCTION>
<FUNCTION>
<NAME>Bonobo_RunningContext_removeObject</NAME>
<RETURNS>void  </RETURNS>
Bonobo_RunningContext _obj,const CORBA_Object obj,CORBA_Environment * ev
</FUNCTION>
<FUNCTION>
<NAME>Bonobo_RunningContext_addKey</NAME>
<RETURNS>void  </RETURNS>
Bonobo_RunningContext _obj,const CORBA_char * key,CORBA_Environment * ev
</FUNCTION>
<FUNCTION>
<NAME>Bonobo_RunningContext_removeKey</NAME>
<RETURNS>void  </RETURNS>
Bonobo_RunningContext _obj,const CORBA_char * key,CORBA_Environment * ev
</FUNCTION>
<FUNCTION>
<NAME>Bonobo_RunningContext_atExitUnref</NAME>
<RETURNS>void  </RETURNS>
Bonobo_RunningContext _obj,const CORBA_Object obj,CORBA_Environment * ev
</FUNCTION>
<MACRO>
<NAME>Bonobo_Persist_ref</NAME>
#define Bonobo_Persist_ref Bonobo_Unknown_ref
</MACRO>
<MACRO>
<NAME>Bonobo_Persist_unref</NAME>
#define Bonobo_Persist_unref Bonobo_Unknown_unref
</MACRO>
<MACRO>
<NAME>Bonobo_Persist_queryInterface</NAME>
#define Bonobo_Persist_queryInterface Bonobo_Unknown_queryInterface
</MACRO>
<FUNCTION>
<NAME>Bonobo_Persist_getIId</NAME>
<RETURNS>Bonobo_Persist_IID  </RETURNS>
Bonobo_Persist _obj,CORBA_Environment * ev
</FUNCTION>
<FUNCTION>
<NAME>Bonobo_Persist_isDirty</NAME>
<RETURNS>CORBA_boolean  </RETURNS>
Bonobo_Persist _obj,CORBA_Environment * ev
</FUNCTION>
<MACRO>
<NAME>Bonobo_PersistFile_ref</NAME>
#define Bonobo_PersistFile_ref Bonobo_Unknown_ref
</MACRO>
<MACRO>
<NAME>Bonobo_PersistFile_unref</NAME>
#define Bonobo_PersistFile_unref Bonobo_Unknown_unref
</MACRO>
<MACRO>
<NAME>Bonobo_PersistFile_queryInterface</NAME>
#define Bonobo_PersistFile_queryInterface Bonobo_Unknown_queryInterface
</MACRO>
<MACRO>
<NAME>Bonobo_PersistFile_getContentTypes</NAME>
#define Bonobo_PersistFile_getContentTypes Bonobo_Persist_getContentTypes
</MACRO>
<MACRO>
<NAME>Bonobo_PersistFile_getIId</NAME>
#define Bonobo_PersistFile_getIId Bonobo_Persist_getIId
</MACRO>
<MACRO>
<NAME>Bonobo_PersistFile_isDirty</NAME>
#define Bonobo_PersistFile_isDirty Bonobo_Persist_isDirty
</MACRO>
<FUNCTION>
<NAME>Bonobo_PersistFile_load</NAME>
<RETURNS>void  </RETURNS>
Bonobo_PersistFile _obj,const CORBA_char * path,CORBA_Environment * ev
</FUNCTION>
<FUNCTION>
<NAME>Bonobo_PersistFile_save</NAME>
<RETURNS>void  </RETURNS>
Bonobo_PersistFile _obj,const CORBA_char * path,CORBA_Environment * ev
</FUNCTION>
<FUNCTION>
<NAME>Bonobo_PersistFile_getCurrentFile</NAME>
<RETURNS>CORBA_string  </RETURNS>
Bonobo_PersistFile _obj,CORBA_Environment * ev
</FUNCTION>
<MACRO>
<NAME>Bonobo_PersistStorage_ref</NAME>
#define Bonobo_PersistStorage_ref Bonobo_Unknown_ref
</MACRO>
<MACRO>
<NAME>Bonobo_PersistStorage_unref</NAME>
#define Bonobo_PersistStorage_unref Bonobo_Unknown_unref
</MACRO>
<MACRO>
<NAME>Bonobo_PersistStorage_queryInterface</NAME>
#define Bonobo_PersistStorage_queryInterface Bonobo_Unknown_queryInterface
</MACRO>
<MACRO>
<NAME>Bonobo_PersistStorage_getContentTypes</NAME>
#define Bonobo_PersistStorage_getContentTypes Bonobo_Persist_getContentTypes
</MACRO>
<MACRO>
<NAME>Bonobo_PersistStorage_getIId</NAME>
#define Bonobo_PersistStorage_getIId Bonobo_Persist_getIId
</MACRO>
<MACRO>
<NAME>Bonobo_PersistStorage_isDirty</NAME>
#define Bonobo_PersistStorage_isDirty Bonobo_Persist_isDirty
</MACRO>
<FUNCTION>
<NAME>Bonobo_PersistStorage_load</NAME>
<RETURNS>void  </RETURNS>
Bonobo_PersistStorage _obj,const Bonobo_Storage storage,CORBA_Environment * ev
</FUNCTION>
<FUNCTION>
<NAME>Bonobo_PersistStorage_save</NAME>
<RETURNS>void  </RETURNS>
Bonobo_PersistStorage _obj,const Bonobo_Storage storage,const CORBA_boolean same_as_loaded,CORBA_Environment * ev
</FUNCTION>
<MACRO>
<NAME>Bonobo_PersistStream_ref</NAME>
#define Bonobo_PersistStream_ref Bonobo_Unknown_ref
</MACRO>
<MACRO>
<NAME>Bonobo_PersistStream_unref</NAME>
#define Bonobo_PersistStream_unref Bonobo_Unknown_unref
</MACRO>
<MACRO>
<NAME>Bonobo_PersistStream_queryInterface</NAME>
#define Bonobo_PersistStream_queryInterface Bonobo_Unknown_queryInterface
</MACRO>
<MACRO>
<NAME>Bonobo_PersistStream_getContentTypes</NAME>
#define Bonobo_PersistStream_getContentTypes Bonobo_Persist_getContentTypes
</MACRO>
<MACRO>
<NAME>Bonobo_PersistStream_getIId</NAME>
#define Bonobo_PersistStream_getIId Bonobo_Persist_getIId
</MACRO>
<MACRO>
<NAME>Bonobo_PersistStream_isDirty</NAME>
#define Bonobo_PersistStream_isDirty Bonobo_Persist_isDirty
</MACRO>
<FUNCTION>
<NAME>Bonobo_PersistStream_load</NAME>
<RETURNS>void  </RETURNS>
Bonobo_PersistStream _obj,const Bonobo_Stream stream,const CORBA_char * type,CORBA_Environment * ev
</FUNCTION>
<FUNCTION>
<NAME>Bonobo_PersistStream_save</NAME>
<RETURNS>void  </RETURNS>
Bonobo_PersistStream _obj,const Bonobo_Stream stream,const CORBA_char * type,CORBA_Environment * ev
</FUNCTION>
<MACRO>
<NAME>Bonobo_Listener_ref</NAME>
#define Bonobo_Listener_ref Bonobo_Unknown_ref
</MACRO>
<MACRO>
<NAME>Bonobo_Listener_unref</NAME>
#define Bonobo_Listener_unref Bonobo_Unknown_unref
</MACRO>
<MACRO>
<NAME>Bonobo_Listener_queryInterface</NAME>
#define Bonobo_Listener_queryInterface Bonobo_Unknown_queryInterface
</MACRO>
<FUNCTION>
<NAME>Bonobo_Listener_event</NAME>
<RETURNS>void  </RETURNS>
Bonobo_Listener _obj,const CORBA_char * event_name,const CORBA_any * args, CORBA_Environment * ev
</FUNCTION>
<MACRO>
<NAME>Bonobo_EventSource_ref</NAME>
#define Bonobo_EventSource_ref Bonobo_Unknown_ref
</MACRO>
<MACRO>
<NAME>Bonobo_EventSource_unref</NAME>
#define Bonobo_EventSource_unref Bonobo_Unknown_unref
</MACRO>
<MACRO>
<NAME>Bonobo_EventSource_queryInterface</NAME>
#define Bonobo_EventSource_queryInterface Bonobo_Unknown_queryInterface
</MACRO>
<FUNCTION>
<NAME>Bonobo_EventSource_addListener</NAME>
<RETURNS>void  </RETURNS>
Bonobo_EventSource _obj,const Bonobo_Listener l,CORBA_Environment * ev
</FUNCTION>
<FUNCTION>
<NAME>Bonobo_EventSource_addListenerWithMask</NAME>
<RETURNS>void  </RETURNS>
Bonobo_EventSource _obj,const Bonobo_Listener l,const CORBA_char * event_mask,CORBA_Environment * ev
</FUNCTION>
<FUNCTION>
<NAME>Bonobo_EventSource_removeListener</NAME>
<RETURNS>void  </RETURNS>
Bonobo_EventSource _obj,const Bonobo_Listener l,CORBA_Environment * ev
</FUNCTION>
<MACRO>
<NAME>Bonobo_UIComponent_ref</NAME>
#define Bonobo_UIComponent_ref Bonobo_Unknown_ref
</MACRO>
<MACRO>
<NAME>Bonobo_UIComponent_unref</NAME>
#define Bonobo_UIComponent_unref Bonobo_Unknown_unref
</MACRO>
<MACRO>
<NAME>Bonobo_UIComponent_queryInterface</NAME>
#define Bonobo_UIComponent_queryInterface Bonobo_Unknown_queryInterface
</MACRO>
<FUNCTION>
<NAME>Bonobo_UIComponent_setContainer</NAME>
<RETURNS>void  </RETURNS>
Bonobo_UIComponent _obj,const Bonobo_UIContainer container,CORBA_Environment * ev
</FUNCTION>
<FUNCTION>
<NAME>Bonobo_UIComponent_unsetContainer</NAME>
<RETURNS>void  </RETURNS>
Bonobo_UIComponent _obj,CORBA_Environment * ev
</FUNCTION>
<FUNCTION>
<NAME>Bonobo_UIComponent__get_name</NAME>
<RETURNS>CORBA_string  </RETURNS>
Bonobo_UIComponent _obj,CORBA_Environment * ev
</FUNCTION>
<FUNCTION>
<NAME>Bonobo_UIComponent_describeVerbs</NAME>
<RETURNS>CORBA_string  </RETURNS>
Bonobo_UIComponent _obj,CORBA_Environment * ev
</FUNCTION>
<FUNCTION>
<NAME>Bonobo_UIComponent_execVerb</NAME>
<RETURNS>void  </RETURNS>
Bonobo_UIComponent _obj,const CORBA_char * cname,CORBA_Environment * ev
</FUNCTION>
<FUNCTION>
<NAME>Bonobo_UIComponent_uiEvent</NAME>
<RETURNS>void  </RETURNS>
Bonobo_UIComponent _obj,const CORBA_char * id,const Bonobo_UIComponent_EventType type,const CORBA_char * state,CORBA_Environment * ev
</FUNCTION>
<FUNCTION>
<NAME>Bonobo_UIComponent_unImplemented</NAME>
<RETURNS>void  </RETURNS>
Bonobo_UIComponent _obj,CORBA_Environment * ev
</FUNCTION>
<FUNCTION>
<NAME>Bonobo_UIComponent_unImplemented2</NAME>
<RETURNS>void  </RETURNS>
Bonobo_UIComponent _obj,CORBA_Environment * ev
</FUNCTION>
<MACRO>
<NAME>Bonobo_UIContainer_ref</NAME>
#define Bonobo_UIContainer_ref Bonobo_Unknown_ref
</MACRO>
<MACRO>
<NAME>Bonobo_UIContainer_unref</NAME>
#define Bonobo_UIContainer_unref Bonobo_Unknown_unref
</MACRO>
<MACRO>
<NAME>Bonobo_UIContainer_queryInterface</NAME>
#define Bonobo_UIContainer_queryInterface Bonobo_Unknown_queryInterface
</MACRO>
<FUNCTION>
<NAME>Bonobo_UIContainer_registerComponent</NAME>
<RETURNS>void  </RETURNS>
Bonobo_UIContainer _obj,const CORBA_char *component_name,const Bonobo_UIComponentcomponent,CORBA_Environment * ev
</FUNCTION>
<FUNCTION>
<NAME>Bonobo_UIContainer_deregisterComponent</NAME>
<RETURNS>void  </RETURNS>
Bonobo_UIContainer _obj,const CORBA_char *component_name,CORBA_Environment * ev
</FUNCTION>
<FUNCTION>
<NAME>Bonobo_UIContainer_freeze</NAME>
<RETURNS>void  </RETURNS>
Bonobo_UIContainer _obj,CORBA_Environment * ev
</FUNCTION>
<FUNCTION>
<NAME>Bonobo_UIContainer_thaw</NAME>
<RETURNS>void  </RETURNS>
Bonobo_UIContainer _obj,CORBA_Environment * ev
</FUNCTION>
<FUNCTION>
<NAME>Bonobo_UIContainer_setAttr</NAME>
<RETURNS>void  </RETURNS>
Bonobo_UIContainer _obj,const CORBA_char * path,const CORBA_char * attr,const CORBA_char * value,const CORBA_char * component_name,CORBA_Environment * ev
</FUNCTION>
<FUNCTION>
<NAME>Bonobo_UIContainer_getAttr</NAME>
<RETURNS>CORBA_string  </RETURNS>
Bonobo_UIContainer _obj,const CORBA_char * path,const CORBA_char * attr,CORBA_Environment * ev
</FUNCTION>
<FUNCTION>
<NAME>Bonobo_UIContainer_setNode</NAME>
<RETURNS>void  </RETURNS>
Bonobo_UIContainer _obj,const CORBA_char * path,const CORBA_char * xml,const CORBA_char * component_name,CORBA_Environment * ev
</FUNCTION>
<FUNCTION>
<NAME>Bonobo_UIContainer_getNode</NAME>
<RETURNS>CORBA_string  </RETURNS>
Bonobo_UIContainer _obj,const CORBA_char * path,const CORBA_boolean nodeOnly,CORBA_Environment * ev
</FUNCTION>
<FUNCTION>
<NAME>Bonobo_UIContainer_removeNode</NAME>
<RETURNS>void  </RETURNS>
Bonobo_UIContainer _obj,const CORBA_char * path,const CORBA_char * by_component_name,CORBA_Environment * ev
</FUNCTION>
<FUNCTION>
<NAME>Bonobo_UIContainer_exists</NAME>
<RETURNS>CORBA_boolean  </RETURNS>
Bonobo_UIContainer _obj,const CORBA_char * path,CORBA_Environment * ev
</FUNCTION>
<FUNCTION>
<NAME>Bonobo_UIContainer_execVerb</NAME>
<RETURNS>void  </RETURNS>
Bonobo_UIContainer _obj,const CORBA_char * cname,CORBA_Environment * ev
</FUNCTION>
<FUNCTION>
<NAME>Bonobo_UIContainer_uiEvent</NAME>
<RETURNS>void  </RETURNS>
Bonobo_UIContainer _obj,const CORBA_char * id,const Bonobo_UIComponent_EventType type,const CORBA_char * state,CORBA_Environment * ev
</FUNCTION>
<FUNCTION>
<NAME>Bonobo_UIContainer_setObject</NAME>
<RETURNS>void  </RETURNS>
Bonobo_UIContainer _obj,const CORBA_char * path,const Bonobo_Unknown control,CORBA_Environment * ev
</FUNCTION>
<FUNCTION>
<NAME>Bonobo_UIContainer_getObject</NAME>
<RETURNS>Bonobo_Unknown  </RETURNS>
Bonobo_UIContainer _obj,const CORBA_char * path,CORBA_Environment * ev
</FUNCTION>
<FUNCTION>
<NAME>Bonobo_UIContainer_unImplemented</NAME>
<RETURNS>void  </RETURNS>
Bonobo_UIContainer _obj,CORBA_Environment * ev
</FUNCTION>
<FUNCTION>
<NAME>Bonobo_UIContainer_unImplemented2</NAME>
<RETURNS>void  </RETURNS>
Bonobo_UIContainer _obj,CORBA_Environment * ev
</FUNCTION>
<MACRO>
<NAME>Bonobo_PropertyBag_ref</NAME>
#define Bonobo_PropertyBag_ref Bonobo_Unknown_ref
</MACRO>
<MACRO>
<NAME>Bonobo_PropertyBag_unref</NAME>
#define Bonobo_PropertyBag_unref Bonobo_Unknown_unref
</MACRO>
<MACRO>
<NAME>Bonobo_PropertyBag_queryInterface</NAME>
#define Bonobo_PropertyBag_queryInterface Bonobo_Unknown_queryInterface
</MACRO>
<FUNCTION>
<NAME>Bonobo_PropertyBag_getKeys</NAME>
<RETURNS>Bonobo_KeyList  *</RETURNS>
Bonobo_PropertyBag _obj,const CORBA_char * filter,CORBA_Environment * ev
</FUNCTION>
<FUNCTION>
<NAME>Bonobo_PropertyBag_getType</NAME>
<RETURNS>CORBA_TypeCode  </RETURNS>
Bonobo_PropertyBag _obj,const CORBA_char * key,CORBA_Environment * ev
</FUNCTION>
<FUNCTION>
<NAME>Bonobo_PropertyBag_getValue</NAME>
<RETURNS>CORBA_any  *</RETURNS>
Bonobo_PropertyBag _obj,const CORBA_char * key,CORBA_Environment * ev
</FUNCTION>
<FUNCTION>
<NAME>Bonobo_PropertyBag_setValue</NAME>
<RETURNS>void  </RETURNS>
Bonobo_PropertyBag _obj,const CORBA_char * key,const CORBA_any * value,CORBA_Environment * ev
</FUNCTION>
<FUNCTION>
<NAME>Bonobo_PropertyBag_getValues</NAME>
<RETURNS>Bonobo_PropertySet  *</RETURNS>
Bonobo_PropertyBag _obj,const CORBA_char * filter,CORBA_Environment * ev
</FUNCTION>
<FUNCTION>
<NAME>Bonobo_PropertyBag_setValues</NAME>
<RETURNS>void  </RETURNS>
Bonobo_PropertyBag _obj,const Bonobo_PropertySet * set,CORBA_Environment * ev
</FUNCTION>
<FUNCTION>
<NAME>Bonobo_PropertyBag_getDefault</NAME>
<RETURNS>CORBA_any  *</RETURNS>
Bonobo_PropertyBag _obj,const CORBA_char * key,CORBA_Environment * ev
</FUNCTION>
<FUNCTION>
<NAME>Bonobo_PropertyBag_getDocTitle</NAME>
<RETURNS>CORBA_string  </RETURNS>
Bonobo_PropertyBag _obj,const CORBA_char * key,CORBA_Environment * ev
</FUNCTION>
<FUNCTION>
<NAME>Bonobo_PropertyBag_getDoc</NAME>
<RETURNS>CORBA_string  </RETURNS>
Bonobo_PropertyBag _obj,const CORBA_char * key,CORBA_Environment * ev
</FUNCTION>
<FUNCTION>
<NAME>Bonobo_PropertyBag_getFlags</NAME>
<RETURNS>Bonobo_PropertyFlags  </RETURNS>
Bonobo_PropertyBag _obj,const CORBA_char * key,CORBA_Environment * ev
</FUNCTION>
<MACRO>
<NAME>Bonobo_ConfigDatabase_ref</NAME>
#define Bonobo_ConfigDatabase_ref Bonobo_Unknown_ref
</MACRO>
<MACRO>
<NAME>Bonobo_ConfigDatabase_unref</NAME>
#define Bonobo_ConfigDatabase_unref Bonobo_Unknown_unref
</MACRO>
<MACRO>
<NAME>Bonobo_ConfigDatabase_queryInterface</NAME>
#define Bonobo_ConfigDatabase_queryInterface Bonobo_Unknown_queryInterface
</MACRO>
<MACRO>
<NAME>Bonobo_ConfigDatabase_getKeys</NAME>
#define Bonobo_ConfigDatabase_getKeys Bonobo_PropertyBag_getKeys
</MACRO>
<MACRO>
<NAME>Bonobo_ConfigDatabase_getType</NAME>
#define Bonobo_ConfigDatabase_getType Bonobo_PropertyBag_getType
</MACRO>
<MACRO>
<NAME>Bonobo_ConfigDatabase_getValue</NAME>
#define Bonobo_ConfigDatabase_getValue Bonobo_PropertyBag_getValue
</MACRO>
<MACRO>
<NAME>Bonobo_ConfigDatabase_setValue</NAME>
#define Bonobo_ConfigDatabase_setValue Bonobo_PropertyBag_setValue
</MACRO>
<MACRO>
<NAME>Bonobo_ConfigDatabase_getValues</NAME>
#define Bonobo_ConfigDatabase_getValues Bonobo_PropertyBag_getValues
</MACRO>
<MACRO>
<NAME>Bonobo_ConfigDatabase_setValues</NAME>
#define Bonobo_ConfigDatabase_setValues Bonobo_PropertyBag_setValues
</MACRO>
<MACRO>
<NAME>Bonobo_ConfigDatabase_getDefault</NAME>
#define Bonobo_ConfigDatabase_getDefault Bonobo_PropertyBag_getDefault
</MACRO>
<MACRO>
<NAME>Bonobo_ConfigDatabase_getDocTitle</NAME>
#define Bonobo_ConfigDatabase_getDocTitle Bonobo_PropertyBag_getDocTitle
</MACRO>
<MACRO>
<NAME>Bonobo_ConfigDatabase_getDoc</NAME>
#define Bonobo_ConfigDatabase_getDoc Bonobo_PropertyBag_getDoc
</MACRO>
<MACRO>
<NAME>Bonobo_ConfigDatabase_getFlags</NAME>
#define Bonobo_ConfigDatabase_getFlags Bonobo_PropertyBag_getFlags
</MACRO>
<FUNCTION>
<NAME>Bonobo_ConfigDatabase__get_isWriteable</NAME>
<RETURNS>CORBA_boolean  </RETURNS>
Bonobo_ConfigDatabase_obj,CORBA_Environment *ev
</FUNCTION>
<FUNCTION>
<NAME>Bonobo_ConfigDatabase_getDirs</NAME>
<RETURNS>Bonobo_KeyList  *</RETURNS>
Bonobo_ConfigDatabase _obj,const CORBA_char * dir,CORBA_Environment * ev
</FUNCTION>
<FUNCTION>
<NAME>Bonobo_ConfigDatabase_hasDir</NAME>
<RETURNS>CORBA_boolean  </RETURNS>
Bonobo_ConfigDatabase _obj,const CORBA_char * dir,CORBA_Environment * ev
</FUNCTION>
<FUNCTION>
<NAME>Bonobo_ConfigDatabase_removeValue</NAME>
<RETURNS>void  </RETURNS>
Bonobo_ConfigDatabase _obj,const CORBA_char * key,CORBA_Environment * ev
</FUNCTION>
<FUNCTION>
<NAME>Bonobo_ConfigDatabase_removeDir</NAME>
<RETURNS>void  </RETURNS>
Bonobo_ConfigDatabase _obj,const CORBA_char * dir,CORBA_Environment * ev
</FUNCTION>
<FUNCTION>
<NAME>Bonobo_ConfigDatabase_addDatabase</NAME>
<RETURNS>void  </RETURNS>
Bonobo_ConfigDatabase _obj,const Bonobo_ConfigDatabase db,const CORBA_char * key,const Bonobo_ConfigDatabase_DBFlagsflags, CORBA_Environment * ev
</FUNCTION>
<FUNCTION>
<NAME>Bonobo_ConfigDatabase_sync</NAME>
<RETURNS>void  </RETURNS>
Bonobo_ConfigDatabase _obj,CORBA_Environment * ev
</FUNCTION>
<MACRO>
<NAME>Bonobo_ControlFrame_ref</NAME>
#define Bonobo_ControlFrame_ref Bonobo_Unknown_ref
</MACRO>
<MACRO>
<NAME>Bonobo_ControlFrame_unref</NAME>
#define Bonobo_ControlFrame_unref Bonobo_Unknown_unref
</MACRO>
<MACRO>
<NAME>Bonobo_ControlFrame_queryInterface</NAME>
#define Bonobo_ControlFrame_queryInterface Bonobo_Unknown_queryInterface
</MACRO>
<FUNCTION>
<NAME>Bonobo_ControlFrame_getToplevelId</NAME>
<RETURNS>Bonobo_Gdk_WindowId  </RETURNS>
Bonobo_ControlFrame_obj,CORBA_Environment *ev
</FUNCTION>
<FUNCTION>
<NAME>Bonobo_ControlFrame_getAmbientProperties</NAME>
<RETURNS>Bonobo_PropertyBag</RETURNS>
Bonobo_ControlFrame _obj,CORBA_Environment * ev
</FUNCTION>
<FUNCTION>
<NAME>Bonobo_ControlFrame_getUIContainer</NAME>
<RETURNS>Bonobo_UIContainer  </RETURNS>
Bonobo_ControlFrame_obj,CORBA_Environment *ev
</FUNCTION>
<FUNCTION>
<NAME>Bonobo_ControlFrame_notifyActivated</NAME>
<RETURNS>void  </RETURNS>
Bonobo_ControlFrame _obj,const CORBA_boolean state,CORBA_Environment * ev
</FUNCTION>
<FUNCTION>
<NAME>Bonobo_ControlFrame_queueResize</NAME>
<RETURNS>void  </RETURNS>
Bonobo_ControlFrame _obj,CORBA_Environment * ev
</FUNCTION>
<FUNCTION>
<NAME>Bonobo_ControlFrame_activateURI</NAME>
<RETURNS>void  </RETURNS>
Bonobo_ControlFrame _obj,const CORBA_char * uri,const CORBA_boolean relative,CORBA_Environment * ev
</FUNCTION>
<FUNCTION>
<NAME>Bonobo_ControlFrame_getParentAccessible</NAME>
<RETURNS>Bonobo_Unknown  </RETURNS>
Bonobo_ControlFrame_obj,CORBA_Environment *ev
</FUNCTION>
<FUNCTION>
<NAME>Bonobo_ControlFrame_unImplemented</NAME>
<RETURNS>void  </RETURNS>
Bonobo_ControlFrame _obj,CORBA_Environment * ev
</FUNCTION>
<FUNCTION>
<NAME>Bonobo_ControlFrame_unImplemented2</NAME>
<RETURNS>void  </RETURNS>
Bonobo_ControlFrame _obj,CORBA_Environment * ev
</FUNCTION>
<MACRO>
<NAME>Bonobo_Control_ref</NAME>
#define Bonobo_Control_ref Bonobo_Unknown_ref
</MACRO>
<MACRO>
<NAME>Bonobo_Control_unref</NAME>
#define Bonobo_Control_unref Bonobo_Unknown_unref
</MACRO>
<MACRO>
<NAME>Bonobo_Control_queryInterface</NAME>
#define Bonobo_Control_queryInterface Bonobo_Unknown_queryInterface
</MACRO>
<FUNCTION>
<NAME>Bonobo_Control_getProperties</NAME>
<RETURNS>Bonobo_PropertyBag  </RETURNS>
Bonobo_Control _obj,CORBA_Environment * ev
</FUNCTION>
<FUNCTION>
<NAME>Bonobo_Control_getDesiredSize</NAME>
<RETURNS>Bonobo_Gtk_Requisition  </RETURNS>
Bonobo_Control _obj,CORBA_Environment *ev
</FUNCTION>
<FUNCTION>
<NAME>Bonobo_Control_getAccessible</NAME>
<RETURNS>Bonobo_Unknown  </RETURNS>
Bonobo_Control _obj,CORBA_Environment * ev
</FUNCTION>
<FUNCTION>
<NAME>Bonobo_Control_getWindowId</NAME>
<RETURNS>Bonobo_Gdk_WindowId  </RETURNS>
Bonobo_Control _obj,const CORBA_char * cookie,CORBA_Environment * ev
</FUNCTION>
<FUNCTION>
<NAME>Bonobo_Control_getPopupContainer</NAME>
<RETURNS>Bonobo_UIContainer  </RETURNS>
Bonobo_Control _obj,CORBA_Environment *ev
</FUNCTION>
<FUNCTION>
<NAME>Bonobo_Control_setFrame</NAME>
<RETURNS>void  </RETURNS>
Bonobo_Control _obj,const Bonobo_ControlFrame frame,CORBA_Environment * ev
</FUNCTION>
<FUNCTION>
<NAME>Bonobo_Control_setSize</NAME>
<RETURNS>void  </RETURNS>
Bonobo_Control _obj, const CORBA_short width,const CORBA_short height,CORBA_Environment * ev
</FUNCTION>
<FUNCTION>
<NAME>Bonobo_Control_setState</NAME>
<RETURNS>void  </RETURNS>
Bonobo_Control _obj,const Bonobo_Gtk_State state,CORBA_Environment * ev
</FUNCTION>
<FUNCTION>
<NAME>Bonobo_Control_activate</NAME>
<RETURNS>void  </RETURNS>
Bonobo_Control _obj,const CORBA_boolean activate,CORBA_Environment * ev
</FUNCTION>
<FUNCTION>
<NAME>Bonobo_Control_focus</NAME>
<RETURNS>CORBA_boolean  </RETURNS>
Bonobo_Control _obj,const Bonobo_Gtk_Direction direction,CORBA_Environment * ev
</FUNCTION>
<FUNCTION>
<NAME>Bonobo_Control_unImplemented</NAME>
<RETURNS>void  </RETURNS>
Bonobo_Control _obj,CORBA_Environment * ev
</FUNCTION>
<FUNCTION>
<NAME>Bonobo_Control_unImplemented2</NAME>
<RETURNS>void  </RETURNS>
Bonobo_Control _obj,CORBA_Environment * ev
</FUNCTION>
<FUNCTION>
<NAME>Bonobo_Control_unImplemented3</NAME>
<RETURNS>void  </RETURNS>
Bonobo_Control _obj,CORBA_Environment * ev
</FUNCTION>
<MACRO>
<NAME>Bonobo_PropertyControl_ref</NAME>
#define Bonobo_PropertyControl_ref Bonobo_Unknown_ref
</MACRO>
<MACRO>
<NAME>Bonobo_PropertyControl_unref</NAME>
#define Bonobo_PropertyControl_unref Bonobo_Unknown_unref
</MACRO>
<MACRO>
<NAME>Bonobo_PropertyControl_queryInterface</NAME>
#define Bonobo_PropertyControl_queryInterface Bonobo_Unknown_queryInterface
</MACRO>
<FUNCTION>
<NAME>Bonobo_PropertyControl__get_pageCount</NAME>
<RETURNS>CORBA_long  </RETURNS>
Bonobo_PropertyControl_obj,CORBA_Environment * ev
</FUNCTION>
<FUNCTION>
<NAME>Bonobo_PropertyControl_getControl</NAME>
<RETURNS>Bonobo_Control  </RETURNS>
Bonobo_PropertyControl_obj,const CORBA_longpagenumber,CORBA_Environment * ev
</FUNCTION>
<FUNCTION>
<NAME>Bonobo_PropertyControl_notifyAction</NAME>
<RETURNS>void  </RETURNS>
Bonobo_PropertyControl _obj,const CORBA_long pagenumber,constBonobo_PropertyControl_Actionaction, CORBA_Environment * ev
</FUNCTION>
<MACRO>
<NAME>Bonobo_ZoomableFrame_ref</NAME>
#define Bonobo_ZoomableFrame_ref Bonobo_Unknown_ref
</MACRO>
<MACRO>
<NAME>Bonobo_ZoomableFrame_unref</NAME>
#define Bonobo_ZoomableFrame_unref Bonobo_Unknown_unref
</MACRO>
<MACRO>
<NAME>Bonobo_ZoomableFrame_queryInterface</NAME>
#define Bonobo_ZoomableFrame_queryInterface Bonobo_Unknown_queryInterface
</MACRO>
<FUNCTION>
<NAME>Bonobo_ZoomableFrame_onLevelChanged</NAME>
<RETURNS>void  </RETURNS>
Bonobo_ZoomableFrame _obj,const CORBA_float zoom_level,CORBA_Environment * ev
</FUNCTION>
<FUNCTION>
<NAME>Bonobo_ZoomableFrame_onParametersChanged</NAME>
<RETURNS>void  </RETURNS>
Bonobo_ZoomableFrame _obj,CORBA_Environment * ev
</FUNCTION>
<MACRO>
<NAME>Bonobo_Zoomable_ref</NAME>
#define Bonobo_Zoomable_ref Bonobo_Unknown_ref
</MACRO>
<MACRO>
<NAME>Bonobo_Zoomable_unref</NAME>
#define Bonobo_Zoomable_unref Bonobo_Unknown_unref
</MACRO>
<MACRO>
<NAME>Bonobo_Zoomable_queryInterface</NAME>
#define Bonobo_Zoomable_queryInterface Bonobo_Unknown_queryInterface
</MACRO>
<FUNCTION>
<NAME>Bonobo_Zoomable__get_level</NAME>
<RETURNS>CORBA_float  </RETURNS>
Bonobo_Zoomable _obj,CORBA_Environment * ev
</FUNCTION>
<FUNCTION>
<NAME>Bonobo_Zoomable__get_minLevel</NAME>
<RETURNS>CORBA_float  </RETURNS>
Bonobo_Zoomable _obj,CORBA_Environment * ev
</FUNCTION>
<FUNCTION>
<NAME>Bonobo_Zoomable__get_maxLevel</NAME>
<RETURNS>CORBA_float  </RETURNS>
Bonobo_Zoomable _obj,CORBA_Environment * ev
</FUNCTION>
<FUNCTION>
<NAME>Bonobo_Zoomable__get_hasMinLevel</NAME>
<RETURNS>CORBA_boolean  </RETURNS>
Bonobo_Zoomable _obj,CORBA_Environment * ev
</FUNCTION>
<FUNCTION>
<NAME>Bonobo_Zoomable__get_hasMaxLevel</NAME>
<RETURNS>CORBA_boolean  </RETURNS>
Bonobo_Zoomable _obj,CORBA_Environment * ev
</FUNCTION>
<FUNCTION>
<NAME>Bonobo_Zoomable__get_isContinuous</NAME>
<RETURNS>CORBA_boolean  </RETURNS>
Bonobo_Zoomable _obj,CORBA_Environment * ev
</FUNCTION>
<FUNCTION>
<NAME>Bonobo_Zoomable__get_preferredLevels</NAME>
<RETURNS>Bonobo_ZoomLevelList  *</RETURNS>
Bonobo_Zoomable_obj,CORBA_Environment* ev
</FUNCTION>
<FUNCTION>
<NAME>Bonobo_Zoomable_zoomIn</NAME>
<RETURNS>void  </RETURNS>
Bonobo_Zoomable _obj, CORBA_Environment * ev
</FUNCTION>
<FUNCTION>
<NAME>Bonobo_Zoomable_zoomOut</NAME>
<RETURNS>void  </RETURNS>
Bonobo_Zoomable _obj, CORBA_Environment * ev
</FUNCTION>
<FUNCTION>
<NAME>Bonobo_Zoomable_zoomFit</NAME>
<RETURNS>void  </RETURNS>
Bonobo_Zoomable _obj, CORBA_Environment * ev
</FUNCTION>
<FUNCTION>
<NAME>Bonobo_Zoomable_zoomDefault</NAME>
<RETURNS>void  </RETURNS>
Bonobo_Zoomable _obj,CORBA_Environment * ev
</FUNCTION>
<FUNCTION>
<NAME>Bonobo_Zoomable_setLevel</NAME>
<RETURNS>void  </RETURNS>
Bonobo_Zoomable _obj,const CORBA_float zoom_level,CORBA_Environment * ev
</FUNCTION>
<FUNCTION>
<NAME>Bonobo_Zoomable_setFrame</NAME>
<RETURNS>void  </RETURNS>
Bonobo_Zoomable _obj,const Bonobo_ZoomableFrame zoomable_frame,CORBA_Environment * ev
</FUNCTION>
<MACRO>
<NAME>Bonobo_ItemContainer_ref</NAME>
#define Bonobo_ItemContainer_ref Bonobo_Unknown_ref
</MACRO>
<MACRO>
<NAME>Bonobo_ItemContainer_unref</NAME>
#define Bonobo_ItemContainer_unref Bonobo_Unknown_unref
</MACRO>
<MACRO>
<NAME>Bonobo_ItemContainer_queryInterface</NAME>
#define Bonobo_ItemContainer_queryInterface Bonobo_Unknown_queryInterface
</MACRO>
<FUNCTION>
<NAME>Bonobo_ItemContainer_getObjectByName</NAME>
<RETURNS>Bonobo_Unknown  </RETURNS>
Bonobo_ItemContainer_obj,const CORBA_char *item_name,const CORBA_booleanonly_if_exists,CORBA_Environment *ev
</FUNCTION>
<MACRO>
<NAME>Bonobo_Canvas_Component_ref</NAME>
#define Bonobo_Canvas_Component_ref Bonobo_Unknown_ref
</MACRO>
<MACRO>
<NAME>Bonobo_Canvas_Component_unref</NAME>
#define Bonobo_Canvas_Component_unref Bonobo_Unknown_unref
</MACRO>
<MACRO>
<NAME>Bonobo_Canvas_Component_queryInterface</NAME>
#define Bonobo_Canvas_Component_queryInterface Bonobo_Unknown_queryInterface
</MACRO>
<FUNCTION>
<NAME>Bonobo_Canvas_Component_realize</NAME>
<RETURNS>void  </RETURNS>
Bonobo_Canvas_Component _obj,const Bonobo_Canvas_window_iddrawable, CORBA_Environment * ev
</FUNCTION>
<FUNCTION>
<NAME>Bonobo_Canvas_Component_unrealize</NAME>
<RETURNS>void  </RETURNS>
Bonobo_Canvas_Component _obj,CORBA_Environment * ev
</FUNCTION>
<FUNCTION>
<NAME>Bonobo_Canvas_Component_map</NAME>
<RETURNS>void  </RETURNS>
Bonobo_Canvas_Component _obj,CORBA_Environment * ev
</FUNCTION>
<FUNCTION>
<NAME>Bonobo_Canvas_Component_unmap</NAME>
<RETURNS>void  </RETURNS>
Bonobo_Canvas_Component _obj,CORBA_Environment * ev
</FUNCTION>
<FUNCTION>
<NAME>Bonobo_Canvas_Component_draw</NAME>
<RETURNS>void  </RETURNS>
Bonobo_Canvas_Component _obj,const Bonobo_Canvas_State * state,const Bonobo_Canvas_window_id drawable,const CORBA_short x, const CORBA_short y,const CORBA_short width,const CORBA_short height,CORBA_Environment * ev
</FUNCTION>
<FUNCTION>
<NAME>Bonobo_Canvas_Component_render</NAME>
<RETURNS>void  </RETURNS>
Bonobo_Canvas_Component _obj,Bonobo_Canvas_Buf * buf,CORBA_Environment * ev
</FUNCTION>
<FUNCTION>
<NAME>Bonobo_Canvas_Component_contains</NAME>
<RETURNS>CORBA_boolean  </RETURNS>
Bonobo_Canvas_Component_obj, const CORBA_double x,const CORBA_double y,CORBA_Environment * ev
</FUNCTION>
<FUNCTION>
<NAME>Bonobo_Canvas_Component_bounds</NAME>
<RETURNS>void  </RETURNS>
Bonobo_Canvas_Component _obj,const Bonobo_Canvas_State * state,CORBA_double * x1, CORBA_double * x2,CORBA_double * y1, CORBA_double * y2,CORBA_Environment * ev
</FUNCTION>
<FUNCTION>
<NAME>Bonobo_Canvas_Component_event</NAME>
<RETURNS>CORBA_boolean  </RETURNS>
Bonobo_Canvas_Component _obj,const Bonobo_Canvas_State *state,const Bonobo_Gdk_Event * event,CORBA_Environment * ev
</FUNCTION>
<FUNCTION>
<NAME>Bonobo_Canvas_Component_setCanvasSize</NAME>
<RETURNS>void  </RETURNS>
Bonobo_Canvas_Component _obj,const CORBA_short x,const CORBA_short y,const CORBA_short width,const CORBA_short height,CORBA_Environment * ev
</FUNCTION>
<FUNCTION>
<NAME>Bonobo_Canvas_Component_setBounds</NAME>
<RETURNS>void  </RETURNS>
Bonobo_Canvas_Component _obj,const Bonobo_Canvas_DRect * bbox,CORBA_Environment * ev
</FUNCTION>
<FUNCTION>
<NAME>Bonobo_Canvas_ComponentProxy_requestUpdate</NAME>
<RETURNS>void</RETURNS>
Bonobo_Canvas_ComponentProxy_obj,CORBA_Environment * ev
</FUNCTION>
<FUNCTION>
<NAME>Bonobo_Canvas_ComponentProxy_grabFocus</NAME>
<RETURNS>void  </RETURNS>
Bonobo_Canvas_ComponentProxy_obj,const CORBA_unsigned_long mask,const CORBA_long cursor,const CORBA_unsigned_long time,CORBA_Environment * ev
</FUNCTION>
<FUNCTION>
<NAME>Bonobo_Canvas_ComponentProxy_ungrabFocus</NAME>
<RETURNS>void  </RETURNS>
Bonobo_Canvas_ComponentProxy_obj,const CORBA_unsigned_longtime,CORBA_Environment * ev
</FUNCTION>
<FUNCTION>
<NAME>Bonobo_Canvas_ComponentProxy_getUIContainer</NAME>
<RETURNS>Bonobo_UIContainer</RETURNS>
Bonobo_Canvas_ComponentProxy_obj,CORBA_Environment * ev
</FUNCTION>
<MACRO>
<NAME>Bonobo_ControlFactory_ref</NAME>
#define Bonobo_ControlFactory_ref Bonobo_Unknown_ref
</MACRO>
<MACRO>
<NAME>Bonobo_ControlFactory_unref</NAME>
#define Bonobo_ControlFactory_unref Bonobo_Unknown_unref
</MACRO>
<MACRO>
<NAME>Bonobo_ControlFactory_queryInterface</NAME>
#define Bonobo_ControlFactory_queryInterface Bonobo_Unknown_queryInterface
</MACRO>
<FUNCTION>
<NAME>Bonobo_ControlFactory_createControl</NAME>
<RETURNS>Bonobo_Control  </RETURNS>
Bonobo_ControlFactory_obj,constBonobo_ControlFrameframe,const Bonobo_UIContaineruic,CORBA_Environment * ev
</FUNCTION>
<MACRO>
<NAME>Bonobo_CanvasComponentFactory_ref</NAME>
#define Bonobo_CanvasComponentFactory_ref Bonobo_Unknown_ref
</MACRO>
<MACRO>
<NAME>Bonobo_CanvasComponentFactory_unref</NAME>
#define Bonobo_CanvasComponentFactory_unref Bonobo_Unknown_unref
</MACRO>
<MACRO>
<NAME>Bonobo_CanvasComponentFactory_queryInterface</NAME>
#define Bonobo_CanvasComponentFactory_queryInterface Bonobo_Unknown_queryInterface
</MACRO>
<MACRO>
<NAME>Bonobo_Embeddable_ref</NAME>
#define Bonobo_Embeddable_ref Bonobo_Unknown_ref
</MACRO>
<MACRO>
<NAME>Bonobo_Embeddable_unref</NAME>
#define Bonobo_Embeddable_unref Bonobo_Unknown_unref
</MACRO>
<MACRO>
<NAME>Bonobo_Embeddable_queryInterface</NAME>
#define Bonobo_Embeddable_queryInterface Bonobo_Unknown_queryInterface
</MACRO>
<MACRO>
<NAME>Bonobo_Print_ref</NAME>
#define Bonobo_Print_ref Bonobo_Unknown_ref
</MACRO>
<MACRO>
<NAME>Bonobo_Print_unref</NAME>
#define Bonobo_Print_unref Bonobo_Unknown_unref
</MACRO>
<MACRO>
<NAME>Bonobo_Print_queryInterface</NAME>
#define Bonobo_Print_queryInterface Bonobo_Unknown_queryInterface
</MACRO>
<FUNCTION>
<NAME>Bonobo_Print_render</NAME>
<RETURNS>Bonobo_Stream  </RETURNS>
Bonobo_Print _obj,const Bonobo_PrintDimensions * pd,const Bonobo_PrintScissor * scissor,CORBA_Environment * ev
</FUNCTION>
<MACRO>
<NAME>Bonobo_Clipboard_ref</NAME>
#define Bonobo_Clipboard_ref Bonobo_Unknown_ref
</MACRO>
<MACRO>
<NAME>Bonobo_Clipboard_unref</NAME>
#define Bonobo_Clipboard_unref Bonobo_Unknown_unref
</MACRO>
<MACRO>
<NAME>Bonobo_Clipboard_queryInterface</NAME>
#define Bonobo_Clipboard_queryInterface Bonobo_Unknown_queryInterface
</MACRO>
<FUNCTION>
<NAME>Bonobo_Clipboard_setClipboard</NAME>
<RETURNS>void  </RETURNS>
Bonobo_Clipboard _obj,const Bonobo_Moniker pasting_moniker,const Bonobo_Moniker linking_moniker,CORBA_Environment * ev
</FUNCTION>
<FUNCTION>
<NAME>Bonobo_Clipboard_paste</NAME>
<RETURNS>Bonobo_Moniker  </RETURNS>
Bonobo_Clipboard _obj,CORBA_Environment * ev
</FUNCTION>
<FUNCTION>
<NAME>Bonobo_Clipboard_link</NAME>
<RETURNS>Bonobo_Moniker  </RETURNS>
Bonobo_Clipboard _obj,CORBA_Environment * ev
</FUNCTION>
<MACRO>
<NAME>Bonobo_ClipboardStore_ref</NAME>
#define Bonobo_ClipboardStore_ref Bonobo_Unknown_ref
</MACRO>
<MACRO>
<NAME>Bonobo_ClipboardStore_unref</NAME>
#define Bonobo_ClipboardStore_unref Bonobo_Unknown_unref
</MACRO>
<MACRO>
<NAME>Bonobo_ClipboardStore_queryInterface</NAME>
#define Bonobo_ClipboardStore_queryInterface Bonobo_Unknown_queryInterface
</MACRO>
<FUNCTION>
<NAME>Bonobo_ClipboardStore_fetchStream</NAME>
<RETURNS>void  </RETURNS>
Bonobo_ClipboardStore _obj,const Bonobo_PersistStream source,const Bonobo_Monikerlinking_moniker,CORBA_Environment * ev
</FUNCTION>
<FUNCTION>
<NAME>Bonobo_ClipboardStore_fetchStorage</NAME>
<RETURNS>void  </RETURNS>
Bonobo_ClipboardStore _obj,const Bonobo_PersistStorage source,const Bonobo_Monikerlinking_moniker,CORBA_Environment * ev
</FUNCTION>
<MACRO>
<NAME>MARSHAL_IMPL_CORBA_sequence_CORBA_octet_0</NAME>
#define MARSHAL_IMPL_CORBA_sequence_CORBA_octet_0 'B'
</MACRO>
<MACRO>
<NAME>MARSHAL_IMPL_CORBA_sequence_CORBA_octet_1</NAME>
#define MARSHAL_IMPL_CORBA_sequence_CORBA_octet_1 'o'
</MACRO>
<MACRO>
<NAME>MARSHAL_IMPL_CORBA_sequence_CORBA_octet_2</NAME>
#define MARSHAL_IMPL_CORBA_sequence_CORBA_octet_2 'n'
</MACRO>
<MACRO>
<NAME>MARSHAL_IMPL_CORBA_sequence_CORBA_octet_3</NAME>
#define MARSHAL_IMPL_CORBA_sequence_CORBA_octet_3 'o'
</MACRO>
<MACRO>
<NAME>MARSHAL_IMPL_CORBA_sequence_CORBA_octet_4</NAME>
#define MARSHAL_IMPL_CORBA_sequence_CORBA_octet_4 'b'
</MACRO>
<MACRO>
<NAME>MARSHAL_IMPL_CORBA_sequence_CORBA_octet_5</NAME>
#define MARSHAL_IMPL_CORBA_sequence_CORBA_octet_5 'o'
</MACRO>
<MACRO>
<NAME>MARSHAL_IMPL_CORBA_sequence_Bonobo_StorageInfo_0</NAME>
#define MARSHAL_IMPL_CORBA_sequence_Bonobo_StorageInfo_0 'B'
</MACRO>
<MACRO>
<NAME>MARSHAL_IMPL_CORBA_sequence_Bonobo_StorageInfo_1</NAME>
#define MARSHAL_IMPL_CORBA_sequence_Bonobo_StorageInfo_1 'o'
</MACRO>
<MACRO>
<NAME>MARSHAL_IMPL_CORBA_sequence_Bonobo_StorageInfo_2</NAME>
#define MARSHAL_IMPL_CORBA_sequence_Bonobo_StorageInfo_2 'n'
</MACRO>
<MACRO>
<NAME>MARSHAL_IMPL_CORBA_sequence_Bonobo_StorageInfo_3</NAME>
#define MARSHAL_IMPL_CORBA_sequence_Bonobo_StorageInfo_3 'o'
</MACRO>
<MACRO>
<NAME>MARSHAL_IMPL_CORBA_sequence_Bonobo_StorageInfo_4</NAME>
#define MARSHAL_IMPL_CORBA_sequence_Bonobo_StorageInfo_4 'b'
</MACRO>
<MACRO>
<NAME>MARSHAL_IMPL_CORBA_sequence_Bonobo_StorageInfo_5</NAME>
#define MARSHAL_IMPL_CORBA_sequence_Bonobo_StorageInfo_5 'o'
</MACRO>
<MACRO>
<NAME>MARSHAL_IMPL_CORBA_sequence_CORBA_string_0</NAME>
#define MARSHAL_IMPL_CORBA_sequence_CORBA_string_0 'B'
</MACRO>
<MACRO>
<NAME>MARSHAL_IMPL_CORBA_sequence_CORBA_string_1</NAME>
#define MARSHAL_IMPL_CORBA_sequence_CORBA_string_1 'o'
</MACRO>
<MACRO>
<NAME>MARSHAL_IMPL_CORBA_sequence_CORBA_string_2</NAME>
#define MARSHAL_IMPL_CORBA_sequence_CORBA_string_2 'n'
</MACRO>
<MACRO>
<NAME>MARSHAL_IMPL_CORBA_sequence_CORBA_string_3</NAME>
#define MARSHAL_IMPL_CORBA_sequence_CORBA_string_3 'o'
</MACRO>
<MACRO>
<NAME>MARSHAL_IMPL_CORBA_sequence_CORBA_string_4</NAME>
#define MARSHAL_IMPL_CORBA_sequence_CORBA_string_4 'b'
</MACRO>
<MACRO>
<NAME>MARSHAL_IMPL_CORBA_sequence_CORBA_string_5</NAME>
#define MARSHAL_IMPL_CORBA_sequence_CORBA_string_5 'o'
</MACRO>
<MACRO>
<NAME>MARSHAL_IMPL_CORBA_sequence_Bonobo_Pair_0</NAME>
#define MARSHAL_IMPL_CORBA_sequence_Bonobo_Pair_0 'B'
</MACRO>
<MACRO>
<NAME>MARSHAL_IMPL_CORBA_sequence_Bonobo_Pair_1</NAME>
#define MARSHAL_IMPL_CORBA_sequence_Bonobo_Pair_1 'o'
</MACRO>
<MACRO>
<NAME>MARSHAL_IMPL_CORBA_sequence_Bonobo_Pair_2</NAME>
#define MARSHAL_IMPL_CORBA_sequence_Bonobo_Pair_2 'n'
</MACRO>
<MACRO>
<NAME>MARSHAL_IMPL_CORBA_sequence_Bonobo_Pair_3</NAME>
#define MARSHAL_IMPL_CORBA_sequence_Bonobo_Pair_3 'o'
</MACRO>
<MACRO>
<NAME>MARSHAL_IMPL_CORBA_sequence_Bonobo_Pair_4</NAME>
#define MARSHAL_IMPL_CORBA_sequence_Bonobo_Pair_4 'b'
</MACRO>
<MACRO>
<NAME>MARSHAL_IMPL_CORBA_sequence_Bonobo_Pair_5</NAME>
#define MARSHAL_IMPL_CORBA_sequence_Bonobo_Pair_5 'o'
</MACRO>
<MACRO>
<NAME>MARSHAL_IMPL_CORBA_sequence_CORBA_float_0</NAME>
#define MARSHAL_IMPL_CORBA_sequence_CORBA_float_0 'B'
</MACRO>
<MACRO>
<NAME>MARSHAL_IMPL_CORBA_sequence_CORBA_float_1</NAME>
#define MARSHAL_IMPL_CORBA_sequence_CORBA_float_1 'o'
</MACRO>
<MACRO>
<NAME>MARSHAL_IMPL_CORBA_sequence_CORBA_float_2</NAME>
#define MARSHAL_IMPL_CORBA_sequence_CORBA_float_2 'n'
</MACRO>
<MACRO>
<NAME>MARSHAL_IMPL_CORBA_sequence_CORBA_float_3</NAME>
#define MARSHAL_IMPL_CORBA_sequence_CORBA_float_3 'o'
</MACRO>
<MACRO>
<NAME>MARSHAL_IMPL_CORBA_sequence_CORBA_float_4</NAME>
#define MARSHAL_IMPL_CORBA_sequence_CORBA_float_4 'b'
</MACRO>
<MACRO>
<NAME>MARSHAL_IMPL_CORBA_sequence_CORBA_float_5</NAME>
#define MARSHAL_IMPL_CORBA_sequence_CORBA_float_5 'o'
</MACRO>
<MACRO>
<NAME>MARSHAL_IMPL_CORBA_sequence_Bonobo_Canvas_Point_0</NAME>
#define MARSHAL_IMPL_CORBA_sequence_Bonobo_Canvas_Point_0 'B'
</MACRO>
<MACRO>
<NAME>MARSHAL_IMPL_CORBA_sequence_Bonobo_Canvas_Point_1</NAME>
#define MARSHAL_IMPL_CORBA_sequence_Bonobo_Canvas_Point_1 'o'
</MACRO>
<MACRO>
<NAME>MARSHAL_IMPL_CORBA_sequence_Bonobo_Canvas_Point_2</NAME>
#define MARSHAL_IMPL_CORBA_sequence_Bonobo_Canvas_Point_2 'n'
</MACRO>
<MACRO>
<NAME>MARSHAL_IMPL_CORBA_sequence_Bonobo_Canvas_Point_3</NAME>
#define MARSHAL_IMPL_CORBA_sequence_Bonobo_Canvas_Point_3 'o'
</MACRO>
<MACRO>
<NAME>MARSHAL_IMPL_CORBA_sequence_Bonobo_Canvas_Point_4</NAME>
#define MARSHAL_IMPL_CORBA_sequence_Bonobo_Canvas_Point_4 'b'
</MACRO>
<MACRO>
<NAME>MARSHAL_IMPL_CORBA_sequence_Bonobo_Canvas_Point_5</NAME>
#define MARSHAL_IMPL_CORBA_sequence_Bonobo_Canvas_Point_5 'o'
</MACRO>
<MACRO>
<NAME>MARSHAL_IMPL_CORBA_sequence_Bonobo_Canvas_SVPSegment_0</NAME>
#define MARSHAL_IMPL_CORBA_sequence_Bonobo_Canvas_SVPSegment_0 'B'
</MACRO>
<MACRO>
<NAME>MARSHAL_IMPL_CORBA_sequence_Bonobo_Canvas_SVPSegment_1</NAME>
#define MARSHAL_IMPL_CORBA_sequence_Bonobo_Canvas_SVPSegment_1 'o'
</MACRO>
<MACRO>
<NAME>MARSHAL_IMPL_CORBA_sequence_Bonobo_Canvas_SVPSegment_2</NAME>
#define MARSHAL_IMPL_CORBA_sequence_Bonobo_Canvas_SVPSegment_2 'n'
</MACRO>
<MACRO>
<NAME>MARSHAL_IMPL_CORBA_sequence_Bonobo_Canvas_SVPSegment_3</NAME>
#define MARSHAL_IMPL_CORBA_sequence_Bonobo_Canvas_SVPSegment_3 'o'
</MACRO>
<MACRO>
<NAME>MARSHAL_IMPL_CORBA_sequence_Bonobo_Canvas_SVPSegment_4</NAME>
#define MARSHAL_IMPL_CORBA_sequence_Bonobo_Canvas_SVPSegment_4 'b'
</MACRO>
<MACRO>
<NAME>MARSHAL_IMPL_CORBA_sequence_Bonobo_Canvas_SVPSegment_5</NAME>
#define MARSHAL_IMPL_CORBA_sequence_Bonobo_Canvas_SVPSegment_5 'o'
</MACRO>
<MACRO>
<NAME>MARSHAL_IMPL_CORBA_sequence_CORBA_long_0</NAME>
#define MARSHAL_IMPL_CORBA_sequence_CORBA_long_0 'B'
</MACRO>
<MACRO>
<NAME>MARSHAL_IMPL_CORBA_sequence_CORBA_long_1</NAME>
#define MARSHAL_IMPL_CORBA_sequence_CORBA_long_1 'o'
</MACRO>
<MACRO>
<NAME>MARSHAL_IMPL_CORBA_sequence_CORBA_long_2</NAME>
#define MARSHAL_IMPL_CORBA_sequence_CORBA_long_2 'n'
</MACRO>
<MACRO>
<NAME>MARSHAL_IMPL_CORBA_sequence_CORBA_long_3</NAME>
#define MARSHAL_IMPL_CORBA_sequence_CORBA_long_3 'o'
</MACRO>
<MACRO>
<NAME>MARSHAL_IMPL_CORBA_sequence_CORBA_long_4</NAME>
#define MARSHAL_IMPL_CORBA_sequence_CORBA_long_4 'b'
</MACRO>
<MACRO>
<NAME>MARSHAL_IMPL_CORBA_sequence_CORBA_long_5</NAME>
#define MARSHAL_IMPL_CORBA_sequence_CORBA_long_5 'o'
</MACRO>
<MACRO>
<NAME>MARSHAL_IMPL_Bonobo_Canvas_affine_0</NAME>
#define MARSHAL_IMPL_Bonobo_Canvas_affine_0 'B'
</MACRO>
<MACRO>
<NAME>MARSHAL_IMPL_Bonobo_Canvas_affine_1</NAME>
#define MARSHAL_IMPL_Bonobo_Canvas_affine_1 'o'
</MACRO>
<MACRO>
<NAME>MARSHAL_IMPL_Bonobo_Canvas_affine_2</NAME>
#define MARSHAL_IMPL_Bonobo_Canvas_affine_2 'n'
</MACRO>
<MACRO>
<NAME>MARSHAL_IMPL_Bonobo_Canvas_affine_3</NAME>
#define MARSHAL_IMPL_Bonobo_Canvas_affine_3 'o'
</MACRO>
<MACRO>
<NAME>MARSHAL_IMPL_Bonobo_Canvas_affine_4</NAME>
#define MARSHAL_IMPL_Bonobo_Canvas_affine_4 'b'
</MACRO>
<MACRO>
<NAME>MARSHAL_IMPL_Bonobo_Canvas_affine_5</NAME>
#define MARSHAL_IMPL_Bonobo_Canvas_affine_5 'o'
</MACRO>
<MACRO>
<NAME>MARSHAL_IMPL_Bonobo_ResolveOptions_0</NAME>
#define MARSHAL_IMPL_Bonobo_ResolveOptions_0 'B'
</MACRO>
<MACRO>
<NAME>MARSHAL_IMPL_Bonobo_ResolveOptions_1</NAME>
#define MARSHAL_IMPL_Bonobo_ResolveOptions_1 'o'
</MACRO>
<MACRO>
<NAME>MARSHAL_IMPL_Bonobo_ResolveOptions_2</NAME>
#define MARSHAL_IMPL_Bonobo_ResolveOptions_2 'n'
</MACRO>
<MACRO>
<NAME>MARSHAL_IMPL_Bonobo_ResolveOptions_3</NAME>
#define MARSHAL_IMPL_Bonobo_ResolveOptions_3 'o'
</MACRO>
<MACRO>
<NAME>MARSHAL_IMPL_Bonobo_ResolveOptions_4</NAME>
#define MARSHAL_IMPL_Bonobo_ResolveOptions_4 'b'
</MACRO>
<MACRO>
<NAME>MARSHAL_IMPL_Bonobo_ResolveOptions_5</NAME>
#define MARSHAL_IMPL_Bonobo_ResolveOptions_5 'o'
</MACRO>
<MACRO>
<NAME>MARSHAL_IMPL_Bonobo_StorageInfo_0</NAME>
#define MARSHAL_IMPL_Bonobo_StorageInfo_0 'B'
</MACRO>
<MACRO>
<NAME>MARSHAL_IMPL_Bonobo_StorageInfo_1</NAME>
#define MARSHAL_IMPL_Bonobo_StorageInfo_1 'o'
</MACRO>
<MACRO>
<NAME>MARSHAL_IMPL_Bonobo_StorageInfo_2</NAME>
#define MARSHAL_IMPL_Bonobo_StorageInfo_2 'n'
</MACRO>
<MACRO>
<NAME>MARSHAL_IMPL_Bonobo_StorageInfo_3</NAME>
#define MARSHAL_IMPL_Bonobo_StorageInfo_3 'o'
</MACRO>
<MACRO>
<NAME>MARSHAL_IMPL_Bonobo_StorageInfo_4</NAME>
#define MARSHAL_IMPL_Bonobo_StorageInfo_4 'b'
</MACRO>
<MACRO>
<NAME>MARSHAL_IMPL_Bonobo_StorageInfo_5</NAME>
#define MARSHAL_IMPL_Bonobo_StorageInfo_5 'o'
</MACRO>
<MACRO>
<NAME>MARSHAL_IMPL_Bonobo_Gdk_MotionEvent_0</NAME>
#define MARSHAL_IMPL_Bonobo_Gdk_MotionEvent_0 'B'
</MACRO>
<MACRO>
<NAME>MARSHAL_IMPL_Bonobo_Gdk_MotionEvent_1</NAME>
#define MARSHAL_IMPL_Bonobo_Gdk_MotionEvent_1 'o'
</MACRO>
<MACRO>
<NAME>MARSHAL_IMPL_Bonobo_Gdk_MotionEvent_2</NAME>
#define MARSHAL_IMPL_Bonobo_Gdk_MotionEvent_2 'n'
</MACRO>
<MACRO>
<NAME>MARSHAL_IMPL_Bonobo_Gdk_MotionEvent_3</NAME>
#define MARSHAL_IMPL_Bonobo_Gdk_MotionEvent_3 'o'
</MACRO>
<MACRO>
<NAME>MARSHAL_IMPL_Bonobo_Gdk_MotionEvent_4</NAME>
#define MARSHAL_IMPL_Bonobo_Gdk_MotionEvent_4 'b'
</MACRO>
<MACRO>
<NAME>MARSHAL_IMPL_Bonobo_Gdk_MotionEvent_5</NAME>
#define MARSHAL_IMPL_Bonobo_Gdk_MotionEvent_5 'o'
</MACRO>
<MACRO>
<NAME>MARSHAL_IMPL_Bonobo_Gdk_ButtonEvent_0</NAME>
#define MARSHAL_IMPL_Bonobo_Gdk_ButtonEvent_0 'B'
</MACRO>
<MACRO>
<NAME>MARSHAL_IMPL_Bonobo_Gdk_ButtonEvent_1</NAME>
#define MARSHAL_IMPL_Bonobo_Gdk_ButtonEvent_1 'o'
</MACRO>
<MACRO>
<NAME>MARSHAL_IMPL_Bonobo_Gdk_ButtonEvent_2</NAME>
#define MARSHAL_IMPL_Bonobo_Gdk_ButtonEvent_2 'n'
</MACRO>
<MACRO>
<NAME>MARSHAL_IMPL_Bonobo_Gdk_ButtonEvent_3</NAME>
#define MARSHAL_IMPL_Bonobo_Gdk_ButtonEvent_3 'o'
</MACRO>
<MACRO>
<NAME>MARSHAL_IMPL_Bonobo_Gdk_ButtonEvent_4</NAME>
#define MARSHAL_IMPL_Bonobo_Gdk_ButtonEvent_4 'b'
</MACRO>
<MACRO>
<NAME>MARSHAL_IMPL_Bonobo_Gdk_ButtonEvent_5</NAME>
#define MARSHAL_IMPL_Bonobo_Gdk_ButtonEvent_5 'o'
</MACRO>
<MACRO>
<NAME>MARSHAL_IMPL_Bonobo_Gdk_KeyEvent_0</NAME>
#define MARSHAL_IMPL_Bonobo_Gdk_KeyEvent_0 'B'
</MACRO>
<MACRO>
<NAME>MARSHAL_IMPL_Bonobo_Gdk_KeyEvent_1</NAME>
#define MARSHAL_IMPL_Bonobo_Gdk_KeyEvent_1 'o'
</MACRO>
<MACRO>
<NAME>MARSHAL_IMPL_Bonobo_Gdk_KeyEvent_2</NAME>
#define MARSHAL_IMPL_Bonobo_Gdk_KeyEvent_2 'n'
</MACRO>
<MACRO>
<NAME>MARSHAL_IMPL_Bonobo_Gdk_KeyEvent_3</NAME>
#define MARSHAL_IMPL_Bonobo_Gdk_KeyEvent_3 'o'
</MACRO>
<MACRO>
<NAME>MARSHAL_IMPL_Bonobo_Gdk_KeyEvent_4</NAME>
#define MARSHAL_IMPL_Bonobo_Gdk_KeyEvent_4 'b'
</MACRO>
<MACRO>
<NAME>MARSHAL_IMPL_Bonobo_Gdk_KeyEvent_5</NAME>
#define MARSHAL_IMPL_Bonobo_Gdk_KeyEvent_5 'o'
</MACRO>
<MACRO>
<NAME>MARSHAL_IMPL_Bonobo_Gdk_CrossingEvent_0</NAME>
#define MARSHAL_IMPL_Bonobo_Gdk_CrossingEvent_0 'B'
</MACRO>
<MACRO>
<NAME>MARSHAL_IMPL_Bonobo_Gdk_CrossingEvent_1</NAME>
#define MARSHAL_IMPL_Bonobo_Gdk_CrossingEvent_1 'o'
</MACRO>
<MACRO>
<NAME>MARSHAL_IMPL_Bonobo_Gdk_CrossingEvent_2</NAME>
#define MARSHAL_IMPL_Bonobo_Gdk_CrossingEvent_2 'n'
</MACRO>
<MACRO>
<NAME>MARSHAL_IMPL_Bonobo_Gdk_CrossingEvent_3</NAME>
#define MARSHAL_IMPL_Bonobo_Gdk_CrossingEvent_3 'o'
</MACRO>
<MACRO>
<NAME>MARSHAL_IMPL_Bonobo_Gdk_CrossingEvent_4</NAME>
#define MARSHAL_IMPL_Bonobo_Gdk_CrossingEvent_4 'b'
</MACRO>
<MACRO>
<NAME>MARSHAL_IMPL_Bonobo_Gdk_CrossingEvent_5</NAME>
#define MARSHAL_IMPL_Bonobo_Gdk_CrossingEvent_5 'o'
</MACRO>
<MACRO>
<NAME>MARSHAL_IMPL_Bonobo_Gdk_FocusEvent_0</NAME>
#define MARSHAL_IMPL_Bonobo_Gdk_FocusEvent_0 'B'
</MACRO>
<MACRO>
<NAME>MARSHAL_IMPL_Bonobo_Gdk_FocusEvent_1</NAME>
#define MARSHAL_IMPL_Bonobo_Gdk_FocusEvent_1 'o'
</MACRO>
<MACRO>
<NAME>MARSHAL_IMPL_Bonobo_Gdk_FocusEvent_2</NAME>
#define MARSHAL_IMPL_Bonobo_Gdk_FocusEvent_2 'n'
</MACRO>
<MACRO>
<NAME>MARSHAL_IMPL_Bonobo_Gdk_FocusEvent_3</NAME>
#define MARSHAL_IMPL_Bonobo_Gdk_FocusEvent_3 'o'
</MACRO>
<MACRO>
<NAME>MARSHAL_IMPL_Bonobo_Gdk_FocusEvent_4</NAME>
#define MARSHAL_IMPL_Bonobo_Gdk_FocusEvent_4 'b'
</MACRO>
<MACRO>
<NAME>MARSHAL_IMPL_Bonobo_Gdk_FocusEvent_5</NAME>
#define MARSHAL_IMPL_Bonobo_Gdk_FocusEvent_5 'o'
</MACRO>
<MACRO>
<NAME>MARSHAL_IMPL_Bonobo_Gtk_Requisition_0</NAME>
#define MARSHAL_IMPL_Bonobo_Gtk_Requisition_0 'B'
</MACRO>
<MACRO>
<NAME>MARSHAL_IMPL_Bonobo_Gtk_Requisition_1</NAME>
#define MARSHAL_IMPL_Bonobo_Gtk_Requisition_1 'o'
</MACRO>
<MACRO>
<NAME>MARSHAL_IMPL_Bonobo_Gtk_Requisition_2</NAME>
#define MARSHAL_IMPL_Bonobo_Gtk_Requisition_2 'n'
</MACRO>
<MACRO>
<NAME>MARSHAL_IMPL_Bonobo_Gtk_Requisition_3</NAME>
#define MARSHAL_IMPL_Bonobo_Gtk_Requisition_3 'o'
</MACRO>
<MACRO>
<NAME>MARSHAL_IMPL_Bonobo_Gtk_Requisition_4</NAME>
#define MARSHAL_IMPL_Bonobo_Gtk_Requisition_4 'b'
</MACRO>
<MACRO>
<NAME>MARSHAL_IMPL_Bonobo_Gtk_Requisition_5</NAME>
#define MARSHAL_IMPL_Bonobo_Gtk_Requisition_5 'o'
</MACRO>
<MACRO>
<NAME>MARSHAL_IMPL_Bonobo_Pair_0</NAME>
#define MARSHAL_IMPL_Bonobo_Pair_0 'B'
</MACRO>
<MACRO>
<NAME>MARSHAL_IMPL_Bonobo_Pair_1</NAME>
#define MARSHAL_IMPL_Bonobo_Pair_1 'o'
</MACRO>
<MACRO>
<NAME>MARSHAL_IMPL_Bonobo_Pair_2</NAME>
#define MARSHAL_IMPL_Bonobo_Pair_2 'n'
</MACRO>
<MACRO>
<NAME>MARSHAL_IMPL_Bonobo_Pair_3</NAME>
#define MARSHAL_IMPL_Bonobo_Pair_3 'o'
</MACRO>
<MACRO>
<NAME>MARSHAL_IMPL_Bonobo_Pair_4</NAME>
#define MARSHAL_IMPL_Bonobo_Pair_4 'b'
</MACRO>
<MACRO>
<NAME>MARSHAL_IMPL_Bonobo_Pair_5</NAME>
#define MARSHAL_IMPL_Bonobo_Pair_5 'o'
</MACRO>
<MACRO>
<NAME>MARSHAL_IMPL_Bonobo_Canvas_IRect_0</NAME>
#define MARSHAL_IMPL_Bonobo_Canvas_IRect_0 'B'
</MACRO>
<MACRO>
<NAME>MARSHAL_IMPL_Bonobo_Canvas_IRect_1</NAME>
#define MARSHAL_IMPL_Bonobo_Canvas_IRect_1 'o'
</MACRO>
<MACRO>
<NAME>MARSHAL_IMPL_Bonobo_Canvas_IRect_2</NAME>
#define MARSHAL_IMPL_Bonobo_Canvas_IRect_2 'n'
</MACRO>
<MACRO>
<NAME>MARSHAL_IMPL_Bonobo_Canvas_IRect_3</NAME>
#define MARSHAL_IMPL_Bonobo_Canvas_IRect_3 'o'
</MACRO>
<MACRO>
<NAME>MARSHAL_IMPL_Bonobo_Canvas_IRect_4</NAME>
#define MARSHAL_IMPL_Bonobo_Canvas_IRect_4 'b'
</MACRO>
<MACRO>
<NAME>MARSHAL_IMPL_Bonobo_Canvas_IRect_5</NAME>
#define MARSHAL_IMPL_Bonobo_Canvas_IRect_5 'o'
</MACRO>
<MACRO>
<NAME>MARSHAL_IMPL_Bonobo_Canvas_DRect_0</NAME>
#define MARSHAL_IMPL_Bonobo_Canvas_DRect_0 'B'
</MACRO>
<MACRO>
<NAME>MARSHAL_IMPL_Bonobo_Canvas_DRect_1</NAME>
#define MARSHAL_IMPL_Bonobo_Canvas_DRect_1 'o'
</MACRO>
<MACRO>
<NAME>MARSHAL_IMPL_Bonobo_Canvas_DRect_2</NAME>
#define MARSHAL_IMPL_Bonobo_Canvas_DRect_2 'n'
</MACRO>
<MACRO>
<NAME>MARSHAL_IMPL_Bonobo_Canvas_DRect_3</NAME>
#define MARSHAL_IMPL_Bonobo_Canvas_DRect_3 'o'
</MACRO>
<MACRO>
<NAME>MARSHAL_IMPL_Bonobo_Canvas_DRect_4</NAME>
#define MARSHAL_IMPL_Bonobo_Canvas_DRect_4 'b'
</MACRO>
<MACRO>
<NAME>MARSHAL_IMPL_Bonobo_Canvas_DRect_5</NAME>
#define MARSHAL_IMPL_Bonobo_Canvas_DRect_5 'o'
</MACRO>
<MACRO>
<NAME>MARSHAL_IMPL_Bonobo_Canvas_Buf_0</NAME>
#define MARSHAL_IMPL_Bonobo_Canvas_Buf_0 'B'
</MACRO>
<MACRO>
<NAME>MARSHAL_IMPL_Bonobo_Canvas_Buf_1</NAME>
#define MARSHAL_IMPL_Bonobo_Canvas_Buf_1 'o'
</MACRO>
<MACRO>
<NAME>MARSHAL_IMPL_Bonobo_Canvas_Buf_2</NAME>
#define MARSHAL_IMPL_Bonobo_Canvas_Buf_2 'n'
</MACRO>
<MACRO>
<NAME>MARSHAL_IMPL_Bonobo_Canvas_Buf_3</NAME>
#define MARSHAL_IMPL_Bonobo_Canvas_Buf_3 'o'
</MACRO>
<MACRO>
<NAME>MARSHAL_IMPL_Bonobo_Canvas_Buf_4</NAME>
#define MARSHAL_IMPL_Bonobo_Canvas_Buf_4 'b'
</MACRO>
<MACRO>
<NAME>MARSHAL_IMPL_Bonobo_Canvas_Buf_5</NAME>
#define MARSHAL_IMPL_Bonobo_Canvas_Buf_5 'o'
</MACRO>
<MACRO>
<NAME>MARSHAL_IMPL_Bonobo_Canvas_Point_0</NAME>
#define MARSHAL_IMPL_Bonobo_Canvas_Point_0 'B'
</MACRO>
<MACRO>
<NAME>MARSHAL_IMPL_Bonobo_Canvas_Point_1</NAME>
#define MARSHAL_IMPL_Bonobo_Canvas_Point_1 'o'
</MACRO>
<MACRO>
<NAME>MARSHAL_IMPL_Bonobo_Canvas_Point_2</NAME>
#define MARSHAL_IMPL_Bonobo_Canvas_Point_2 'n'
</MACRO>
<MACRO>
<NAME>MARSHAL_IMPL_Bonobo_Canvas_Point_3</NAME>
#define MARSHAL_IMPL_Bonobo_Canvas_Point_3 'o'
</MACRO>
<MACRO>
<NAME>MARSHAL_IMPL_Bonobo_Canvas_Point_4</NAME>
#define MARSHAL_IMPL_Bonobo_Canvas_Point_4 'b'
</MACRO>
<MACRO>
<NAME>MARSHAL_IMPL_Bonobo_Canvas_Point_5</NAME>
#define MARSHAL_IMPL_Bonobo_Canvas_Point_5 'o'
</MACRO>
<MACRO>
<NAME>MARSHAL_IMPL_Bonobo_Canvas_SVPSegment_0</NAME>
#define MARSHAL_IMPL_Bonobo_Canvas_SVPSegment_0 'B'
</MACRO>
<MACRO>
<NAME>MARSHAL_IMPL_Bonobo_Canvas_SVPSegment_1</NAME>
#define MARSHAL_IMPL_Bonobo_Canvas_SVPSegment_1 'o'
</MACRO>
<MACRO>
<NAME>MARSHAL_IMPL_Bonobo_Canvas_SVPSegment_2</NAME>
#define MARSHAL_IMPL_Bonobo_Canvas_SVPSegment_2 'n'
</MACRO>
<MACRO>
<NAME>MARSHAL_IMPL_Bonobo_Canvas_SVPSegment_3</NAME>
#define MARSHAL_IMPL_Bonobo_Canvas_SVPSegment_3 'o'
</MACRO>
<MACRO>
<NAME>MARSHAL_IMPL_Bonobo_Canvas_SVPSegment_4</NAME>
#define MARSHAL_IMPL_Bonobo_Canvas_SVPSegment_4 'b'
</MACRO>
<MACRO>
<NAME>MARSHAL_IMPL_Bonobo_Canvas_SVPSegment_5</NAME>
#define MARSHAL_IMPL_Bonobo_Canvas_SVPSegment_5 'o'
</MACRO>
<MACRO>
<NAME>MARSHAL_IMPL_Bonobo_Canvas_ArtUTA_0</NAME>
#define MARSHAL_IMPL_Bonobo_Canvas_ArtUTA_0 'B'
</MACRO>
<MACRO>
<NAME>MARSHAL_IMPL_Bonobo_Canvas_ArtUTA_1</NAME>
#define MARSHAL_IMPL_Bonobo_Canvas_ArtUTA_1 'o'
</MACRO>
<MACRO>
<NAME>MARSHAL_IMPL_Bonobo_Canvas_ArtUTA_2</NAME>
#define MARSHAL_IMPL_Bonobo_Canvas_ArtUTA_2 'n'
</MACRO>
<MACRO>
<NAME>MARSHAL_IMPL_Bonobo_Canvas_ArtUTA_3</NAME>
#define MARSHAL_IMPL_Bonobo_Canvas_ArtUTA_3 'o'
</MACRO>
<MACRO>
<NAME>MARSHAL_IMPL_Bonobo_Canvas_ArtUTA_4</NAME>
#define MARSHAL_IMPL_Bonobo_Canvas_ArtUTA_4 'b'
</MACRO>
<MACRO>
<NAME>MARSHAL_IMPL_Bonobo_Canvas_ArtUTA_5</NAME>
#define MARSHAL_IMPL_Bonobo_Canvas_ArtUTA_5 'o'
</MACRO>
<MACRO>
<NAME>MARSHAL_IMPL_Bonobo_Canvas_State_0</NAME>
#define MARSHAL_IMPL_Bonobo_Canvas_State_0 'B'
</MACRO>
<MACRO>
<NAME>MARSHAL_IMPL_Bonobo_Canvas_State_1</NAME>
#define MARSHAL_IMPL_Bonobo_Canvas_State_1 'o'
</MACRO>
<MACRO>
<NAME>MARSHAL_IMPL_Bonobo_Canvas_State_2</NAME>
#define MARSHAL_IMPL_Bonobo_Canvas_State_2 'n'
</MACRO>
<MACRO>
<NAME>MARSHAL_IMPL_Bonobo_Canvas_State_3</NAME>
#define MARSHAL_IMPL_Bonobo_Canvas_State_3 'o'
</MACRO>
<MACRO>
<NAME>MARSHAL_IMPL_Bonobo_Canvas_State_4</NAME>
#define MARSHAL_IMPL_Bonobo_Canvas_State_4 'b'
</MACRO>
<MACRO>
<NAME>MARSHAL_IMPL_Bonobo_Canvas_State_5</NAME>
#define MARSHAL_IMPL_Bonobo_Canvas_State_5 'o'
</MACRO>
<MACRO>
<NAME>MARSHAL_IMPL_Bonobo_PrintScissor_0</NAME>
#define MARSHAL_IMPL_Bonobo_PrintScissor_0 'B'
</MACRO>
<MACRO>
<NAME>MARSHAL_IMPL_Bonobo_PrintScissor_1</NAME>
#define MARSHAL_IMPL_Bonobo_PrintScissor_1 'o'
</MACRO>
<MACRO>
<NAME>MARSHAL_IMPL_Bonobo_PrintScissor_2</NAME>
#define MARSHAL_IMPL_Bonobo_PrintScissor_2 'n'
</MACRO>
<MACRO>
<NAME>MARSHAL_IMPL_Bonobo_PrintScissor_3</NAME>
#define MARSHAL_IMPL_Bonobo_PrintScissor_3 'o'
</MACRO>
<MACRO>
<NAME>MARSHAL_IMPL_Bonobo_PrintScissor_4</NAME>
#define MARSHAL_IMPL_Bonobo_PrintScissor_4 'b'
</MACRO>
<MACRO>
<NAME>MARSHAL_IMPL_Bonobo_PrintScissor_5</NAME>
#define MARSHAL_IMPL_Bonobo_PrintScissor_5 'o'
</MACRO>
<MACRO>
<NAME>MARSHAL_IMPL_Bonobo_PrintDimensions_0</NAME>
#define MARSHAL_IMPL_Bonobo_PrintDimensions_0 'B'
</MACRO>
<MACRO>
<NAME>MARSHAL_IMPL_Bonobo_PrintDimensions_1</NAME>
#define MARSHAL_IMPL_Bonobo_PrintDimensions_1 'o'
</MACRO>
<MACRO>
<NAME>MARSHAL_IMPL_Bonobo_PrintDimensions_2</NAME>
#define MARSHAL_IMPL_Bonobo_PrintDimensions_2 'n'
</MACRO>
<MACRO>
<NAME>MARSHAL_IMPL_Bonobo_PrintDimensions_3</NAME>
#define MARSHAL_IMPL_Bonobo_PrintDimensions_3 'o'
</MACRO>
<MACRO>
<NAME>MARSHAL_IMPL_Bonobo_PrintDimensions_4</NAME>
#define MARSHAL_IMPL_Bonobo_PrintDimensions_4 'b'
</MACRO>
<MACRO>
<NAME>MARSHAL_IMPL_Bonobo_PrintDimensions_5</NAME>
#define MARSHAL_IMPL_Bonobo_PrintDimensions_5 'o'
</MACRO>
<MACRO>
<NAME>MARSHAL_IMPL_Bonobo_Gdk_Event_0</NAME>
#define MARSHAL_IMPL_Bonobo_Gdk_Event_0 'B'
</MACRO>
<MACRO>
<NAME>MARSHAL_IMPL_Bonobo_Gdk_Event_1</NAME>
#define MARSHAL_IMPL_Bonobo_Gdk_Event_1 'o'
</MACRO>
<MACRO>
<NAME>MARSHAL_IMPL_Bonobo_Gdk_Event_2</NAME>
#define MARSHAL_IMPL_Bonobo_Gdk_Event_2 'n'
</MACRO>
<MACRO>
<NAME>MARSHAL_IMPL_Bonobo_Gdk_Event_3</NAME>
#define MARSHAL_IMPL_Bonobo_Gdk_Event_3 'o'
</MACRO>
<MACRO>
<NAME>MARSHAL_IMPL_Bonobo_Gdk_Event_4</NAME>
#define MARSHAL_IMPL_Bonobo_Gdk_Event_4 'b'
</MACRO>
<MACRO>
<NAME>MARSHAL_IMPL_Bonobo_Gdk_Event_5</NAME>
#define MARSHAL_IMPL_Bonobo_Gdk_Event_5 'o'
</MACRO>
<VARIABLE>
<NAME>Bonobo_Moniker__iinterface</NAME>
   extern ORBit_IInterface Bonobo_Moniker__iinterface;
</VARIABLE>
<MACRO>
<NAME>Bonobo_Moniker_IMETHODS_LEN</NAME>
#define Bonobo_Moniker_IMETHODS_LEN 6
</MACRO>
<VARIABLE>
<NAME>Bonobo_MonikerExtender__iinterface</NAME>
   extern ORBit_IInterface Bonobo_MonikerExtender__iinterface;
</VARIABLE>
<MACRO>
<NAME>Bonobo_MonikerExtender_IMETHODS_LEN</NAME>
#define Bonobo_MonikerExtender_IMETHODS_LEN 1
</MACRO>
<VARIABLE>
<NAME>Bonobo_Stream__iinterface</NAME>
   extern ORBit_IInterface Bonobo_Stream__iinterface;
</VARIABLE>
<MACRO>
<NAME>Bonobo_Stream_IMETHODS_LEN</NAME>
#define Bonobo_Stream_IMETHODS_LEN 8
</MACRO>
<VARIABLE>
<NAME>Bonobo_Storage__iinterface</NAME>
   extern ORBit_IInterface Bonobo_Storage__iinterface;
</VARIABLE>
<MACRO>
<NAME>Bonobo_Storage_IMETHODS_LEN</NAME>
#define Bonobo_Storage_IMETHODS_LEN 10
</MACRO>
<VARIABLE>
<NAME>Bonobo_MonikerContext__iinterface</NAME>
   extern ORBit_IInterface Bonobo_MonikerContext__iinterface;
</VARIABLE>
<MACRO>
<NAME>Bonobo_MonikerContext_IMETHODS_LEN</NAME>
#define Bonobo_MonikerContext_IMETHODS_LEN 3
</MACRO>
<VARIABLE>
<NAME>Bonobo_RunningContext__iinterface</NAME>
   extern ORBit_IInterface Bonobo_RunningContext__iinterface;
</VARIABLE>
<MACRO>
<NAME>Bonobo_RunningContext_IMETHODS_LEN</NAME>
#define Bonobo_RunningContext_IMETHODS_LEN 5
</MACRO>
<VARIABLE>
<NAME>Bonobo_Persist__iinterface</NAME>
   extern ORBit_IInterface Bonobo_Persist__iinterface;
</VARIABLE>
<MACRO>
<NAME>Bonobo_Persist_IMETHODS_LEN</NAME>
#define Bonobo_Persist_IMETHODS_LEN 3
</MACRO>
<VARIABLE>
<NAME>Bonobo_PersistFile__iinterface</NAME>
   extern ORBit_IInterface Bonobo_PersistFile__iinterface;
</VARIABLE>
<MACRO>
<NAME>Bonobo_PersistFile_IMETHODS_LEN</NAME>
#define Bonobo_PersistFile_IMETHODS_LEN 3
</MACRO>
<VARIABLE>
<NAME>Bonobo_PersistStorage__iinterface</NAME>
   extern ORBit_IInterface Bonobo_PersistStorage__iinterface;
</VARIABLE>
<MACRO>
<NAME>Bonobo_PersistStorage_IMETHODS_LEN</NAME>
#define Bonobo_PersistStorage_IMETHODS_LEN 2
</MACRO>
<VARIABLE>
<NAME>Bonobo_PersistStream__iinterface</NAME>
   extern ORBit_IInterface Bonobo_PersistStream__iinterface;
</VARIABLE>
<MACRO>
<NAME>Bonobo_PersistStream_IMETHODS_LEN</NAME>
#define Bonobo_PersistStream_IMETHODS_LEN 2
</MACRO>
<VARIABLE>
<NAME>Bonobo_Listener__iinterface</NAME>
   extern ORBit_IInterface Bonobo_Listener__iinterface;
</VARIABLE>
<MACRO>
<NAME>Bonobo_Listener_IMETHODS_LEN</NAME>
#define Bonobo_Listener_IMETHODS_LEN 1
</MACRO>
<VARIABLE>
<NAME>Bonobo_EventSource__iinterface</NAME>
   extern ORBit_IInterface Bonobo_EventSource__iinterface;
</VARIABLE>
<MACRO>
<NAME>Bonobo_EventSource_IMETHODS_LEN</NAME>
#define Bonobo_EventSource_IMETHODS_LEN 3
</MACRO>
<VARIABLE>
<NAME>Bonobo_UIComponent__iinterface</NAME>
   extern ORBit_IInterface Bonobo_UIComponent__iinterface;
</VARIABLE>
<MACRO>
<NAME>Bonobo_UIComponent_IMETHODS_LEN</NAME>
#define Bonobo_UIComponent_IMETHODS_LEN 8
</MACRO>
<VARIABLE>
<NAME>Bonobo_UIContainer__iinterface</NAME>
   extern ORBit_IInterface Bonobo_UIContainer__iinterface;
</VARIABLE>
<MACRO>
<NAME>Bonobo_UIContainer_IMETHODS_LEN</NAME>
#define Bonobo_UIContainer_IMETHODS_LEN 16
</MACRO>
<VARIABLE>
<NAME>Bonobo_PropertyBag__iinterface</NAME>
   extern ORBit_IInterface Bonobo_PropertyBag__iinterface;
</VARIABLE>
<MACRO>
<NAME>Bonobo_PropertyBag_IMETHODS_LEN</NAME>
#define Bonobo_PropertyBag_IMETHODS_LEN 10
</MACRO>
<VARIABLE>
<NAME>Bonobo_ConfigDatabase__iinterface</NAME>
   extern ORBit_IInterface Bonobo_ConfigDatabase__iinterface;
</VARIABLE>
<MACRO>
<NAME>Bonobo_ConfigDatabase_IMETHODS_LEN</NAME>
#define Bonobo_ConfigDatabase_IMETHODS_LEN 7
</MACRO>
<VARIABLE>
<NAME>Bonobo_ControlFrame__iinterface</NAME>
   extern ORBit_IInterface Bonobo_ControlFrame__iinterface;
</VARIABLE>
<MACRO>
<NAME>Bonobo_ControlFrame_IMETHODS_LEN</NAME>
#define Bonobo_ControlFrame_IMETHODS_LEN 9
</MACRO>
<VARIABLE>
<NAME>Bonobo_Control__iinterface</NAME>
   extern ORBit_IInterface Bonobo_Control__iinterface;
</VARIABLE>
<MACRO>
<NAME>Bonobo_Control_IMETHODS_LEN</NAME>
#define Bonobo_Control_IMETHODS_LEN 13
</MACRO>
<VARIABLE>
<NAME>Bonobo_PropertyControl__iinterface</NAME>
   extern ORBit_IInterface Bonobo_PropertyControl__iinterface;
</VARIABLE>
<MACRO>
<NAME>Bonobo_PropertyControl_IMETHODS_LEN</NAME>
#define Bonobo_PropertyControl_IMETHODS_LEN 3
</MACRO>
<VARIABLE>
<NAME>Bonobo_ZoomableFrame__iinterface</NAME>
   extern ORBit_IInterface Bonobo_ZoomableFrame__iinterface;
</VARIABLE>
<MACRO>
<NAME>Bonobo_ZoomableFrame_IMETHODS_LEN</NAME>
#define Bonobo_ZoomableFrame_IMETHODS_LEN 2
</MACRO>
<VARIABLE>
<NAME>Bonobo_Zoomable__iinterface</NAME>
   extern ORBit_IInterface Bonobo_Zoomable__iinterface;
</VARIABLE>
<MACRO>
<NAME>Bonobo_Zoomable_IMETHODS_LEN</NAME>
#define Bonobo_Zoomable_IMETHODS_LEN 14
</MACRO>
<VARIABLE>
<NAME>Bonobo_ItemContainer__iinterface</NAME>
   extern ORBit_IInterface Bonobo_ItemContainer__iinterface;
</VARIABLE>
<MACRO>
<NAME>Bonobo_ItemContainer_IMETHODS_LEN</NAME>
#define Bonobo_ItemContainer_IMETHODS_LEN 2
</MACRO>
<VARIABLE>
<NAME>Bonobo_Canvas_Component__iinterface</NAME>
   extern ORBit_IInterface Bonobo_Canvas_Component__iinterface;
</VARIABLE>
<MACRO>
<NAME>Bonobo_Canvas_Component_IMETHODS_LEN</NAME>
#define Bonobo_Canvas_Component_IMETHODS_LEN 12
</MACRO>
<VARIABLE>
<NAME>Bonobo_Canvas_ComponentProxy__iinterface</NAME>
   extern ORBit_IInterface Bonobo_Canvas_ComponentProxy__iinterface;
</VARIABLE>
<MACRO>
<NAME>Bonobo_Canvas_ComponentProxy_IMETHODS_LEN</NAME>
#define Bonobo_Canvas_ComponentProxy_IMETHODS_LEN 4
</MACRO>
<VARIABLE>
<NAME>Bonobo_ControlFactory__iinterface</NAME>
   extern ORBit_IInterface Bonobo_ControlFactory__iinterface;
</VARIABLE>
<MACRO>
<NAME>Bonobo_ControlFactory_IMETHODS_LEN</NAME>
#define Bonobo_ControlFactory_IMETHODS_LEN 1
</MACRO>
<VARIABLE>
<NAME>Bonobo_CanvasComponentFactory__iinterface</NAME>
   extern ORBit_IInterface Bonobo_CanvasComponentFactory__iinterface;
</VARIABLE>
<MACRO>
<NAME>Bonobo_CanvasComponentFactory_IMETHODS_LEN</NAME>
#define Bonobo_CanvasComponentFactory_IMETHODS_LEN 1
</MACRO>
<VARIABLE>
<NAME>Bonobo_Embeddable__iinterface</NAME>
   extern ORBit_IInterface Bonobo_Embeddable__iinterface;
</VARIABLE>
<MACRO>
<NAME>Bonobo_Embeddable_IMETHODS_LEN</NAME>
#define Bonobo_Embeddable_IMETHODS_LEN 0
</MACRO>
<VARIABLE>
<NAME>Bonobo_Print__iinterface</NAME>
   extern ORBit_IInterface Bonobo_Print__iinterface;
</VARIABLE>
<MACRO>
<NAME>Bonobo_Print_IMETHODS_LEN</NAME>
#define Bonobo_Print_IMETHODS_LEN 1
</MACRO>
<VARIABLE>
<NAME>Bonobo_Clipboard__iinterface</NAME>
   extern ORBit_IInterface Bonobo_Clipboard__iinterface;
</VARIABLE>
<MACRO>
<NAME>Bonobo_Clipboard_IMETHODS_LEN</NAME>
#define Bonobo_Clipboard_IMETHODS_LEN 3
</MACRO>
<VARIABLE>
<NAME>Bonobo_ClipboardStore__iinterface</NAME>
   extern ORBit_IInterface Bonobo_ClipboardStore__iinterface;
</VARIABLE>
<MACRO>
<NAME>Bonobo_ClipboardStore_IMETHODS_LEN</NAME>
#define Bonobo_ClipboardStore_IMETHODS_LEN 2
</MACRO>
<MACRO>
<NAME>BONOBO_PROPERTY_READABLE</NAME>
#define BONOBO_PROPERTY_READABLE      Bonobo_PROPERTY_READABLE
</MACRO>
<MACRO>
<NAME>BONOBO_PROPERTY_WRITEABLE</NAME>
#define BONOBO_PROPERTY_WRITEABLE     Bonobo_PROPERTY_WRITEABLE
</MACRO>
<MACRO>
<NAME>BONOBO_PROPERTY_WRITABLE</NAME>
#define BONOBO_PROPERTY_WRITABLE      Bonobo_PROPERTY_WRITEABLE
</MACRO>
<MACRO>
<NAME>BONOBO_PROPERTY_NO_LISTENING</NAME>
#define BONOBO_PROPERTY_NO_LISTENING  Bonobo_PROPERTY_NO_LISTENING 
</MACRO>
<MACRO>
<NAME>BONOBO_PROPERTY_NO_AUTONOTIFY</NAME>
#define BONOBO_PROPERTY_NO_AUTONOTIFY Bonobo_PROPERTY_NO_AUTONOTIFY 
</MACRO>
<STRUCT>
<NAME>BonoboPropertyBagPrivate</NAME>
</STRUCT>
<STRUCT>
<NAME>BonoboPropertyBag</NAME>
</STRUCT>
<STRUCT>
<NAME>BonoboProperty</NAME>
</STRUCT>
<STRUCT>
<NAME>BonoboPropertyPrivate</NAME>
</STRUCT>
<USER_FUNCTION>
<NAME>BonoboPropertyGetFn</NAME>
<RETURNS>void </RETURNS>
BonoboPropertyBag *bag,
				     BonoboArg         *arg,
				     guint              arg_id,
				     CORBA_Environment *ev,
				     gpointer           user_data
</USER_FUNCTION>
<USER_FUNCTION>
<NAME>BonoboPropertySetFn</NAME>
<RETURNS>void </RETURNS>
BonoboPropertyBag *bag,
				     const BonoboArg   *arg,
				     guint              arg_id,
				     CORBA_Environment *ev,
				     gpointer           user_data
</USER_FUNCTION>
<STRUCT>
<NAME>BonoboProperty</NAME>
struct BonoboProperty {
	char		      *name;
	int                    idx;
	BonoboArgType          type;
	BonoboArg             *default_value;
	char		      *doctitle;
	char		      *docstring;
	Bonobo_PropertyFlags   flags;

	BonoboPropertyPrivate *priv;
};
</STRUCT>
<STRUCT>
<NAME>BonoboPropertyBag</NAME>
struct BonoboPropertyBag {
	BonoboObject             parent;
	BonoboPropertyBagPrivate *priv;
	BonoboEventSource        *es;
};
</STRUCT>
<TYPEDEF>
<NAME>BonoboPropertyBagClass</NAME>
typedef struct {
	BonoboObjectClass        parent;

	POA_Bonobo_PropertyBag__epv epv;
} BonoboPropertyBagClass;
</TYPEDEF>
<MACRO>
<NAME>BONOBO_TYPE_PROPERTY_BAG</NAME>
#define BONOBO_TYPE_PROPERTY_BAG        (bonobo_property_bag_get_type ())
</MACRO>
<MACRO>
<NAME>BONOBO_PROPERTY_BAG_TYPE</NAME>
#define BONOBO_PROPERTY_BAG_TYPE        BONOBO_TYPE_PROPERTY_BAG /* deprecated, you should use BONOBO_TYPE_PROPERTY_BAG */
</MACRO>
<MACRO>
<NAME>BONOBO_PROPERTY_BAG</NAME>
#define BONOBO_PROPERTY_BAG(o)		(G_TYPE_CHECK_INSTANCE_CAST ((o), BONOBO_TYPE_PROPERTY_BAG, BonoboPropertyBag))
</MACRO>
<MACRO>
<NAME>BONOBO_PROPERTY_BAG_CLASS</NAME>
#define BONOBO_PROPERTY_BAG_CLASS(k)	(G_TYPE_CHECK_CLASS_CAST((k), BONOBO_TYPE_PROPERTY_BAG, BonoboPropertyBagClass))
</MACRO>
<MACRO>
<NAME>BONOBO_IS_PROPERTY_BAG</NAME>
#define BONOBO_IS_PROPERTY_BAG(o)       (G_TYPE_CHECK_INSTANCE_TYPE ((o), BONOBO_TYPE_PROPERTY_BAG))
</MACRO>
<MACRO>
<NAME>BONOBO_IS_PROPERTY_BAG_CLASS</NAME>
#define BONOBO_IS_PROPERTY_BAG_CLASS(k)	(G_TYPE_CHECK_CLASS_TYPE ((k), BONOBO_TYPE_PROPERTY_BAG))
</MACRO>
<FUNCTION>
<NAME>bonobo_property_bag_get_type</NAME>
<RETURNS>GType</RETURNS>
void
</FUNCTION>
<FUNCTION>
<NAME>bonobo_property_bag_new</NAME>
<RETURNS>BonoboPropertyBag  *</RETURNS>
BonoboPropertyGetFn get_prop_cb,BonoboPropertySetFn set_prop_cb,gpointer            user_data
</FUNCTION>
<FUNCTION>
<NAME>bonobo_property_bag_new_closure</NAME>
<RETURNS>BonoboPropertyBag  *</RETURNS>
GClosure          *get_prop,GClosure          *set_prop
</FUNCTION>
<FUNCTION>
<NAME>bonobo_property_bag_new_full</NAME>
<RETURNS>BonoboPropertyBag  *</RETURNS>
GClosure          *get_prop,GClosure          *set_prop,BonoboEventSource *event_source
</FUNCTION>
<FUNCTION>
<NAME>bonobo_property_bag_construct</NAME>
<RETURNS>BonoboPropertyBag  *</RETURNS>
BonoboPropertyBag *pb,GClosure          *get_prop,GClosure          *set_prop,BonoboEventSource *event_source
</FUNCTION>
<FUNCTION>
<NAME>bonobo_property_bag_add</NAME>
<RETURNS>void</RETURNS>
BonoboPropertyBag   *pb,const char          *name,int                  idx,BonoboArgType        type,BonoboArg           *default_value,const char          *doctitle,Bonobo_PropertyFlags flags
</FUNCTION>
<FUNCTION>
<NAME>bonobo_property_bag_add_full</NAME>
<RETURNS>void</RETURNS>
BonoboPropertyBag    *pb,const char           *name,int                   idx,BonoboArgType         type,BonoboArg            *default_value,const char           *doctitle,const char           *docstring,Bonobo_PropertyFlags  flags,GClosure             *get_prop,GClosure             *set_prop
</FUNCTION>
<FUNCTION>
<NAME>bonobo_property_bag_remove</NAME>
<RETURNS>void</RETURNS>
BonoboPropertyBag    *pb,const char           *name
</FUNCTION>
<FUNCTION>
<NAME>bonobo_property_bag_map_params</NAME>
<RETURNS>void</RETURNS>
BonoboPropertyBag   *pb,GObject             *on_instance,const GParamSpec   **pspecs,guint                n_params
</FUNCTION>
<FUNCTION>
<NAME>bonobo_property_bag_get_prop_list</NAME>
<RETURNS>GList  *</RETURNS>
BonoboPropertyBag *pb
</FUNCTION>
<STRUCT>
<NAME>BonoboMonikerPrivate</NAME>
</STRUCT>
<MACRO>
<NAME>BONOBO_TYPE_MONIKER</NAME>
#define BONOBO_TYPE_MONIKER        (bonobo_moniker_get_type ())
</MACRO>
<MACRO>
<NAME>BONOBO_MONIKER_TYPE</NAME>
#define BONOBO_MONIKER_TYPE        BONOBO_TYPE_MONIKER /* deprecated, you should use BONOBO_TYPE_MONIKER */
</MACRO>
<MACRO>
<NAME>BONOBO_MONIKER</NAME>
#define BONOBO_MONIKER(o)          (G_TYPE_CHECK_INSTANCE_CAST ((o), BONOBO_TYPE_MONIKER, BonoboMoniker))
</MACRO>
<MACRO>
<NAME>BONOBO_MONIKER_CLASS</NAME>
#define BONOBO_MONIKER_CLASS(k)    (G_TYPE_CHECK_CLASS_CAST((k), BONOBO_TYPE_MONIKER, BonoboMonikerClass))
</MACRO>
<MACRO>
<NAME>BONOBO_IS_MONIKER</NAME>
#define BONOBO_IS_MONIKER(o)       (G_TYPE_CHECK_INSTANCE_TYPE ((o), BONOBO_TYPE_MONIKER))
</MACRO>
<MACRO>
<NAME>BONOBO_IS_MONIKER_CLASS</NAME>
#define BONOBO_IS_MONIKER_CLASS(k) (G_TYPE_CHECK_CLASS_TYPE ((k), BONOBO_TYPE_MONIKER))
</MACRO>
<TYPEDEF>
<NAME>BonoboMoniker</NAME>
typedef struct {
        BonoboObject         object;
	
	BonoboMonikerPrivate *priv;
} BonoboMoniker;
</TYPEDEF>
<TYPEDEF>
<NAME>BonoboMonikerClass</NAME>
typedef struct {
	BonoboObjectClass      parent_class;

	POA_Bonobo_Moniker__epv epv;

	/* virtual methods */
	Bonobo_Unknown (*resolve)            (BonoboMoniker               *moniker,
					      const Bonobo_ResolveOptions *options,
					      const CORBA_char            *requested_interface,
					      CORBA_Environment           *ev);

	void           (*set_internal_name)  (BonoboMoniker               *moniker,
					      const char                  *unescaped_name);
	const char    *(*get_internal_name)  (BonoboMoniker               *moniker);

	gpointer        dummy;
} BonoboMonikerClass;
</TYPEDEF>
<FUNCTION>
<NAME>bonobo_moniker_get_type</NAME>
<RETURNS>GType  </RETURNS>
void
</FUNCTION>
<FUNCTION>
<NAME>bonobo_moniker_construct</NAME>
<RETURNS>BonoboMoniker  *</RETURNS>
BonoboMoniker     *moniker,const char        *prefix
</FUNCTION>
<FUNCTION>
<NAME>bonobo_moniker_get_parent</NAME>
<RETURNS>Bonobo_Moniker  </RETURNS>
BonoboMoniker     *moniker,CORBA_Environment *opt_ev
</FUNCTION>
<FUNCTION>
<NAME>bonobo_moniker_set_parent</NAME>
<RETURNS>void  </RETURNS>
BonoboMoniker     *moniker,Bonobo_Moniker     parent,CORBA_Environment *opt_ev
</FUNCTION>
<FUNCTION>
<NAME>bonobo_moniker_get_name</NAME>
<RETURNS>const char     *</RETURNS>
BonoboMoniker     *moniker
</FUNCTION>
<FUNCTION>
<NAME>bonobo_moniker_get_name_full</NAME>
<RETURNS>const char     *</RETURNS>
BonoboMoniker     *moniker
</FUNCTION>
<FUNCTION>
<NAME>bonobo_moniker_get_name_escaped</NAME>
<RETURNS>char           *</RETURNS>
BonoboMoniker     *moniker
</FUNCTION>
<FUNCTION>
<NAME>bonobo_moniker_set_name</NAME>
<RETURNS>void  </RETURNS>
BonoboMoniker     *moniker,const char        *unescaped_name
</FUNCTION>
<FUNCTION>
<NAME>bonobo_moniker_get_prefix</NAME>
<RETURNS>const char     *</RETURNS>
BonoboMoniker     *moniker
</FUNCTION>
<FUNCTION>
<NAME>bonobo_moniker_set_case_sensitive</NAME>
<RETURNS>void  </RETURNS>
BonoboMoniker     *moniker,gboolean           sensitive
</FUNCTION>
<FUNCTION>
<NAME>bonobo_moniker_get_case_sensitive</NAME>
<RETURNS>gboolean  </RETURNS>
BonoboMoniker     *moniker
</FUNCTION>
<MACRO>
<NAME>BONOBO_TYPE_ITEM_HANDLER</NAME>
#define BONOBO_TYPE_ITEM_HANDLER        (bonobo_item_handler_get_type ())
</MACRO>
<MACRO>
<NAME>BONOBO_ITEM_HANDLER_TYPE</NAME>
#define BONOBO_ITEM_HANDLER_TYPE        BONOBO_TYPE_ITEM_HANDLER /* deprecated, you should use BONOBO_TYPE_ITEM_HANDLER */
</MACRO>
<MACRO>
<NAME>BONOBO_ITEM_HANDLER</NAME>
#define BONOBO_ITEM_HANDLER(o)          (G_TYPE_CHECK_INSTANCE_CAST ((o), BONOBO_TYPE_ITEM_HANDLER, BonoboItemHandler))
</MACRO>
<MACRO>
<NAME>BONOBO_ITEM_HANDLER_CLASS</NAME>
#define BONOBO_ITEM_HANDLER_CLASS(k)    (G_TYPE_CHECK_CLASS_CAST((k), BONOBO_TYPE_ITEM_HANDLER, BonoboItemHandlerClass))
</MACRO>
<MACRO>
<NAME>BONOBO_IS_ITEM_HANDLER</NAME>
#define BONOBO_IS_ITEM_HANDLER(o)       (G_TYPE_CHECK_INSTANCE_TYPE ((o), BONOBO_TYPE_ITEM_HANDLER))
</MACRO>
<MACRO>
<NAME>BONOBO_IS_ITEM_HANDLER_CLASS</NAME>
#define BONOBO_IS_ITEM_HANDLER_CLASS(k) (G_TYPE_CHECK_CLASS_TYPE ((k), BONOBO_TYPE_ITEM_HANDLER))
</MACRO>
<STRUCT>
<NAME>BonoboItemHandlerPrivate</NAME>
</STRUCT>
<STRUCT>
<NAME>BonoboItemHandler</NAME>
</STRUCT>
<STRUCT>
<NAME>BonoboItemHandler</NAME>
struct BonoboItemHandler {
	BonoboObject base;

	POA_Bonobo_ItemContainer__epv epv;

	BonoboItemHandlerPrivate      *priv;
};
</STRUCT>
<TYPEDEF>
<NAME>BonoboItemHandlerClass</NAME>
typedef struct {
	BonoboObjectClass parent_class;

	POA_Bonobo_ItemContainer__epv epv;
} BonoboItemHandlerClass;
</TYPEDEF>
<FUNCTION>
<NAME>bonobo_item_handler_get_type</NAME>
<RETURNS>GType  </RETURNS>
void
</FUNCTION>
<FUNCTION>
<NAME>bonobo_item_handler_new</NAME>
<RETURNS>BonoboItemHandler    *</RETURNS>
BonoboItemHandlerEnumObjectsFn enum_objects,BonoboItemHandlerGetObjectFn   get_object,gpointer                       user_data
</FUNCTION>
<FUNCTION>
<NAME>bonobo_item_handler_new_closure</NAME>
<RETURNS>BonoboItemHandler    *</RETURNS>
GClosure *enum_objects,GClosure *get_object
</FUNCTION>
<FUNCTION>
<NAME>bonobo_item_handler_construct</NAME>
<RETURNS>BonoboItemHandler    *</RETURNS>
BonoboItemHandler *handler,GClosure          *enum_objects,GClosure          *get_object
</FUNCTION>
<TYPEDEF>
<NAME>BonoboItemOption</NAME>
typedef struct {
	char *key;
	char *value;
} BonoboItemOption;
</TYPEDEF>
<FUNCTION>
<NAME>bonobo_item_option_parse</NAME>
<RETURNS>GSList  *</RETURNS>
const char *option_string
</FUNCTION>
<FUNCTION>
<NAME>bonobo_item_options_free</NAME>
<RETURNS>void  </RETURNS>
GSList *options
</FUNCTION>
<FUNCTION>
<NAME>bonobo_config_get_string</NAME>
<RETURNS>gchar  *</RETURNS>
Bonobo_ConfigDatabase  db,const char            *key,CORBA_Environment     *opt_ev
</FUNCTION>
<FUNCTION>
<NAME>bonobo_config_get_string_with_default</NAME>
<RETURNS>gchar  *</RETURNS>
Bonobo_ConfigDatabase  db,const char            *key,gchar                 *defval,gboolean              *def
</FUNCTION>
<FUNCTION>
<NAME>bonobo_config_get_short</NAME>
<RETURNS>gint16</RETURNS>
Bonobo_ConfigDatabase  db,const char            *key,CORBA_Environment     *opt_ev
</FUNCTION>
<FUNCTION>
<NAME>bonobo_config_get_short_with_default</NAME>
<RETURNS>gint16</RETURNS>
Bonobo_ConfigDatabase  db,const char            *key,gint16                 defval,gboolean              *def
</FUNCTION>
<FUNCTION>
<NAME>bonobo_config_get_ushort</NAME>
<RETURNS>guint16</RETURNS>
Bonobo_ConfigDatabase  db,const char            *key,CORBA_Environment     *opt_ev
</FUNCTION>
<FUNCTION>
<NAME>bonobo_config_get_ushort_with_default</NAME>
<RETURNS>guint16</RETURNS>
Bonobo_ConfigDatabase  db,const char            *key,guint16                defval,gboolean              *def
</FUNCTION>
<FUNCTION>
<NAME>bonobo_config_get_long</NAME>
<RETURNS>gint32</RETURNS>
Bonobo_ConfigDatabase  db,const char            *key,CORBA_Environment     *opt_ev
</FUNCTION>
<FUNCTION>
<NAME>bonobo_config_get_long_with_default</NAME>
<RETURNS>gint32</RETURNS>
Bonobo_ConfigDatabase  db,const char            *key,gint32                 defval,gboolean              *def
</FUNCTION>
<FUNCTION>
<NAME>bonobo_config_get_ulong</NAME>
<RETURNS>guint32</RETURNS>
Bonobo_ConfigDatabase  db,const char            *key,CORBA_Environment     *opt_ev
</FUNCTION>
<FUNCTION>
<NAME>bonobo_config_get_ulong_with_default</NAME>
<RETURNS>guint32</RETURNS>
Bonobo_ConfigDatabase  db,const char            *key,guint32                defval,gboolean              *def
</FUNCTION>
<FUNCTION>
<NAME>bonobo_config_get_float</NAME>
<RETURNS>gfloat</RETURNS>
Bonobo_ConfigDatabase  db,const char            *key,CORBA_Environment     *opt_ev
</FUNCTION>
<FUNCTION>
<NAME>bonobo_config_get_float_with_default</NAME>
<RETURNS>gfloat</RETURNS>
Bonobo_ConfigDatabase  db,const char            *key,gfloat                 defval,gboolean              *def
</FUNCTION>
<FUNCTION>
<NAME>bonobo_config_get_double</NAME>
<RETURNS>gdouble</RETURNS>
Bonobo_ConfigDatabase  db,const char            *key,CORBA_Environment     *opt_ev
</FUNCTION>
<FUNCTION>
<NAME>bonobo_config_get_double_with_default</NAME>
<RETURNS>gdouble</RETURNS>
Bonobo_ConfigDatabase  db,const char            *key,gdouble                defval,gboolean              *def
</FUNCTION>
<FUNCTION>
<NAME>bonobo_config_get_boolean</NAME>
<RETURNS>gboolean</RETURNS>
Bonobo_ConfigDatabase  db,const char            *key,CORBA_Environment     *opt_ev
</FUNCTION>
<FUNCTION>
<NAME>bonobo_config_get_boolean_with_default</NAME>
<RETURNS>gboolean</RETURNS>
Bonobo_ConfigDatabase  db,const char            *key,gboolean               defval,gboolean              *def
</FUNCTION>
<FUNCTION>
<NAME>bonobo_config_get_char</NAME>
<RETURNS>gchar</RETURNS>
Bonobo_ConfigDatabase  db,const char            *key,CORBA_Environment     *opt_ev
</FUNCTION>
<FUNCTION>
<NAME>bonobo_config_get_char_with_default</NAME>
<RETURNS>gchar</RETURNS>
Bonobo_ConfigDatabase  db,const char            *key,gchar                  defval,gboolean              *def
</FUNCTION>
<FUNCTION>
<NAME>bonobo_config_get_value</NAME>
<RETURNS>CORBA_any  *</RETURNS>
Bonobo_ConfigDatabase  db,const char            *key,CORBA_TypeCode         opt_tc,CORBA_Environment     *opt_ev
</FUNCTION>
<FUNCTION>
<NAME>bonobo_config_set_string</NAME>
<RETURNS>void</RETURNS>
Bonobo_ConfigDatabase  db,const char            *key,const char            *value,CORBA_Environment     *opt_ev
</FUNCTION>
<FUNCTION>
<NAME>bonobo_config_set_short</NAME>
<RETURNS>void</RETURNS>
Bonobo_ConfigDatabase  db,const char            *key,gint16                 value,CORBA_Environment     *opt_ev
</FUNCTION>
<FUNCTION>
<NAME>bonobo_config_set_ushort</NAME>
<RETURNS>void</RETURNS>
Bonobo_ConfigDatabase  db,const char            *key,guint16                value,CORBA_Environment     *opt_ev
</FUNCTION>
<FUNCTION>
<NAME>bonobo_config_set_long</NAME>
<RETURNS>void</RETURNS>
Bonobo_ConfigDatabase  db,const char            *key,gint32                 value,CORBA_Environment     *opt_ev
</FUNCTION>
<FUNCTION>
<NAME>bonobo_config_set_ulong</NAME>
<RETURNS>void</RETURNS>
Bonobo_ConfigDatabase  db,const char            *key,guint32                value,CORBA_Environment     *opt_ev
</FUNCTION>
<FUNCTION>
<NAME>bonobo_config_set_float</NAME>
<RETURNS>void</RETURNS>
Bonobo_ConfigDatabase  db,const char            *key,gfloat                 value,CORBA_Environment     *opt_ev
</FUNCTION>
<FUNCTION>
<NAME>bonobo_config_set_double</NAME>
<RETURNS>void</RETURNS>
Bonobo_ConfigDatabase  db,const char            *key,gdouble                value,CORBA_Environment     *opt_ev
</FUNCTION>
<FUNCTION>
<NAME>bonobo_config_set_boolean</NAME>
<RETURNS>void</RETURNS>
Bonobo_ConfigDatabase  db,const char            *key,gboolean               value,CORBA_Environment     *opt_ev
</FUNCTION>
<FUNCTION>
<NAME>bonobo_config_set_char</NAME>
<RETURNS>void</RETURNS>
Bonobo_ConfigDatabase  db,const char            *key,gchar                  value,CORBA_Environment     *opt_ev
</FUNCTION>
<FUNCTION>
<NAME>bonobo_config_set_value</NAME>
<RETURNS>void</RETURNS>
Bonobo_ConfigDatabase  db,const char            *key,CORBA_any             *value,CORBA_Environment     *opt_ev
</FUNCTION>
<FUNCTION>
<NAME>bonobo_context_get</NAME>
<RETURNS>Bonobo_Unknown  </RETURNS>
const CORBA_char  *context_name,CORBA_Environment *opt_ev
</FUNCTION>
<FUNCTION>
<NAME>bonobo_context_add</NAME>
<RETURNS>void  </RETURNS>
const CORBA_char  *context_name,Bonobo_Unknown     context
</FUNCTION>
<FUNCTION>
<NAME>bonobo_context_running_get</NAME>
<RETURNS>BonoboObject   *</RETURNS>
void
</FUNCTION>
<FUNCTION>
<NAME>bonobo_running_context_auto_exit_unref</NAME>
<RETURNS>void  </RETURNS>
BonoboObject *object
</FUNCTION>
<MACRO>
<NAME>BONOBO_TYPE_EVENT_SOURCE</NAME>
#define BONOBO_TYPE_EVENT_SOURCE        (bonobo_event_source_get_type ())
</MACRO>
<MACRO>
<NAME>BONOBO_EVENT_SOURCE_TYPE</NAME>
#define BONOBO_EVENT_SOURCE_TYPE        BONOBO_TYPE_EVENT_SOURCE /* deprecated, you should use BONOBO_TYPE_EVENT_SOURCE */
</MACRO>
<MACRO>
<NAME>BONOBO_EVENT_SOURCE</NAME>
#define BONOBO_EVENT_SOURCE(o)          (G_TYPE_CHECK_INSTANCE_CAST ((o), BONOBO_TYPE_EVENT_SOURCE, BonoboEventSource))
</MACRO>
<MACRO>
<NAME>BONOBO_EVENT_SOURCE_CLASS</NAME>
#define BONOBO_EVENT_SOURCE_CLASS(k)    (G_TYPE_CHECK_CLASS_CAST((k), BONOBO_TYPE_EVENT_SOURCE, BonoboEventSourceClass))
</MACRO>
<MACRO>
<NAME>BONOBO_IS_EVENT_SOURCE</NAME>
#define BONOBO_IS_EVENT_SOURCE(o)       (G_TYPE_CHECK_INSTANCE_TYPE ((o), BONOBO_TYPE_EVENT_SOURCE))
</MACRO>
<MACRO>
<NAME>BONOBO_IS_EVENT_SOURCE_CLASS</NAME>
#define BONOBO_IS_EVENT_SOURCE_CLASS(k) (G_TYPE_CHECK_CLASS_TYPE ((k), BONOBO_TYPE_EVENT_SOURCE))
</MACRO>
<STRUCT>
<NAME>BonoboEventSourcePrivate</NAME>
</STRUCT>
<TYPEDEF>
<NAME>BonoboEventSource</NAME>
typedef struct {
	BonoboObject             parent;
	BonoboEventSourcePrivate *priv;
} BonoboEventSource;
</TYPEDEF>
<TYPEDEF>
<NAME>BonoboEventSourceClass</NAME>
typedef struct {
	BonoboObjectClass parent_class;

	POA_Bonobo_EventSource__epv epv;
} BonoboEventSourceClass;
</TYPEDEF>
<FUNCTION>
<NAME>bonobo_event_source_get_type</NAME>
<RETURNS>GType  </RETURNS>
void
</FUNCTION>
<FUNCTION>
<NAME>bonobo_event_source_new</NAME>
<RETURNS>BonoboEventSource  *</RETURNS>
void
</FUNCTION>
<FUNCTION>
<NAME>bonobo_event_source_has_listener</NAME>
<RETURNS>gboolean  </RETURNS>
BonoboEventSource *event_source,const char        *event_name
</FUNCTION>
<FUNCTION>
<NAME>bonobo_event_source_notify_listeners</NAME>
<RETURNS>void  </RETURNS>
BonoboEventSource *event_source,const char        *event_name,const CORBA_any   *opt_value,CORBA_Environment *opt_ev
</FUNCTION>
<FUNCTION>
<NAME>bonobo_event_source_notify_listeners_full</NAME>
<RETURNS>void  </RETURNS>
BonoboEventSource *event_source,const char        *path,const char        *type,const char        *subtype,const CORBA_any   *opt_value,CORBA_Environment *opt_ev
</FUNCTION>
<FUNCTION>
<NAME>bonobo_event_source_client_remove_listener</NAME>
<RETURNS>void  </RETURNS>
Bonobo_Unknown     object,Bonobo_Listener    listener,CORBA_Environment *opt_ev
</FUNCTION>
<FUNCTION>
<NAME>bonobo_event_source_client_add_listener</NAME>
<RETURNS>void  </RETURNS>
Bonobo_Unknown           object,BonoboListenerCallbackFn event_callback,const char              *opt_mask,CORBA_Environment       *opt_ev,gpointer                 user_data
</FUNCTION>
<FUNCTION>
<NAME>bonobo_event_source_client_add_listener_closure</NAME>
<RETURNS>void  </RETURNS>
Bonobo_Unknown     object,GClosure          *callback,const char        *opt_mask,CORBA_Environment *opt_ev
</FUNCTION>
<FUNCTION>
<NAME>bonobo_event_source_client_add_listener_full</NAME>
<RETURNS>Bonobo_Listener  </RETURNS>
Bonobo_Unknown     object,GClosure          *callback,const char        *opt_mask,CORBA_Environment *opt_ev
</FUNCTION>
<FUNCTION>
<NAME>bonobo_event_source_ignore_listeners</NAME>
<RETURNS>void  </RETURNS>
BonoboEventSource *event_source
</FUNCTION>
<MACRO>
<NAME>bonobo_exception_set</NAME>
#define bonobo_exception_set(opt_ev,repo_id) G_STMT_START{                  \
     if (opt_ev) {                                                          \
         CORBA_exception_set (opt_ev, CORBA_USER_EXCEPTION, repo_id, NULL); \
     } else {                                                               \
	 g_log (G_LOG_DOMAIN,						    \
		G_LOG_LEVEL_CRITICAL,					    \
		"file %s: line %d: bonobo exception: `%s'",                 \
		__FILE__,						    \
		__LINE__,						    \
		bonobo_exception_repoid_to_text (repo_id));                 \
     } }G_STMT_END
</MACRO>
<MACRO>
<NAME>bonobo_return_if_fail</NAME>
#define bonobo_return_if_fail(expr,opt_ev) G_STMT_START{		\
     if (!(expr)) {							\
         if (opt_ev)                                                    \
	     CORBA_exception_set (opt_ev, CORBA_USER_EXCEPTION,         \
				  ex_Bonobo_BadArg, NULL);              \
         return;                                                        \
     };	}G_STMT_END
</MACRO>
<MACRO>
<NAME>bonobo_return_val_if_fail</NAME>
#define bonobo_return_val_if_fail(expr,val,opt_ev) G_STMT_START{	\
     if (!(expr)) {							\
         if (opt_ev)                                                    \
	     CORBA_exception_set (opt_ev, CORBA_USER_EXCEPTION,         \
				  ex_Bonobo_BadArg, NULL);              \
         return val;                                                    \
     };	}G_STMT_END
</MACRO>
<MACRO>
<NAME>bonobo_return_if_fail</NAME>
#define bonobo_return_if_fail(expr,opt_ev) G_STMT_START{		\
     if (!(expr)) {							\
         if (opt_ev)                                                    \
	     CORBA_exception_set (opt_ev, CORBA_USER_EXCEPTION,         \
				  ex_Bonobo_BadArg, NULL);              \
	 g_log (G_LOG_DOMAIN,						\
		G_LOG_LEVEL_CRITICAL,					\
		"file %s: line %d (%s): assertion `%s' failed.",	\
		__FILE__,						\
		__LINE__,						\
		G_GNUC_PRETTY_FUNCTION,					\
		#expr);							\
         return;                                                        \
     };	}G_STMT_END
</MACRO>
<MACRO>
<NAME>bonobo_return_val_if_fail</NAME>
#define bonobo_return_val_if_fail(expr,val,opt_ev) G_STMT_START{	\
     if (!(expr)) {							\
         if (opt_ev)                                                    \
	     CORBA_exception_set (opt_ev, CORBA_USER_EXCEPTION,         \
				  ex_Bonobo_BadArg, NULL);              \
	 g_log (G_LOG_DOMAIN,						\
		G_LOG_LEVEL_CRITICAL,					\
		"file %s: line %d (%s): assertion `%s' failed.",	\
		__FILE__,						\
		__LINE__,						\
		G_GNUC_PRETTY_FUNCTION,					\
		#expr);							\
         return val;                                                    \
     };	}G_STMT_END
</MACRO>
<MACRO>
<NAME>BONOBO_EX</NAME>
#define BONOBO_EX(ev)         ((ev) && (ev)->_major != CORBA_NO_EXCEPTION)
</MACRO>
<MACRO>
<NAME>BONOBO_USER_EX</NAME>
#define BONOBO_USER_EX(ev,id) ((ev) && (ev)->_major == CORBA_USER_EXCEPTION &&	\
			       (ev)->_id != NULL && !strcmp ((ev)->_id, id))
</MACRO>
<MACRO>
<NAME>BONOBO_EX_REPOID</NAME>
#define BONOBO_EX_REPOID(ev)  (ev)->_id
</MACRO>
<MACRO>
<NAME>BONOBO_RET_EX</NAME>
#define BONOBO_RET_EX(ev)		\
	G_STMT_START{			\
		if (BONOBO_EX (ev))	\
			return;		\
	}G_STMT_END
</MACRO>
<MACRO>
<NAME>BONOBO_RET_VAL_EX</NAME>
#define BONOBO_RET_VAL_EX(ev,v)		\
	G_STMT_START{			\
		if (BONOBO_EX (ev))	\
			return (v);	\
	}G_STMT_END
</MACRO>
<USER_FUNCTION>
<NAME>BonoboExceptionFn</NAME>
<RETURNS>char *</RETURNS>
CORBA_Environment *ev, gpointer user_data
</USER_FUNCTION>
<FUNCTION>
<NAME>bonobo_exception_get_text</NAME>
<RETURNS>char  *</RETURNS>
CORBA_Environment *ev
</FUNCTION>
<FUNCTION>
<NAME>bonobo_exception_repoid_to_text</NAME>
<RETURNS>char  *</RETURNS>
const char *repo_id
</FUNCTION>
<FUNCTION>
<NAME>bonobo_exception_add_handler_str</NAME>
<RETURNS>void  </RETURNS>
const char *repo_id,const char *str
</FUNCTION>
<FUNCTION>
<NAME>bonobo_exception_add_handler_fn</NAME>
<RETURNS>void  </RETURNS>
const char *repo_id,BonoboExceptionFn fn,gpointer          user_data,GDestroyNotify    destroy_fn
</FUNCTION>
<FUNCTION>
<NAME>bonobo_exception_general_error_set</NAME>
<RETURNS>void  </RETURNS>
CORBA_Environment *ev,CORBA_TypeCode     opt_deriv,const char        *format,...
</FUNCTION>
<FUNCTION>
<NAME>bonobo_exception_general_error_get</NAME>
<RETURNS>const char  *</RETURNS>
CORBA_Environment *ev
</FUNCTION>
<MACRO>
<NAME>BONOBO_TYPE_OBJECT</NAME>
#define BONOBO_TYPE_OBJECT        (bonobo_object_get_type ())
</MACRO>
<MACRO>
<NAME>BONOBO_OBJECT_TYPE</NAME>
#define BONOBO_OBJECT_TYPE        BONOBO_TYPE_OBJECT /* deprecated, you should use BONOBO_TYPE_OBJECT */
</MACRO>
<MACRO>
<NAME>BONOBO_OBJECT</NAME>
#define BONOBO_OBJECT(o)          (G_TYPE_CHECK_INSTANCE_CAST ((o), BONOBO_TYPE_OBJECT, BonoboObject))
</MACRO>
<MACRO>
<NAME>BONOBO_OBJECT_CLASS</NAME>
#define BONOBO_OBJECT_CLASS(k)    (G_TYPE_CHECK_CLASS_CAST((k), BONOBO_TYPE_OBJECT, BonoboObjectClass))
</MACRO>
<MACRO>
<NAME>BONOBO_IS_OBJECT</NAME>
#define BONOBO_IS_OBJECT(o)       (G_TYPE_CHECK_INSTANCE_TYPE ((o), BONOBO_TYPE_OBJECT))
</MACRO>
<MACRO>
<NAME>BONOBO_IS_OBJECT_CLASS</NAME>
#define BONOBO_IS_OBJECT_CLASS(k) (G_TYPE_CHECK_CLASS_TYPE ((k), BONOBO_TYPE_OBJECT))
</MACRO>
<MACRO>
<NAME>BONOBO_OBJECT_GET_CLASS</NAME>
#define BONOBO_OBJECT_GET_CLASS(o)(G_TYPE_INSTANCE_GET_CLASS ((o), BONOBO_TYPE_OBJECT, BonoboObjectClass))
</MACRO>
<MACRO>
<NAME>BONOBO_OBJREF</NAME>
#define BONOBO_OBJREF(o)          (bonobo_object_corba_objref(BONOBO_OBJECT(o)))
</MACRO>
<USER_FUNCTION>
<NAME>BonoboObjectPOAFn</NAME>
<RETURNS>void </RETURNS>
PortableServer_Servant servant,
				    CORBA_Environment     *ev
</USER_FUNCTION>
<STRUCT>
<NAME>BonoboObjectPrivate</NAME>
</STRUCT>
<TYPEDEF>
<NAME>BonoboObjectHeader</NAME>
typedef struct {
	GObject              base;             /* pointer + guint + pointer */
	BonoboObjectPrivate *priv;             /* pointer */
	guint                object_signature; /* guint   */
} BonoboObjectHeader;
</TYPEDEF>
<MACRO>
<NAME>BONOBO_OBJECT_HEADER_SIZE</NAME>
#define BONOBO_OBJECT_HEADER_SIZE (sizeof (BonoboObjectHeader))
</MACRO>
<MACRO>
<NAME>BONOBO_OBJECT_SIGNATURE</NAME>
#define BONOBO_OBJECT_SIGNATURE   0xaef2
</MACRO>
<MACRO>
<NAME>BONOBO_SERVANT_SIGNATURE</NAME>
#define BONOBO_SERVANT_SIGNATURE  0x2fae
</MACRO>
<TYPEDEF>
<NAME>BonoboObject</NAME>
typedef struct {
	/* A GObject and its signature of type BonoboObjectHeader */
	GObject              base;             /* pointer + guint + pointer */
	BonoboObjectPrivate *priv;             /* pointer */
	guint                object_signature; /* guint   */

	/* A Servant and its signature - same memory layout */
	POA_Bonobo_Unknown   servant;          /* pointer + pointer */
	guint                dummy;            /* guint   */
	Bonobo_Unknown       corba_objref;     /* pointer */
	guint                servant_signature;
} BonoboObject;
</TYPEDEF>
<TYPEDEF>
<NAME>BonoboObjectClass</NAME>
typedef struct {
	GObjectClass parent_class;

	/* signals. */
	void         (*destroy)          (BonoboObject *object);
	void         (*system_exception) (BonoboObject *object,
					  CORBA_Object  cobject,
					  CORBA_Environment *ev);

	BonoboObjectPOAFn          poa_init_fn;
	BonoboObjectPOAFn          poa_fini_fn;

	POA_Bonobo_Unknown__vepv       *vepv;

	/* The offset of this class' additional epv */
	int                             epv_struct_offset;

	PortableServer_ServantBase__epv base_epv;
	POA_Bonobo_Unknown__epv         epv;
} BonoboObjectClass;
</TYPEDEF>
<FUNCTION>
<NAME>bonobo_object_get_type</NAME>
<RETURNS>GType  </RETURNS>
void
</FUNCTION>
<FUNCTION>
<NAME>bonobo_object_add_interface</NAME>
<RETURNS>void  </RETURNS>
BonoboObject           *object,BonoboObject           *newobj
</FUNCTION>
<FUNCTION>
<NAME>bonobo_object_query_local_interface</NAME>
<RETURNS>BonoboObject             *</RETURNS>
BonoboObject           *object,const char             *repo_id
</FUNCTION>
<FUNCTION>
<NAME>bonobo_object_query_interface</NAME>
<RETURNS>Bonobo_Unknown  </RETURNS>
BonoboObject           *object,const char             *repo_id,CORBA_Environment      *opt_ev
</FUNCTION>
<FUNCTION>
<NAME>bonobo_object_corba_objref</NAME>
<RETURNS>Bonobo_Unknown  </RETURNS>
BonoboObject           *object
</FUNCTION>
<FUNCTION>
<NAME>bonobo_object_dup_ref</NAME>
<RETURNS>Bonobo_Unknown  </RETURNS>
Bonobo_Unknown          object,CORBA_Environment      *opt_ev
</FUNCTION>
<FUNCTION>
<NAME>bonobo_object_release_unref</NAME>
<RETURNS>Bonobo_Unknown  </RETURNS>
Bonobo_Unknown          object,CORBA_Environment      *opt_ev
</FUNCTION>
<FUNCTION>
<NAME>bonobo_object_ref</NAME>
<RETURNS>gpointer  </RETURNS>
gpointer                obj
</FUNCTION>
<FUNCTION>
<NAME>bonobo_object_idle_unref</NAME>
<RETURNS>void  </RETURNS>
gpointer                obj
</FUNCTION>
<FUNCTION>
<NAME>bonobo_object_unref</NAME>
<RETURNS>gpointer  </RETURNS>
gpointer                obj
</FUNCTION>
<FUNCTION>
<NAME>bonobo_object_set_immortal</NAME>
<RETURNS>void  </RETURNS>
BonoboObject           *object,gboolean                immortal
</FUNCTION>
<FUNCTION>
<NAME>bonobo_object_trace_refs</NAME>
<RETURNS>gpointer  </RETURNS>
gpointer                obj,const char             *fn,int                     line,gboolean                ref
</FUNCTION>
<MACRO>
<NAME>bonobo_object_ref</NAME>
#	define           bonobo_object_ref(o)   bonobo_object_trace_refs ((o),G_GNUC_PRETTY_FUNCTION,__LINE__,TRUE);
</MACRO>
<MACRO>
<NAME>bonobo_object_unref</NAME>
#	define           bonobo_object_unref(o) bonobo_object_trace_refs ((o),G_GNUC_PRETTY_FUNCTION,__LINE__,FALSE);
</MACRO>
<FUNCTION>
<NAME>bonobo_object_dump_interfaces</NAME>
<RETURNS>void  </RETURNS>
BonoboObject *object
</FUNCTION>
<FUNCTION>
<NAME>bonobo_object_check_env</NAME>
<RETURNS>void  </RETURNS>
BonoboObject           *object,CORBA_Object            corba_object,CORBA_Environment      *ev
</FUNCTION>
<MACRO>
<NAME>BONOBO_OBJECT_CHECK</NAME>
#define BONOBO_OBJECT_CHECK(o,c,e)				\
			G_STMT_START {				\
			if ((e)->_major != CORBA_NO_EXCEPTION)	\
				bonobo_object_check_env(o,c,e);	\
			} G_STMT_END
</MACRO>
<FUNCTION>
<NAME>bonobo_unknown_ping</NAME>
<RETURNS>gboolean  </RETURNS>
Bonobo_Unknown     object,CORBA_Environment *opt_ev
</FUNCTION>
<FUNCTION>
<NAME>bonobo_object_list_unref_all</NAME>
<RETURNS>void  </RETURNS>
GList            **list
</FUNCTION>
<FUNCTION>
<NAME>bonobo_object_slist_unref_all</NAME>
<RETURNS>void  </RETURNS>
GSList           **list
</FUNCTION>
<FUNCTION>
<NAME>bonobo_object</NAME>
<RETURNS>BonoboObject  *</RETURNS>
gpointer p
</FUNCTION>
<MACRO>
<NAME>bonobo_object_fast</NAME>
#define       bonobo_object_fast(o) \
	((((BonoboObjectHeader *)(o))->object_signature == BONOBO_OBJECT_SIGNATURE) ? \
	 (BonoboObject *)(o) : (BonoboObject *)(((guchar *) (o)) - BONOBO_OBJECT_HEADER_SIZE))
</MACRO>
<MACRO>
<NAME>bonobo_object_from_servant</NAME>
#define       bonobo_object_from_servant(s) ((BonoboObject *)(((guchar *) (s)) - BONOBO_OBJECT_HEADER_SIZE))
</MACRO>
<MACRO>
<NAME>bonobo_object_get_servant</NAME>
#define       bonobo_object_get_servant(o)  ((PortableServer_Servant)((guchar *)(o) + BONOBO_OBJECT_HEADER_SIZE))
</MACRO>
<FUNCTION>
<NAME>bonobo_type_unique</NAME>
<RETURNS>GType  </RETURNS>
GType             parent_type,BonoboObjectPOAFn init_fn,BonoboObjectPOAFn fini_fn,int               epv_struct_offset,const GTypeInfo  *info,const gchar      *type_name
</FUNCTION>
<FUNCTION>
<NAME>bonobo_type_setup</NAME>
<RETURNS>gboolean  </RETURNS>
GType             type,BonoboObjectPOAFn init_fn,BonoboObjectPOAFn fini_fn,int               epv_struct_offset
</FUNCTION>
<MACRO>
<NAME>BONOBO_TYPE_FUNC_FULL</NAME>
#define BONOBO_TYPE_FUNC_FULL(class_name, corba_name, parent, prefix)         \
GType                                                                         \
prefix##_get_type (void)                                                      \
{                                                                             \
	GType ptype;                                                          \
	static GType type = 0;                                                \
                                                                              \
	if (type == 0) {                                                      \
		static GTypeInfo info = {                                     \
			sizeof (class_name##Class),                           \
			(GBaseInitFunc) NULL,                                 \
			(GBaseFinalizeFunc) NULL,                             \
			(GClassInitFunc) prefix##_class_init,                 \
			NULL, NULL,                                           \
			sizeof (class_name),                                  \
			0,                                                    \
			(GInstanceInitFunc) prefix##_init                     \
		};                                                            \
		ptype = (parent);                                             \
		type = bonobo_type_unique (ptype,                             \
			POA_##corba_name##__init, POA_##corba_name##__fini,   \
			G_STRUCT_OFFSET (class_name##Class, epv),             \
			&info, #class_name);                                  \
	}                                                                     \
	return type;                                                          \
}
</MACRO>
<MACRO>
<NAME>BONOBO_TYPE_FUNC</NAME>
#define BONOBO_TYPE_FUNC(class_name, parent, prefix)                        \
GType                                                                         \
prefix##_get_type (void)                                                      \
{                                                                             \
	GType ptype;                                                          \
	static GType type = 0;                                                \
                                                                              \
	if (type == 0) {                                                      \
		static GTypeInfo info = {                                     \
			sizeof (class_name##Class),                           \
			(GBaseInitFunc) NULL,                                 \
			(GBaseFinalizeFunc) NULL,                             \
			(GClassInitFunc) prefix##_class_init,                 \
			NULL, NULL,                                           \
			sizeof (class_name),                                  \
			0,                                                    \
			(GInstanceInitFunc) prefix##_init                     \
		};                                                            \
		ptype = (parent);                                             \
		type = bonobo_type_unique (ptype, NULL, NULL, 0,              \
				           &info, #class_name);               \
	}                                                                     \
	return type;                                                          \
}
</MACRO>
<MACRO>
<NAME>BONOBO_TYPE_LISTENER</NAME>
#define BONOBO_TYPE_LISTENER        (bonobo_listener_get_type ())
</MACRO>
<MACRO>
<NAME>BONOBO_LISTENER_TYPE</NAME>
#define BONOBO_LISTENER_TYPE        BONOBO_TYPE_LISTENER /* deprecated, you should use BONOBO_TYPE_LISTENER */
</MACRO>
<MACRO>
<NAME>BONOBO_LISTENER</NAME>
#define BONOBO_LISTENER(o)          (G_TYPE_CHECK_INSTANCE_CAST ((o), BONOBO_TYPE_LISTENER, BonoboListener))
</MACRO>
<MACRO>
<NAME>BONOBO_LISTENER_CLASS</NAME>
#define BONOBO_LISTENER_CLASS(k)    (G_TYPE_CHECK_CLASS_CAST((k), BONOBO_TYPE_LISTENER, BonoboListenerClass))
</MACRO>
<MACRO>
<NAME>BONOBO_IS_LISTENER</NAME>
#define BONOBO_IS_LISTENER(o)       (G_TYPE_CHECK_INSTANCE_TYPE ((o), BONOBO_TYPE_LISTENER))
</MACRO>
<MACRO>
<NAME>BONOBO_IS_LISTENER_CLASS</NAME>
#define BONOBO_IS_LISTENER_CLASS(k) (G_TYPE_CHECK_CLASS_TYPE ((k), BONOBO_TYPE_LISTENER))
</MACRO>
<STRUCT>
<NAME>BonoboListenerPrivate</NAME>
</STRUCT>
<TYPEDEF>
<NAME>BonoboListener</NAME>
typedef struct {
        BonoboObject          parent;

	BonoboListenerPrivate *priv;
} BonoboListener;
</TYPEDEF>
<TYPEDEF>
<NAME>BonoboListenerClass</NAME>
typedef struct {
	BonoboObjectClass     parent_class;

	POA_Bonobo_Listener__epv epv;

	/* Signals */
	void (* event_notify) (BonoboListener    *listener, 
			       char              *event_name,
			       BonoboArg         *event_data, 
			       CORBA_Environment *ev);
} BonoboListenerClass;
</TYPEDEF>
<USER_FUNCTION>
<NAME>BonoboListenerCallbackFn</NAME>
<RETURNS>void </RETURNS>
BonoboListener    *listener,
					     const char        *event_name, 
					     const CORBA_any   *any,
					     CORBA_Environment *ev,
					     gpointer           user_data
</USER_FUNCTION>
<FUNCTION>
<NAME>bonobo_listener_get_type</NAME>
<RETURNS>GType  </RETURNS>
void
</FUNCTION>
<FUNCTION>
<NAME>bonobo_listener_new</NAME>
<RETURNS>BonoboListener  *</RETURNS>
BonoboListenerCallbackFn event_cb,gpointer                 user_data
</FUNCTION>
<FUNCTION>
<NAME>bonobo_listener_new_closure</NAME>
<RETURNS>BonoboListener  *</RETURNS>
GClosure                *event_closure
</FUNCTION>
<FUNCTION>
<NAME>bonobo_event_make_name</NAME>
<RETURNS>char            *</RETURNS>
const char *idl_path,const char *kind,const char *subtype
</FUNCTION>
<FUNCTION>
<NAME>bonobo_event_type</NAME>
<RETURNS>char            *</RETURNS>
const char *event_name
</FUNCTION>
<FUNCTION>
<NAME>bonobo_event_subtype</NAME>
<RETURNS>char            *</RETURNS>
const char *event_name
</FUNCTION>
<FUNCTION>
<NAME>bonobo_event_kind</NAME>
<RETURNS>char            *</RETURNS>
const char *event_name
</FUNCTION>
<FUNCTION>
<NAME>bonobo_event_idl_path</NAME>
<RETURNS>char            *</RETURNS>
const char *event_name
</FUNCTION>
<MACRO>
<NAME>_</NAME>
#        define _(String) dgettext (BONOBO_EXPLICIT_TRANSLATION_DOMAIN, String)
</MACRO>
<MACRO>
<NAME>_</NAME>
#        define _(String) gettext (String)
</MACRO>
<MACRO>
<NAME>N_</NAME>
#        define N_(String) gettext_noop (String)
</MACRO>
<MACRO>
<NAME>N_</NAME>
#        define N_(String) (String)
</MACRO>
<MACRO>
<NAME>textdomain</NAME>
#    define textdomain(String) (String)
</MACRO>
<MACRO>
<NAME>gettext</NAME>
#    define gettext(String) (String)
</MACRO>
<MACRO>
<NAME>dgettext</NAME>
#    define dgettext(Domain,Message) (Message)
</MACRO>
<MACRO>
<NAME>dcgettext</NAME>
#    define dcgettext(Domain,Message,Type) (Message)
</MACRO>
<MACRO>
<NAME>bindtextdomain</NAME>
#    define bindtextdomain(Domain,Directory) (Domain)
</MACRO>
<MACRO>
<NAME>_</NAME>
#    define _(String) (String)
</MACRO>
<MACRO>
<NAME>N_</NAME>
#    define N_(String) (String)
</MACRO>
<FUNCTION>
<NAME>bonobo_is_initialized</NAME>
<RETURNS>gboolean  </RETURNS>
void
</FUNCTION>
<FUNCTION>
<NAME>bonobo_init</NAME>
<RETURNS>gboolean 	</RETURNS>
int *argc,char **argv
</FUNCTION>
<FUNCTION>
<NAME>bonobo_init_full</NAME>
<RETURNS>gboolean  </RETURNS>
int *argc,char **argv,CORBA_ORB orb,PortableServer_POA poa,PortableServer_POAManager manager
</FUNCTION>
<FUNCTION>
<NAME>bonobo_debug_shutdown</NAME>
<RETURNS>int  </RETURNS>
void
</FUNCTION>
<FUNCTION>
<NAME>bonobo_main</NAME>
<RETURNS>void 	</RETURNS>
void
</FUNCTION>
<FUNCTION>
<NAME>bonobo_main_quit</NAME>
<RETURNS>void  </RETURNS>
void
</FUNCTION>
<FUNCTION>
<NAME>bonobo_activate</NAME>
<RETURNS>gboolean 	</RETURNS>
void
</FUNCTION>
<FUNCTION>
<NAME>bonobo_setup_x_error_handler</NAME>
<RETURNS>void 	</RETURNS>
void
</FUNCTION>
<FUNCTION>
<NAME>bonobo_orb</NAME>
<RETURNS>CORBA_ORB 	</RETURNS>
void
</FUNCTION>
<FUNCTION>
<NAME>bonobo_poa</NAME>
<RETURNS>PortableServer_POA 	</RETURNS>
void
</FUNCTION>
<FUNCTION>
<NAME>bonobo_poa_manager</NAME>
<RETURNS>PortableServer_POAManager  </RETURNS>
void
</FUNCTION>
<MACRO>
<NAME>BONOBO_TYPE_PERSIST_FILE</NAME>
#define BONOBO_TYPE_PERSIST_FILE (bonobo_persist_file_get_type ())
</MACRO>
<MACRO>
<NAME>BONOBO_PERSIST_FILE_TYPE</NAME>
#define BONOBO_PERSIST_FILE_TYPE        BONOBO_TYPE_PERSIST_FILE /* deprecated, you should use BONOBO_TYPE_PERSIST_FILE */
</MACRO>
<MACRO>
<NAME>BONOBO_PERSIST_FILE</NAME>
#define BONOBO_PERSIST_FILE(o)   (G_TYPE_CHECK_INSTANCE_CAST ((o), BONOBO_TYPE_PERSIST_FILE, BonoboPersistFile))
</MACRO>
<MACRO>
<NAME>BONOBO_PERSIST_FILE_CLASS</NAME>
#define BONOBO_PERSIST_FILE_CLASS(k)    (G_TYPE_CHECK_CLASS_CAST((k), BONOBO_TYPE_PERSIST_FILE, BonoboPersistFileClass))
</MACRO>
<MACRO>
<NAME>BONOBO_IS_PERSIST_FILE</NAME>
#define BONOBO_IS_PERSIST_FILE(o)       (G_TYPE_CHECK_INSTANCE_TYPE ((o), BONOBO_TYPE_PERSIST_FILE))
</MACRO>
<MACRO>
<NAME>BONOBO_IS_PERSIST_FILE_CLASS</NAME>
#define BONOBO_IS_PERSIST_FILE_CLASS(k) (G_TYPE_CHECK_CLASS_TYPE ((k), BONOBO_TYPE_PERSIST_FILE))
</MACRO>
<STRUCT>
<NAME>BonoboPersistFilePrivate</NAME>
</STRUCT>
<STRUCT>
<NAME>BonoboPersistFile</NAME>
</STRUCT>
<USER_FUNCTION>
<NAME>BonoboPersistFileIOFn</NAME>
<RETURNS>int </RETURNS>
BonoboPersistFile *pf,
				      const CORBA_char  *filename,
				      CORBA_Environment *ev,
				      void              *closure
</USER_FUNCTION>
<STRUCT>
<NAME>BonoboPersistFile</NAME>
struct BonoboPersistFile {
	BonoboPersist persist;

	char *filename;

	/*
	 * For the sample routines, NULL if we use the ::save and ::load
	 * methods from the class
	 */
	BonoboPersistFileIOFn  save_fn;
	BonoboPersistFileIOFn  load_fn;
	void *closure;

	BonoboPersistFilePrivate *priv;
};
</STRUCT>
<TYPEDEF>
<NAME>BonoboPersistFileClass</NAME>
typedef struct {
	BonoboPersistClass parent_class;

	POA_Bonobo_PersistFile__epv epv;

	/* methods */
	int   (*load)             (BonoboPersistFile *ps,
				   const CORBA_char  *filename,
				   CORBA_Environment *ev);

	int   (*save)             (BonoboPersistFile *ps,
				   const CORBA_char  *filename,
				   CORBA_Environment *ev);

	char *(*get_current_file) (BonoboPersistFile *ps,
				   CORBA_Environment *ev);

} BonoboPersistFileClass;
</TYPEDEF>
<FUNCTION>
<NAME>bonobo_persist_file_get_type</NAME>
<RETURNS>GType  </RETURNS>
void
</FUNCTION>
<FUNCTION>
<NAME>bonobo_persist_file_new</NAME>
<RETURNS>BonoboPersistFile  *</RETURNS>
BonoboPersistFileIOFn load_fn,BonoboPersistFileIOFn save_fn,const gchar          *iid,void                 *closure
</FUNCTION>
<FUNCTION>
<NAME>bonobo_persist_file_construct</NAME>
<RETURNS>BonoboPersistFile  *</RETURNS>
BonoboPersistFile    *ps,BonoboPersistFileIOFn load_fn,BonoboPersistFileIOFn save_fn,const gchar          *iid,void                 *closure
</FUNCTION>
<MACRO>
<NAME>BONOBO_TYPE_PERSIST_STREAM</NAME>
#define BONOBO_TYPE_PERSIST_STREAM        (bonobo_persist_stream_get_type ())
</MACRO>
<MACRO>
<NAME>BONOBO_PERSIST_STREAM_TYPE</NAME>
#define BONOBO_PERSIST_STREAM_TYPE        BONOBO_TYPE_PERSIST_STREAM /* deprecated, you should use BONOBO_TYPE_PERSIST_STREAM */
</MACRO>
<MACRO>
<NAME>BONOBO_PERSIST_STREAM</NAME>
#define BONOBO_PERSIST_STREAM(o)          (G_TYPE_CHECK_INSTANCE_CAST ((o), BONOBO_TYPE_PERSIST_STREAM, BonoboPersistStream))
</MACRO>
<MACRO>
<NAME>BONOBO_PERSIST_STREAM_CLASS</NAME>
#define BONOBO_PERSIST_STREAM_CLASS(k)    (G_TYPE_CHECK_CLASS_CAST((k), BONOBO_TYPE_PERSIST_STREAM, BonoboPersistStreamClass))
</MACRO>
<MACRO>
<NAME>BONOBO_IS_PERSIST_STREAM</NAME>
#define BONOBO_IS_PERSIST_STREAM(o)       (G_TYPE_CHECK_INSTANCE_TYPE ((o), BONOBO_TYPE_PERSIST_STREAM))
</MACRO>
<MACRO>
<NAME>BONOBO_IS_PERSIST_STREAM_CLASS</NAME>
#define BONOBO_IS_PERSIST_STREAM_CLASS(k) (G_TYPE_CHECK_CLASS_TYPE ((k), BONOBO_TYPE_PERSIST_STREAM))
</MACRO>
<STRUCT>
<NAME>BonoboPersistStreamPrivate</NAME>
</STRUCT>
<STRUCT>
<NAME>BonoboPersistStream</NAME>
</STRUCT>
<USER_FUNCTION>
<NAME>BonoboPersistStreamIOFn</NAME>
<RETURNS>void </RETURNS>
BonoboPersistStream         *ps,
					  const Bonobo_Stream         stream,
					  Bonobo_Persist_ContentType  type,
					  void                       *closure,
					  CORBA_Environment          *ev
</USER_FUNCTION>
<USER_FUNCTION>
<NAME>BonoboPersistStreamTypesFn</NAME>
<RETURNS>Bonobo_Persist_ContentTypeList *</RETURNS>
BonoboPersistStream *ps,
									void                *closure,
									CORBA_Environment   *ev
</USER_FUNCTION>
<STRUCT>
<NAME>BonoboPersistStream</NAME>
struct BonoboPersistStream {
	BonoboPersist persist;

	gboolean     is_dirty;

	/*
	 * For the sample routines, NULL if we use the
	 * methods from the class
	 */
	BonoboPersistStreamIOFn     save_fn;
	BonoboPersistStreamIOFn     load_fn;
	BonoboPersistStreamTypesFn  types_fn;
	
	void                       *closure;

	BonoboPersistStreamPrivate *priv;
};
</STRUCT>
<TYPEDEF>
<NAME>BonoboPersistStreamClass</NAME>
typedef struct {
	BonoboPersistClass parent_class;

	POA_Bonobo_PersistStream__epv epv;

	/* methods */
	void       (*load)         (BonoboPersistStream        *ps,
				    Bonobo_Stream              stream,
				    Bonobo_Persist_ContentType type,
				    CORBA_Environment          *ev);
	void       (*save)         (BonoboPersistStream        *ps,
				    Bonobo_Stream              stream,
				    Bonobo_Persist_ContentType type,
				    CORBA_Environment          *ev);

	Bonobo_Persist_ContentTypeList * (*get_content_types) (BonoboPersistStream *ps,
							       CORBA_Environment   *ev);

} BonoboPersistStreamClass;
</TYPEDEF>
<FUNCTION>
<NAME>bonobo_persist_stream_get_type</NAME>
<RETURNS>GType  </RETURNS>
void
</FUNCTION>
<FUNCTION>
<NAME>bonobo_persist_stream_new</NAME>
<RETURNS>BonoboPersistStream  *</RETURNS>
BonoboPersistStreamIOFn    load_fn,BonoboPersistStreamIOFn    save_fn,BonoboPersistStreamTypesFn types_fn,const gchar               *iid,void                      *closure
</FUNCTION>
<FUNCTION>
<NAME>bonobo_persist_stream_construct</NAME>
<RETURNS>BonoboPersistStream  *</RETURNS>
BonoboPersistStream       *ps,BonoboPersistStreamIOFn    load_fn,BonoboPersistStreamIOFn    save_fn,BonoboPersistStreamTypesFn types_fn,const gchar               *iid,void                      *closure
</FUNCTION>
<MACRO>
<NAME>BONOBO_TYPE_STORAGE_MEM</NAME>
#define BONOBO_TYPE_STORAGE_MEM        (bonobo_storage_mem_get_type ())
</MACRO>
<MACRO>
<NAME>BONOBO_STORAGE_MEM_TYPE</NAME>
#define BONOBO_STORAGE_MEM_TYPE        BONOBO_TYPE_STORAGE_MEM /* deprecated, you should use BONOBO_TYPE_STORAGE_MEM */
</MACRO>
<MACRO>
<NAME>BONOBO_STORAGE_MEM</NAME>
#define BONOBO_STORAGE_MEM(o)          (G_TYPE_CHECK_INSTANCE_CAST ((o), BONOBO_TYPE_STORAGE_MEM, BonoboStorageMem))
</MACRO>
<MACRO>
<NAME>BONOBO_STORAGE_MEM_CLASS</NAME>
#define BONOBO_STORAGE_MEM_CLASS(k)    (G_TYPE_CHECK_CLASS_CAST((k), BONOBO_TYPE_STORAGE_MEM, BonoboStorageMemClass))
</MACRO>
<MACRO>
<NAME>BONOBO_IS_STORAGE_MEM</NAME>
#define BONOBO_IS_STORAGE_MEM(o)       (G_TYPE_CHECK_INSTANCE_TYPE ((o), BONOBO_TYPE_STORAGE_MEM))
</MACRO>
<MACRO>
<NAME>BONOBO_IS_STORAGE_MEM_CLASS</NAME>
#define BONOBO_IS_STORAGE_MEM_CLASS(k) (G_TYPE_CHECK_CLASS_TYPE ((k), BONOBO_TYPE_STORAGE_MEM))
</MACRO>
<STRUCT>
<NAME>BonoboStorageMemPriv</NAME>
</STRUCT>
<TYPEDEF>
<NAME>BonoboStorageMem</NAME>
typedef struct {
	BonoboObject parent;

	BonoboStorageMemPriv *priv;
} BonoboStorageMem;
</TYPEDEF>
<TYPEDEF>
<NAME>BonoboStorageMemClass</NAME>
typedef struct {
	BonoboObjectClass parent_class;

	POA_Bonobo_Storage__epv epv;
} BonoboStorageMemClass;
</TYPEDEF>
<FUNCTION>
<NAME>bonobo_storage_mem_get_type</NAME>
<RETURNS>GType  </RETURNS>
void
</FUNCTION>
<FUNCTION>
<NAME>bonobo_storage_mem_create</NAME>
<RETURNS>BonoboObject      *</RETURNS>
void
</FUNCTION>
<FUNCTION>
<NAME>bonobo_pbclient_get_type</NAME>
<RETURNS>CORBA_TypeCode</RETURNS>
Bonobo_PropertyBag  bag,const char         *key,CORBA_Environment  *opt_ev
</FUNCTION>
<FUNCTION>
<NAME>bonobo_pbclient_get_string</NAME>
<RETURNS>gchar  *</RETURNS>
Bonobo_PropertyBag  bag,const char         *key,CORBA_Environment  *opt_ev
</FUNCTION>
<FUNCTION>
<NAME>bonobo_pbclient_get_default_string</NAME>
<RETURNS>gchar  *</RETURNS>
Bonobo_PropertyBag  bag,const char         *key,CORBA_Environment  *opt_ev
</FUNCTION>
<FUNCTION>
<NAME>bonobo_pbclient_get_string_with_default</NAME>
<RETURNS>gchar  *</RETURNS>
Bonobo_PropertyBag  bag,const char         *key,gchar              *defval,gboolean           *def
</FUNCTION>
<FUNCTION>
<NAME>bonobo_pbclient_get_short</NAME>
<RETURNS>gint16</RETURNS>
Bonobo_PropertyBag  bag,const char         *key,CORBA_Environment  *opt_ev
</FUNCTION>
<FUNCTION>
<NAME>bonobo_pbclient_get_default_short</NAME>
<RETURNS>gint16</RETURNS>
Bonobo_PropertyBag  bag,const char         *key,CORBA_Environment  *opt_ev
</FUNCTION>
<FUNCTION>
<NAME>bonobo_pbclient_get_short_with_default</NAME>
<RETURNS>gint16</RETURNS>
Bonobo_PropertyBag  bag,const char         *key,gint16              defval,gboolean           *def
</FUNCTION>
<FUNCTION>
<NAME>bonobo_pbclient_get_ushort</NAME>
<RETURNS>guint16</RETURNS>
Bonobo_PropertyBag  bag,const char         *key,CORBA_Environment  *opt_ev
</FUNCTION>
<FUNCTION>
<NAME>bonobo_pbclient_get_default_ushort</NAME>
<RETURNS>guint16</RETURNS>
Bonobo_PropertyBag  bag,const char         *key,CORBA_Environment  *opt_ev
</FUNCTION>
<FUNCTION>
<NAME>bonobo_pbclient_get_ushort_with_default</NAME>
<RETURNS>guint16</RETURNS>
Bonobo_PropertyBag  bag,const char         *key,guint16             defval,gboolean           *def
</FUNCTION>
<FUNCTION>
<NAME>bonobo_pbclient_get_long</NAME>
<RETURNS>gint32</RETURNS>
Bonobo_PropertyBag  bag,const char         *key,CORBA_Environment  *opt_ev
</FUNCTION>
<FUNCTION>
<NAME>bonobo_pbclient_get_default_long</NAME>
<RETURNS>gint32</RETURNS>
Bonobo_PropertyBag  bag,const char         *key,CORBA_Environment  *opt_ev
</FUNCTION>
<FUNCTION>
<NAME>bonobo_pbclient_get_long_with_default</NAME>
<RETURNS>gint32</RETURNS>
Bonobo_PropertyBag  bag,const char         *key,gint32              defval,gboolean           *def
</FUNCTION>
<FUNCTION>
<NAME>bonobo_pbclient_get_ulong</NAME>
<RETURNS>guint32</RETURNS>
Bonobo_PropertyBag  bag,const char         *key,CORBA_Environment  *opt_ev
</FUNCTION>
<FUNCTION>
<NAME>bonobo_pbclient_get_default_ulong</NAME>
<RETURNS>guint32</RETURNS>
Bonobo_PropertyBag  bag,const char         *key,CORBA_Environment  *opt_ev
</FUNCTION>
<FUNCTION>
<NAME>bonobo_pbclient_get_ulong_with_default</NAME>
<RETURNS>guint32</RETURNS>
Bonobo_PropertyBag  bag,const char         *key,guint32             defval,gboolean           *def
</FUNCTION>
<FUNCTION>
<NAME>bonobo_pbclient_get_float</NAME>
<RETURNS>gfloat</RETURNS>
Bonobo_PropertyBag  bag,const char         *key,CORBA_Environment  *opt_ev
</FUNCTION>
<FUNCTION>
<NAME>bonobo_pbclient_get_default_float</NAME>
<RETURNS>gfloat</RETURNS>
Bonobo_PropertyBag  bag,const char         *key,CORBA_Environment  *opt_ev
</FUNCTION>
<FUNCTION>
<NAME>bonobo_pbclient_get_float_with_default</NAME>
<RETURNS>gfloat</RETURNS>
Bonobo_PropertyBag  bag,const char         *key,gfloat              defval,gboolean           *def
</FUNCTION>
<FUNCTION>
<NAME>bonobo_pbclient_get_double</NAME>
<RETURNS>gdouble</RETURNS>
Bonobo_PropertyBag  bag,const char         *key,CORBA_Environment  *opt_ev
</FUNCTION>
<FUNCTION>
<NAME>bonobo_pbclient_get_default_double</NAME>
<RETURNS>gdouble</RETURNS>
Bonobo_PropertyBag  bag,const char         *key,CORBA_Environment  *opt_ev
</FUNCTION>
<FUNCTION>
<NAME>bonobo_pbclient_get_double_with_default</NAME>
<RETURNS>gdouble</RETURNS>
Bonobo_PropertyBag  bag,const char         *key,gdouble             defval,gboolean           *def
</FUNCTION>
<FUNCTION>
<NAME>bonobo_pbclient_get_boolean</NAME>
<RETURNS>gboolean</RETURNS>
Bonobo_PropertyBag  bag,const char         *key,CORBA_Environment  *opt_ev
</FUNCTION>
<FUNCTION>
<NAME>bonobo_pbclient_get_default_boolean</NAME>
<RETURNS>gboolean</RETURNS>
Bonobo_PropertyBag  bag,const char         *key,CORBA_Environment  *opt_ev
</FUNCTION>
<FUNCTION>
<NAME>bonobo_pbclient_get_boolean_with_default</NAME>
<RETURNS>gboolean</RETURNS>
Bonobo_PropertyBag  bag,const char         *key,gboolean            defval,gboolean           *def
</FUNCTION>
<FUNCTION>
<NAME>bonobo_pbclient_get_char</NAME>
<RETURNS>gchar</RETURNS>
Bonobo_PropertyBag  bag,const char         *key,CORBA_Environment  *opt_ev
</FUNCTION>
<FUNCTION>
<NAME>bonobo_pbclient_get_default_char</NAME>
<RETURNS>gchar</RETURNS>
Bonobo_PropertyBag  bag,const char         *key,CORBA_Environment  *opt_ev
</FUNCTION>
<FUNCTION>
<NAME>bonobo_pbclient_get_char_with_default</NAME>
<RETURNS>gchar</RETURNS>
Bonobo_PropertyBag  bag,const char         *key,gchar               defval,gboolean           *def
</FUNCTION>
<FUNCTION>
<NAME>bonobo_pbclient_get_value</NAME>
<RETURNS>CORBA_any  *</RETURNS>
Bonobo_PropertyBag  bag,const char         *key,CORBA_TypeCode      opt_tc,CORBA_Environment  *opt_ev
</FUNCTION>
<FUNCTION>
<NAME>bonobo_pbclient_get_default_value</NAME>
<RETURNS>CORBA_any  *</RETURNS>
Bonobo_PropertyBag  bag,const char         *key,CORBA_TypeCode      opt_tc,CORBA_Environment  *opt_ev
</FUNCTION>
<FUNCTION>
<NAME>bonobo_pbclient_set_string</NAME>
<RETURNS>void</RETURNS>
Bonobo_PropertyBag  bag,const char         *key,const char         *value,CORBA_Environment  *opt_ev
</FUNCTION>
<FUNCTION>
<NAME>bonobo_pbclient_set_short</NAME>
<RETURNS>void</RETURNS>
Bonobo_PropertyBag  bag,const char         *key,gint16              value,CORBA_Environment  *opt_ev
</FUNCTION>
<FUNCTION>
<NAME>bonobo_pbclient_set_ushort</NAME>
<RETURNS>void</RETURNS>
Bonobo_PropertyBag  bag,const char         *key,guint16             value,CORBA_Environment  *opt_ev
</FUNCTION>
<FUNCTION>
<NAME>bonobo_pbclient_set_long</NAME>
<RETURNS>void</RETURNS>
Bonobo_PropertyBag  bag,const char         *key,gint32              value,CORBA_Environment  *opt_ev
</FUNCTION>
<FUNCTION>
<NAME>bonobo_pbclient_set_ulong</NAME>
<RETURNS>void</RETURNS>
Bonobo_PropertyBag  bag,const char         *key,guint32             value,CORBA_Environment  *opt_ev
</FUNCTION>
<FUNCTION>
<NAME>bonobo_pbclient_set_float</NAME>
<RETURNS>void</RETURNS>
Bonobo_PropertyBag  bag,const char         *key,gfloat              value,CORBA_Environment  *opt_ev
</FUNCTION>
<FUNCTION>
<NAME>bonobo_pbclient_set_double</NAME>
<RETURNS>void</RETURNS>
Bonobo_PropertyBag  bag,const char         *key,gdouble             value,CORBA_Environment  *opt_ev
</FUNCTION>
<FUNCTION>
<NAME>bonobo_pbclient_set_boolean</NAME>
<RETURNS>void</RETURNS>
Bonobo_PropertyBag  bag,const char         *key,gboolean            value,CORBA_Environment  *opt_ev
</FUNCTION>
<FUNCTION>
<NAME>bonobo_pbclient_set_char</NAME>
<RETURNS>void</RETURNS>
Bonobo_PropertyBag  bag,const char         *key,gchar               value,CORBA_Environment  *opt_ev
</FUNCTION>
<FUNCTION>
<NAME>bonobo_pbclient_set_value</NAME>
<RETURNS>void</RETURNS>
Bonobo_PropertyBag  bag,const char         *key,CORBA_any          *value,CORBA_Environment  *opt_ev
</FUNCTION>
<FUNCTION>
<NAME>bonobo_pbclient_get_doc_title</NAME>
<RETURNS>char  *</RETURNS>
Bonobo_PropertyBag  bag,const char         *key,CORBA_Environment  *opt_ev
</FUNCTION>
<FUNCTION>
<NAME>bonobo_pbclient_get_doc</NAME>
<RETURNS>char  *</RETURNS>
Bonobo_PropertyBag  bag,const char         *key,CORBA_Environment  *opt_ev
</FUNCTION>
<FUNCTION>
<NAME>bonobo_pbclient_get_keys</NAME>
<RETURNS>GList  *</RETURNS>
Bonobo_PropertyBag  bag,CORBA_Environment  *opt_ev
</FUNCTION>
<FUNCTION>
<NAME>bonobo_pbclient_free_keys</NAME>
<RETURNS>void</RETURNS>
GList *key_list
</FUNCTION>
<FUNCTION>
<NAME>bonobo_pbclient_get_flags</NAME>
<RETURNS>Bonobo_PropertyFlags</RETURNS>
Bonobo_PropertyBag  bag,const char         *key,CORBA_Environment  *opt_ev
</FUNCTION>
<FUNCTION>
<NAME>bonobo_pbclient_set</NAME>
<RETURNS>void</RETURNS>
Bonobo_PropertyBag  bag,CORBA_Environment  *opt_ev,const char         *first_prop,...
</FUNCTION>
<FUNCTION>
<NAME>bonobo_pbclient_get</NAME>
<RETURNS>void</RETURNS>
Bonobo_PropertyBag  bag,CORBA_Environment  *opt_ev,const char         *first_prop,...
</FUNCTION>
<FUNCTION>
<NAME>bonobo_pbclient_setv</NAME>
<RETURNS>char  *</RETURNS>
Bonobo_PropertyBag  bag,CORBA_Environment  *ev,const char         *first_prop,va_list             var_args
</FUNCTION>
<FUNCTION>
<NAME>bonobo_pbclient_getv</NAME>
<RETURNS>char  *</RETURNS>
Bonobo_PropertyBag  bag,CORBA_Environment  *ev,const char         *first_prop,va_list             var_args
</FUNCTION>
<MACRO>
<NAME>bonobo_property_bag_client_setv</NAME>
#define bonobo_property_bag_client_setv                                       \
bonobo_pbclient_setv    
</MACRO>
<MACRO>
<NAME>bonobo_property_bag_client_getv</NAME>
#define bonobo_property_bag_client_getv                                       \
bonobo_pbclient_getv
</MACRO>
<MACRO>
<NAME>bonobo_property_bag_client_get_property_type</NAME>
#define bonobo_property_bag_client_get_property_type                          \
bonobo_pbclient_get_type
</MACRO>
<MACRO>
<NAME>bonobo_property_bag_client_get_value_gboolean</NAME>
#define bonobo_property_bag_client_get_value_gboolean                         \
bonobo_pbclient_get_boolean
</MACRO>
<MACRO>
<NAME>bonobo_property_bag_client_get_value_gint</NAME>
#define bonobo_property_bag_client_get_value_gint                             \
bonobo_pbclient_get_long
</MACRO>
<MACRO>
<NAME>bonobo_property_bag_client_get_value_glong</NAME>
#define bonobo_property_bag_client_get_value_glong                            \
bonobo_pbclient_get_long 
</MACRO>
<MACRO>
<NAME>bonobo_property_bag_client_get_value_gfloat</NAME>
#define bonobo_property_bag_client_get_value_gfloat                           \
bonobo_pbclient_get_float 
</MACRO>
<MACRO>
<NAME>bonobo_property_bag_client_get_value_gdouble</NAME>
#define bonobo_property_bag_client_get_value_gdouble                          \
bonobo_pbclient_get_double
</MACRO>
<MACRO>
<NAME>bonobo_property_bag_client_get_value_string</NAME>
#define bonobo_property_bag_client_get_value_string                           \
bonobo_pbclient_get_string
</MACRO>
<MACRO>
<NAME>bonobo_property_bag_client_get_value_any</NAME>
#define bonobo_property_bag_client_get_value_any(pb, name, ev)                \
bonobo_pbclient_get_value (pb, name, NULL, ev);
</MACRO>
<MACRO>
<NAME>bonobo_property_bag_client_get_default_gboolean</NAME>
#define bonobo_property_bag_client_get_default_gboolean                       \
bonobo_pbclient_get_default_boolean
</MACRO>
<MACRO>
<NAME>bonobo_property_bag_client_get_default_gint</NAME>
#define bonobo_property_bag_client_get_default_gint                           \
bonobo_pbclient_get_default_long
</MACRO>
<MACRO>
<NAME>bonobo_property_bag_client_get_default_glong</NAME>
#define bonobo_property_bag_client_get_default_glong                          \
bonobo_pbclient_get_default_long
</MACRO>
<MACRO>
<NAME>bonobo_property_bag_client_get_default_gfloat</NAME>
#define bonobo_property_bag_client_get_default_gfloat                         \
bonobo_pbclient_get_default_float
</MACRO>
<MACRO>
<NAME>bonobo_property_bag_client_get_default_gdouble</NAME>
#define bonobo_property_bag_client_get_default_gdouble                        \
bonobo_pbclient_get_default_double
</MACRO>
<MACRO>
<NAME>bonobo_property_bag_client_get_default_string</NAME>
#define bonobo_property_bag_client_get_default_string                         \
bonobo_pbclient_get_default_string
</MACRO>
<MACRO>
<NAME>bonobo_property_bag_client_get_default_any</NAME>
#define bonobo_property_bag_client_get_default_any(pb, name, ev)              \
bonobo_pbclient_get_default_value (pb, name, NULL, ev)
</MACRO>
<MACRO>
<NAME>bonobo_property_bag_client_set_value_gboolean</NAME>
#define bonobo_property_bag_client_set_value_gboolean                         \
bonobo_pbclient_set_boolean   
</MACRO>
<MACRO>
<NAME>bonobo_property_bag_client_set_value_gint</NAME>
#define bonobo_property_bag_client_set_value_gint                             \
bonobo_pbclient_set_long
</MACRO>
<MACRO>
<NAME>bonobo_property_bag_client_set_value_glong</NAME>
#define bonobo_property_bag_client_set_value_glong                            \
bonobo_pbclient_set_long
</MACRO>
<MACRO>
<NAME>bonobo_property_bag_client_set_value_gfloat</NAME>
#define bonobo_property_bag_client_set_value_gfloat                           \
bonobo_pbclient_set_float
</MACRO>
<MACRO>
<NAME>bonobo_property_bag_client_set_value_gdouble</NAME>
#define bonobo_property_bag_client_set_value_gdouble                          \
bonobo_pbclient_set_double
</MACRO>
<MACRO>
<NAME>bonobo_property_bag_client_set_value_string</NAME>
#define bonobo_property_bag_client_set_value_string                           \
bonobo_pbclient_set_string
</MACRO>
<MACRO>
<NAME>bonobo_property_bag_client_set_value_any</NAME>
#define bonobo_property_bag_client_set_value_any                              \
bonobo_pbclient_set_value 
</MACRO>
<MACRO>
<NAME>bonobo_property_bag_client_get_docstring</NAME>
#define bonobo_property_bag_client_get_docstring                              \
bonobo_pbclient_get_doc_title
</MACRO>
<MACRO>
<NAME>bonobo_property_bag_client_get_flags</NAME>
#define bonobo_property_bag_client_get_flags	                              \
bonobo_pbclient_get_flags
</MACRO>
<FUNCTION>
<NAME>bonobo_context_init</NAME>
<RETURNS>void  </RETURNS>
void
</FUNCTION>
<FUNCTION>
<NAME>bonobo_context_shutdown</NAME>
<RETURNS>void  </RETURNS>
void
</FUNCTION>
<FUNCTION>
<NAME>bonobo_object_init</NAME>
<RETURNS>void  </RETURNS>
void
</FUNCTION>
<FUNCTION>
<NAME>bonobo_object_shutdown</NAME>
<RETURNS>int  </RETURNS>
void
</FUNCTION>
<FUNCTION>
<NAME>bonobo_exception_shutdown</NAME>
<RETURNS>void  </RETURNS>
void
</FUNCTION>
<FUNCTION>
<NAME>bonobo_property_bag_shutdown</NAME>
<RETURNS>void  </RETURNS>
void
</FUNCTION>
<FUNCTION>
<NAME>bonobo_running_context_shutdown</NAME>
<RETURNS>void  </RETURNS>
void
</FUNCTION>
<STRUCT>
<NAME>BonoboRunningContextPrivate</NAME>
</STRUCT>
<TYPEDEF>
<NAME>BonoboRunningContext</NAME>
typedef struct {
	BonoboObject parent;

	BonoboRunningContextPrivate *priv;
} BonoboRunningContext;
</TYPEDEF>
<TYPEDEF>
<NAME>BonoboRunningContextClass</NAME>
typedef struct {
	BonoboObjectClass parent;

	POA_Bonobo_RunningContext__epv epv;

	void (*last_unref) (void);
} BonoboRunningContextClass;
</TYPEDEF>
<FUNCTION>
<NAME>bonobo_running_context_get_type</NAME>
<RETURNS>GType  </RETURNS>
void
</FUNCTION>
<FUNCTION>
<NAME>bonobo_running_context_new</NAME>
<RETURNS>BonoboObject  *</RETURNS>
void
</FUNCTION>
<FUNCTION>
<NAME>bonobo_running_context_add_object</NAME>
<RETURNS>void  </RETURNS>
CORBA_Object object
</FUNCTION>
<FUNCTION>
<NAME>bonobo_running_context_remove_object</NAME>
<RETURNS>void  </RETURNS>
CORBA_Object object
</FUNCTION>
<FUNCTION>
<NAME>bonobo_running_context_ignore_object</NAME>
<RETURNS>void  </RETURNS>
CORBA_Object object
</FUNCTION>
<FUNCTION>
<NAME>bonobo_running_context_trace_objects</NAME>
<RETURNS>void  </RETURNS>
CORBA_Object object,const char  *fn,int          line,int          mode
</FUNCTION>
<FUNCTION>
<NAME>bonobo_running_context_at_exit_unref</NAME>
<RETURNS>void  </RETURNS>
CORBA_Object object
</FUNCTION>
<MACRO>
<NAME>bonobo_running_context_add_object</NAME>
#	define           bonobo_running_context_add_object(o)   G_STMT_START{bonobo_running_context_trace_objects((o),G_GNUC_PRETTY_FUNCTION,__LINE__,0);}G_STMT_END
</MACRO>
<MACRO>
<NAME>bonobo_running_context_remove_object</NAME>
#	define           bonobo_running_context_remove_object(o)   G_STMT_START{bonobo_running_context_trace_objects((o),G_GNUC_PRETTY_FUNCTION,__LINE__,1);}G_STMT_END
</MACRO>
<MACRO>
<NAME>bonobo_running_context_ignore_object</NAME>
#	define           bonobo_running_context_ignore_object(o)   G_STMT_START{bonobo_running_context_trace_objects((o),G_GNUC_PRETTY_FUNCTION,__LINE__,2);}G_STMT_END
</MACRO>
<MACRO>
<NAME>BONOBO_TYPE_GENERIC_FACTORY</NAME>
#define BONOBO_TYPE_GENERIC_FACTORY        (bonobo_generic_factory_get_type ())
</MACRO>
<MACRO>
<NAME>BONOBO_GENERIC_FACTORY_TYPE</NAME>
#define BONOBO_GENERIC_FACTORY_TYPE        BONOBO_TYPE_GENERIC_FACTORY /* deprecated, you should use BONOBO_TYPE_GENERIC_FACTORY */
</MACRO>
<MACRO>
<NAME>BONOBO_GENERIC_FACTORY</NAME>
#define BONOBO_GENERIC_FACTORY(o)          (G_TYPE_CHECK_INSTANCE_CAST ((o), BONOBO_TYPE_GENERIC_FACTORY, BonoboGenericFactory))
</MACRO>
<MACRO>
<NAME>BONOBO_GENERIC_FACTORY_CLASS</NAME>
#define BONOBO_GENERIC_FACTORY_CLASS(k)    (G_TYPE_CHECK_CLASS_CAST((k), BONOBO_TYPE_GENERIC_FACTORY, BonoboGenericFactoryClass))
</MACRO>
<MACRO>
<NAME>BONOBO_IS_GENERIC_FACTORY</NAME>
#define BONOBO_IS_GENERIC_FACTORY(o)       (G_TYPE_CHECK_INSTANCE_TYPE ((o), BONOBO_TYPE_GENERIC_FACTORY))
</MACRO>
<MACRO>
<NAME>BONOBO_IS_GENERIC_FACTORY_CLASS</NAME>
#define BONOBO_IS_GENERIC_FACTORY_CLASS(k) (G_TYPE_CHECK_CLASS_TYPE ((k), BONOBO_TYPE_GENERIC_FACTORY))
</MACRO>
<STRUCT>
<NAME>BonoboGenericFactoryPrivate</NAME>
</STRUCT>
<STRUCT>
<NAME>BonoboGenericFactory</NAME>
</STRUCT>
<USER_FUNCTION>
<NAME>BonoboFactoryCallback</NAME>
<RETURNS>BonoboObject *</RETURNS>
BonoboGenericFactory *factory,
						 const char           *component_id,
						 gpointer              closure
</USER_FUNCTION>
<STRUCT>
<NAME>BonoboGenericFactory</NAME>
struct BonoboGenericFactory {
	BonoboObject                 base;

	BonoboGenericFactoryPrivate *priv;
};
</STRUCT>
<TYPEDEF>
<NAME>BonoboGenericFactoryClass</NAME>
typedef struct {
	BonoboObjectClass            parent_class;

	POA_Bonobo_GenericFactory__epv epv;

	BonoboObject *(*new_generic) (BonoboGenericFactory *factory,
				      const char           *act_iid);

} BonoboGenericFactoryClass;
</TYPEDEF>
<FUNCTION>
<NAME>bonobo_generic_factory_get_type</NAME>
<RETURNS>GType  </RETURNS>
void
</FUNCTION>
<FUNCTION>
<NAME>bonobo_generic_factory_new</NAME>
<RETURNS>BonoboGenericFactory  *</RETURNS>
const char           *act_iid,BonoboFactoryCallback factory_cb,gpointer              user_data
</FUNCTION>
<FUNCTION>
<NAME>bonobo_generic_factory_new_closure</NAME>
<RETURNS>BonoboGenericFactory  *</RETURNS>
const char           *act_iid,GClosure             *factory_closure
</FUNCTION>
<FUNCTION>
<NAME>bonobo_generic_factory_construct</NAME>
<RETURNS>BonoboGenericFactory  *</RETURNS>
BonoboGenericFactory *factory,const char           *act_iid,GClosure             *factory_cb
</FUNCTION>
<FUNCTION>
<NAME>bonobo_generic_factory_construct_noreg</NAME>
<RETURNS>void  </RETURNS>
BonoboGenericFactory *factory,const char           *act_iid,GClosure             *factory_cb
</FUNCTION>
<FUNCTION>
<NAME>bonobo_generic_factory_main</NAME>
<RETURNS>int  </RETURNS>
const char           *act_iid,BonoboFactoryCallback factory_cb,gpointer              user_data
</FUNCTION>
<MACRO>
<NAME>BONOBO_FACTORY_INIT</NAME>
#define BONOBO_FACTORY_INIT(descr, version, argcp, argv)			\
	if (!bonobo_ui_init (descr, version, argcp, argv))			\
		g_error (_("Could not initialize Bonobo"));
</MACRO>
<MACRO>
<NAME>BONOBO_FACTORY_INIT</NAME>
#define BONOBO_FACTORY_INIT(desc, version, argcp, argv)				\
	if (!bonobo_init (argcp, argv))						\
		g_error (_("Could not initialize Bonobo"));
</MACRO>
<MACRO>
<NAME>BONOBO_OAF_FACTORY</NAME>
#define BONOBO_OAF_FACTORY(oafiid, descr, version, callback, data)		\
	BONOBO_ACTIVATION_FACTORY(oafiid, descr, version, callback, data)
</MACRO>
<MACRO>
<NAME>BONOBO_OAF_FACTORY_MULTI</NAME>
#define BONOBO_OAF_FACTORY_MULTI(oafiid, descr, version, callback, data)	\
	BONOBO_ACTIVATION_FACTORY(oafiid, descr, version, callback, data)
</MACRO>
<MACRO>
<NAME>BONOBO_ACTIVATION_FACTORY</NAME>
#define BONOBO_ACTIVATION_FACTORY(oafiid, descr, version, callback, data)	\
int main (int argc, char *argv [])						\
{										\
	BONOBO_FACTORY_INIT (descr, version, &argc, argv);			\
									        \
	return bonobo_generic_factory_main (oafiid, callback, data);		\
}                                                                             
</MACRO>
<MACRO>
<NAME>BONOBO_TYPE_SHLIB_FACTORY</NAME>
#define BONOBO_TYPE_SHLIB_FACTORY        (bonobo_shlib_factory_get_type ())
</MACRO>
<MACRO>
<NAME>BONOBO_SHLIB_FACTORY_TYPE</NAME>
#define BONOBO_SHLIB_FACTORY_TYPE        BONOBO_TYPE_SHLIB_FACTORY /* deprecated, you should use BONOBO_TYPE_SHLIB_FACTORY */
</MACRO>
<MACRO>
<NAME>BONOBO_SHLIB_FACTORY</NAME>
#define BONOBO_SHLIB_FACTORY(o)          (G_TYPE_CHECK_INSTANCE_CAST ((o), BONOBO_TYPE_SHLIB_FACTORY, BonoboShlibFactory))
</MACRO>
<MACRO>
<NAME>BONOBO_SHLIB_FACTORY_CLASS</NAME>
#define BONOBO_SHLIB_FACTORY_CLASS(k)    (G_TYPE_CHECK_CLASS_CAST((k), BONOBO_TYPE_SHLIB_FACTORY, BonoboShlibFactoryClass))
</MACRO>
<MACRO>
<NAME>BONOBO_IS_SHLIB_FACTORY</NAME>
#define BONOBO_IS_SHLIB_FACTORY(o)       (G_TYPE_CHECK_INSTANCE_TYPE ((o), BONOBO_TYPE_SHLIB_FACTORY))
</MACRO>
<MACRO>
<NAME>BONOBO_IS_SHLIB_FACTORY_CLASS</NAME>
#define BONOBO_IS_SHLIB_FACTORY_CLASS(k) (G_TYPE_CHECK_CLASS_TYPE ((k), BONOBO_TYPE_SHLIB_FACTORY))
</MACRO>
<STRUCT>
<NAME>BonoboShlibFactoryPrivate</NAME>
</STRUCT>
<TYPEDEF>
<NAME>BonoboShlibFactory</NAME>
typedef struct {
	BonoboGenericFactory base;

	BonoboShlibFactoryPrivate *priv;
} BonoboShlibFactory;
</TYPEDEF>
<TYPEDEF>
<NAME>BonoboShlibFactoryClass</NAME>
typedef struct {
	BonoboGenericFactoryClass parent_class;
} BonoboShlibFactoryClass;
</TYPEDEF>
<FUNCTION>
<NAME>bonobo_shlib_factory_get_type</NAME>
<RETURNS>GType  </RETURNS>
void
</FUNCTION>
<FUNCTION>
<NAME>bonobo_shlib_factory_construct</NAME>
<RETURNS>BonoboShlibFactory  *</RETURNS>
BonoboShlibFactory    *factory,const char            *component_id,PortableServer_POA     poa,gpointer               act_impl_ptr,GClosure              *closure
</FUNCTION>
<FUNCTION>
<NAME>bonobo_shlib_factory_new</NAME>
<RETURNS>BonoboShlibFactory  *</RETURNS>
const char            *component_id,PortableServer_POA     poa,gpointer               act_impl_ptr,BonoboFactoryCallback  factory_cb,gpointer               user_data
</FUNCTION>
<FUNCTION>
<NAME>bonobo_shlib_factory_new_closure</NAME>
<RETURNS>BonoboShlibFactory  *</RETURNS>
const char            *component_id,PortableServer_POA     poa,gpointer               act_impl_ptr,GClosure              *factory_closure
</FUNCTION>
<FUNCTION>
<NAME>bonobo_shlib_factory_std</NAME>
<RETURNS>Bonobo_Unknown  </RETURNS>
const char            *component_id,PortableServer_POA     poa,gpointer               act_impl_ptr,BonoboFactoryCallback  factory_cb,gpointer               user_data,CORBA_Environment     *ev
</FUNCTION>
<MACRO>
<NAME>BONOBO_OAF_SHLIB_FACTORY</NAME>
#define BONOBO_OAF_SHLIB_FACTORY(oafiid, descr, fn, data)                     \
	BONOBO_ACTIVATION_SHLIB_FACTORY(oafiid, descr, fn, data)
</MACRO>
<MACRO>
<NAME>BONOBO_OAF_SHLIB_FACTORY_MULTI</NAME>
#define BONOBO_OAF_SHLIB_FACTORY_MULTI(oafiid, descr, fn, data)               \
	BONOBO_ACTIVATION_SHLIB_FACTORY(oafiid, descr, fn, data)
</MACRO>
<MACRO>
<NAME>BONOBO_ACTIVATION_SHLIB_FACTORY</NAME>
#define BONOBO_ACTIVATION_SHLIB_FACTORY(oafiid, descr, fn, data)	      \
static Bonobo_Unknown                                                         \
make_factory (PortableServer_POA poa, const char *iid, gpointer impl_ptr,     \
	      CORBA_Environment *ev)                                          \
{                                                                             \
	return bonobo_shlib_factory_std (oafiid, poa, impl_ptr, fn, data, ev);\
}                                                                             \
static BonoboActivationPluginObject plugin_list[] = {{oafiid, make_factory}, { NULL } };   \
const  BonoboActivationPlugin Bonobo_Plugin_info = { plugin_list, descr };
</MACRO>
<STRUCT>
<NAME>BonoboMonikerContextPrivate</NAME>
</STRUCT>
<TYPEDEF>
<NAME>BonoboMonikerContext</NAME>
typedef struct {
	BonoboObject parent;

	BonoboMonikerContextPrivate *priv;
} BonoboMonikerContext;
</TYPEDEF>
<TYPEDEF>
<NAME>BonoboMonikerContextClass</NAME>
typedef struct {
	BonoboObjectClass parent;

	POA_Bonobo_MonikerContext__epv epv;
} BonoboMonikerContextClass;
</TYPEDEF>
<FUNCTION>
<NAME>bonobo_moniker_context_new</NAME>
<RETURNS>BonoboObject  *</RETURNS>
void
</FUNCTION>
<MACRO>
<NAME>BonoboStream</NAME>
#define BonoboStream BonoboObject
</MACRO>
<MACRO>
<NAME>BONOBO_STREAM</NAME>
#define BONOBO_STREAM(o)       ((BonoboStream *)(o))
</MACRO>
<MACRO>
<NAME>BONOBO_STREAM_CLASS</NAME>
#define BONOBO_STREAM_CLASS(k) ((BonoboObjectClass *)(k))
</MACRO>
<MACRO>
<NAME>BonoboStorage</NAME>
#define BonoboStorage BonoboObject
</MACRO>
<MACRO>
<NAME>BONOBO_STORAGE</NAME>
#define BONOBO_STORAGE(o)          ((BonoboStorage *)(o))
</MACRO>
<MACRO>
<NAME>BONOBO_STORAGE_CLASS</NAME>
#define BONOBO_STORAGE_CLASS(k)    ((BonoboObjectClass *)(k))
</MACRO>
<FUNCTION>
<NAME>bonobo_storage_copy_to</NAME>
<RETURNS>void  </RETURNS>
Bonobo_Storage     src,Bonobo_Storage     dest,CORBA_Environment *ev
</FUNCTION>
<FUNCTION>
<NAME>bonobo_stream_client_write</NAME>
<RETURNS>void  </RETURNS>
const Bonobo_Stream stream,const void         *buffer,const size_t        size,CORBA_Environment  *ev
</FUNCTION>
<FUNCTION>
<NAME>bonobo_stream_client_read</NAME>
<RETURNS>guint8     *</RETURNS>
const Bonobo_Stream stream,const size_t        size,CORBA_long         *length_read,CORBA_Environment  *ev
</FUNCTION>
<FUNCTION>
<NAME>bonobo_stream_client_write_string</NAME>
<RETURNS>void  </RETURNS>
const Bonobo_Stream stream,const char         *str,const gboolean      terminate,CORBA_Environment  *ev
</FUNCTION>
<FUNCTION>
<NAME>bonobo_stream_client_printf</NAME>
<RETURNS>void  </RETURNS>
const Bonobo_Stream stream,const gboolean      terminate,CORBA_Environment  *ev,const char         *fmt, ...
</FUNCTION>
<FUNCTION>
<NAME>bonobo_stream_client_read_string</NAME>
<RETURNS>CORBA_long  </RETURNS>
const Bonobo_Stream stream,char              **str,CORBA_Environment  *ev
</FUNCTION>
<FUNCTION>
<NAME>bonobo_stream_client_get_length</NAME>
<RETURNS>CORBA_long  </RETURNS>
const Bonobo_Stream stream,CORBA_Environment  *ev
</FUNCTION>
<STRUCT>
<NAME>BonoboStreamMem</NAME>
</STRUCT>
<STRUCT>
<NAME>BonoboStreamMemPrivate</NAME>
</STRUCT>
<MACRO>
<NAME>BONOBO_TYPE_STREAM_MEM</NAME>
#define BONOBO_TYPE_STREAM_MEM        (bonobo_stream_mem_get_type ())
</MACRO>
<MACRO>
<NAME>BONOBO_STREAM_MEM_TYPE</NAME>
#define BONOBO_STREAM_MEM_TYPE        BONOBO_TYPE_STREAM_MEM /* deprecated, you should use BONOBO_TYPE_STREAM_MEM */
</MACRO>
<MACRO>
<NAME>BONOBO_STREAM_MEM</NAME>
#define BONOBO_STREAM_MEM(o)          (G_TYPE_CHECK_INSTANCE_CAST ((o), BONOBO_TYPE_STREAM_MEM, BonoboStreamMem))
</MACRO>
<MACRO>
<NAME>BONOBO_STREAM_MEM_CLASS</NAME>
#define BONOBO_STREAM_MEM_CLASS(k)    (G_TYPE_CHECK_CLASS_CAST((k), BONOBO_TYPE_STREAM_MEM, BonoboStreamMemClass))
</MACRO>
<MACRO>
<NAME>BONOBO_IS_STREAM_MEM</NAME>
#define BONOBO_IS_STREAM_MEM(o)       (G_TYPE_CHECK_INSTANCE_TYPE ((o), BONOBO_TYPE_STREAM_MEM))
</MACRO>
<MACRO>
<NAME>BONOBO_IS_STREAM_MEM_CLASS</NAME>
#define BONOBO_IS_STREAM_MEM_CLASS(k) (G_TYPE_CHECK_CLASS_TYPE ((k), BONOBO_TYPE_STREAM_MEM))
</MACRO>
<STRUCT>
<NAME>BonoboStreamMem</NAME>
struct BonoboStreamMem {
	BonoboObject parent;

	char         *buffer;
	size_t        size;
	long          pos;
	gboolean      read_only;
	gboolean      resizable;
	char         *content_type;
	char         *name;

	BonoboStreamMemPrivate *priv;
};
</STRUCT>
<TYPEDEF>
<NAME>BonoboStreamMemClass</NAME>
typedef struct {
	BonoboObjectClass parent_class;

	POA_Bonobo_Stream__epv epv;

	char           *(*get_buffer) (BonoboStreamMem *stream_mem);
	size_t          (*get_size)   (BonoboStreamMem *stream_mem);
} BonoboStreamMemClass;
</TYPEDEF>
<FUNCTION>
<NAME>bonobo_stream_mem_get_type</NAME>
<RETURNS>GType  </RETURNS>
void
</FUNCTION>
<FUNCTION>
<NAME>bonobo_stream_mem_construct</NAME>
<RETURNS>BonoboStreamMem  *</RETURNS>
BonoboStreamMem  *stream_mem,const char       *buffer,size_t            size,gboolean          read_only,gboolean          resizable
</FUNCTION>
<FUNCTION>
<NAME>bonobo_stream_mem_create</NAME>
<RETURNS>BonoboObject     *</RETURNS>
const char       *buffer,size_t            size,gboolean          read_only,gboolean          resizable
</FUNCTION>
<FUNCTION>
<NAME>bonobo_stream_mem_get_buffer</NAME>
<RETURNS>const char       *</RETURNS>
BonoboStreamMem  *stream_mem
</FUNCTION>
<FUNCTION>
<NAME>bonobo_stream_mem_get_size</NAME>
<RETURNS>size_t  </RETURNS>
BonoboStreamMem  *stream_mem
</FUNCTION>
<MACRO>
<NAME>BONOBO_TYPE_X_OBJECT</NAME>
#define BONOBO_TYPE_X_OBJECT        BONOBO_TYPE_OBJECT
</MACRO>
<MACRO>
<NAME>BONOBO_X_OBJECT_TYPE</NAME>
#define BONOBO_X_OBJECT_TYPE        BONOBO_TYPE_X_OBJECT /* deprecated, you should use BONOBO_TYPE_X_OBJECT */
</MACRO>
<MACRO>
<NAME>BONOBO_X_OBJECT</NAME>
#define BONOBO_X_OBJECT(o)          BONOBO_OBJECT (o)
</MACRO>
<MACRO>
<NAME>BONOBO_X_OBJECT_CLASS</NAME>
#define BONOBO_X_OBJECT_CLASS(k)    BONOBO_OBJECT_CLASS (k)
</MACRO>
<MACRO>
<NAME>BONOBO_IS_X_OBJECT</NAME>
#define BONOBO_IS_X_OBJECT(o)       BONOBO_IS_OBJECT (o)
</MACRO>
<MACRO>
<NAME>BONOBO_IS_X_OBJECT_CLASS</NAME>
#define BONOBO_IS_X_OBJECT_CLASS(k) BONOBO_IS_OBJECT_CLASS (k)
</MACRO>
<MACRO>
<NAME>BONOBO_X_OBJECT_HEADER_SIZE</NAME>
#define BONOBO_X_OBJECT_HEADER_SIZE BONOBO_OBJECT_HEADER_SIZE
</MACRO>
<MACRO>
<NAME>BONOBO_X_OBJECT_GET_SERVANT</NAME>
#define BONOBO_X_OBJECT_GET_SERVANT(o) ((PortableServer_Servant)&(o)->servant)
</MACRO>
<MACRO>
<NAME>BONOBO_X_SERVANT_GET_OBJECT</NAME>
#define BONOBO_X_SERVANT_GET_OBJECT(o) ((BonoboXObject *)((guchar *)(o)				\
					     - BONOBO_X_OBJECT_HEADER_SIZE			\
					     - sizeof (struct CORBA_Object_struct)	\
					     - sizeof (gpointer) * 4))
</MACRO>
<MACRO>
<NAME>BonoboXObject</NAME>
#define BonoboXObject            BonoboObject
</MACRO>
<MACRO>
<NAME>BonoboXObjectClass</NAME>
#define BonoboXObjectClass       BonoboObjectClass
</MACRO>
<MACRO>
<NAME>bonobo_x_object</NAME>
#define bonobo_x_object          bonobo_object
</MACRO>
<MACRO>
<NAME>BonoboXObjectPOAFn</NAME>
#define BonoboXObjectPOAFn       BonoboObjectPOAFn
</MACRO>
<MACRO>
<NAME>bonobo_x_object_get_type</NAME>
#define bonobo_x_object_get_type bonobo_object_get_type
</MACRO>
<MACRO>
<NAME>bonobo_x_type_unique</NAME>
#define bonobo_x_type_unique     bonobo_type_unique
</MACRO>
<MACRO>
<NAME>bonobo_x_type_setup</NAME>
#define bonobo_x_type_setup      bonobo_type_setup
</MACRO>
<MACRO>
<NAME>BONOBO_X_TYPE_FUNC_FULL</NAME>
#define BONOBO_X_TYPE_FUNC_FULL(class_name, corba_name, parent, prefix)       \
GType                                                                         \
prefix##_get_type (void)                                                      \
{                                                                             \
	GType ptype;                                                          \
	static GType type = 0;                                                \
                                                                              \
	if (type == 0) {                                                      \
		static GTypeInfo info = {                                     \
			sizeof (class_name##Class),                           \
			(GBaseInitFunc) NULL,                                 \
			(GBaseFinalizeFunc) NULL,                             \
			(GClassInitFunc) prefix##_class_init,                 \
			NULL, NULL,                                           \
			sizeof (class_name),                                  \
			0,                                                    \
			(GInstanceInitFunc) prefix##_init                     \
		};                                                            \
		ptype = (parent);                                             \
		type = bonobo_x_type_unique (ptype,                           \
			POA_##corba_name##__init, POA_##corba_name##__fini,   \
			G_STRUCT_OFFSET (class_name##Class, epv),             \
			&info, #class_name);                                  \
	}                                                                     \
	return type;                                                          \
}
</MACRO>
<MACRO>
<NAME>BONOBO_X_TYPE_FUNC</NAME>
#define BONOBO_X_TYPE_FUNC(class_name, parent, prefix)                        \
GType                                                                         \
prefix##_get_type (void)                                                      \
{                                                                             \
	GType ptype;                                                          \
	static GType type = 0;                                                \
                                                                              \
	if (type == 0) {                                                      \
		static GTypeInfo info = {                                     \
			sizeof (class_name##Class),                           \
			(GBaseInitFunc) NULL,                                 \
			(GBaseFinalizeFunc) NULL,                             \
			(GClassInitFunc) prefix##_class_init,                 \
			NULL, NULL,                                           \
			sizeof (class_name),                                  \
			0,                                                    \
			(GInstanceInitFunc) prefix##_init                     \
		};                                                            \
		ptype = (parent);                                             \
		type = bonobo_x_type_unique (ptype, NULL, NULL, 0,            \
					     &info, #class_name);             \
	}                                                                     \
	return type;                                                          \
}
</MACRO>
<FUNCTION>
<NAME>bonobo_corba_object_type_register_static</NAME>
<RETURNS>GType  </RETURNS>
const gchar           *name,const CORBA_TypeCode   tc,gboolean               is_bonobo_unknown
</FUNCTION>
<FUNCTION>
<NAME>bonobo_unknown_get_type</NAME>
<RETURNS>GType  </RETURNS>
void
</FUNCTION>
<FUNCTION>
<NAME>bonobo_corba_any_get_type</NAME>
<RETURNS>GType  </RETURNS>
void
</FUNCTION>
<FUNCTION>
<NAME>bonobo_corba_object_get_type</NAME>
<RETURNS>GType  </RETURNS>
void
</FUNCTION>
<FUNCTION>
<NAME>bonobo_corba_typecode_get_type</NAME>
<RETURNS>GType  </RETURNS>
void
</FUNCTION>
<FUNCTION>
<NAME>bonobo_corba_exception_get_type</NAME>
<RETURNS>GType  </RETURNS>
void
</FUNCTION>
<MACRO>
<NAME>BONOBO_TYPE_UNKNOWN</NAME>
#define BONOBO_TYPE_UNKNOWN                         (bonobo_unknown_get_type ())
</MACRO>
<MACRO>
<NAME>BONOBO_TYPE_CORBA_ANY</NAME>
#define BONOBO_TYPE_CORBA_ANY                       (bonobo_corba_any_get_type ())
</MACRO>
<MACRO>
<NAME>BONOBO_TYPE_CORBA_OBJECT</NAME>
#define BONOBO_TYPE_CORBA_OBJECT                    (bonobo_corba_object_get_type ())
</MACRO>
<MACRO>
<NAME>BONOBO_TYPE_CORBA_TYPECODE</NAME>
#define BONOBO_TYPE_CORBA_TYPECODE                  (bonobo_corba_typecode_get_type ())
</MACRO>
<MACRO>
<NAME>BONOBO_TYPE_CORBA_EXCEPTION</NAME>
#define BONOBO_TYPE_CORBA_EXCEPTION                 (bonobo_corba_exception_get_type ())
</MACRO>
<MACRO>
<NAME>BONOBO_TYPE_STATIC_UNKNOWN</NAME>
#define BONOBO_TYPE_STATIC_UNKNOWN                  (bonobo_unknown_get_type () | G_SIGNAL_TYPE_STATIC_SCOPE)
</MACRO>
<MACRO>
<NAME>BONOBO_TYPE_STATIC_CORBA_ANY</NAME>
#define BONOBO_TYPE_STATIC_CORBA_ANY                (bonobo_corba_any_get_type () | G_SIGNAL_TYPE_STATIC_SCOPE)
</MACRO>
<MACRO>
<NAME>BONOBO_TYPE_STATIC_CORBA_OBJECT</NAME>
#define BONOBO_TYPE_STATIC_CORBA_OBJECT             (bonobo_corba_object_get_type () | G_SIGNAL_TYPE_STATIC_SCOPE)
</MACRO>
<MACRO>
<NAME>BONOBO_TYPE_STATIC_CORBA_TYPECODE</NAME>
#define BONOBO_TYPE_STATIC_CORBA_TYPECODE           (bonobo_corba_typecode_get_type () | G_SIGNAL_TYPE_STATIC_SCOPE)
</MACRO>
<MACRO>
<NAME>BONOBO_TYPE_STATIC_CORBA_EXCEPTION</NAME>
#define BONOBO_TYPE_STATIC_CORBA_EXCEPTION          (bonobo_corba_exception_get_type () | G_SIGNAL_TYPE_STATIC_SCOPE)
</MACRO>
<MACRO>
<NAME>BONOBO_VALUE_HOLDS_UNKNOWN</NAME>
#define BONOBO_VALUE_HOLDS_UNKNOWN(value)           (G_TYPE_CHECK_VALUE_TYPE ((value), BONOBO_TYPE_UNKNOWN))
</MACRO>
<MACRO>
<NAME>BONOBO_VALUE_HOLDS_CORBA_ANY</NAME>
#define BONOBO_VALUE_HOLDS_CORBA_ANY(value)         (G_TYPE_CHECK_VALUE_TYPE ((value), BONOBO_TYPE_CORBA_ANY))
</MACRO>
<MACRO>
<NAME>BONOBO_VALUE_HOLDS_CORBA_OBJECT</NAME>
#define BONOBO_VALUE_HOLDS_CORBA_OBJECT(value)      (G_TYPE_CHECK_VALUE_TYPE ((value), BONOBO_TYPE_CORBA_OBJECT))
</MACRO>
<MACRO>
<NAME>BONOBO_VALUE_HOLDS_CORBA_TYPECODE</NAME>
#define BONOBO_VALUE_HOLDS_CORBA_TYPECODE(value)    (G_TYPE_CHECK_VALUE_TYPE ((value), BONOBO_TYPE_CORBA_TYPECODE))
</MACRO>
<MACRO>
<NAME>BONOBO_VALUE_HOLDS_CORBA_EXCEPTION</NAME>
#define BONOBO_VALUE_HOLDS_CORBA_EXCEPTION(value)   (G_TYPE_CHECK_VALUE_TYPE ((value), BONOBO_TYPE_CORBA_EXCEPTION))
</MACRO>
<FUNCTION>
<NAME>bonobo_value_get_unknown</NAME>
<RETURNS>Bonobo_Unknown  </RETURNS>
const GValue *value
</FUNCTION>
<FUNCTION>
<NAME>bonobo_value_get_corba_any</NAME>
<RETURNS>BonoboArg                *</RETURNS>
const GValue *value
</FUNCTION>
<FUNCTION>
<NAME>bonobo_value_get_corba_object</NAME>
<RETURNS>CORBA_Object  </RETURNS>
const GValue *value
</FUNCTION>
<FUNCTION>
<NAME>bonobo_value_get_corba_typecode</NAME>
<RETURNS>CORBA_TypeCode  </RETURNS>
const GValue *value
</FUNCTION>
<FUNCTION>
<NAME>bonobo_value_get_corba_exception</NAME>
<RETURNS>const CORBA_Environment  *</RETURNS>
const GValue *value
</FUNCTION>
<FUNCTION>
<NAME>bonobo_value_set_corba_object</NAME>
<RETURNS>void  </RETURNS>
GValue                      *value,const CORBA_Object           object
</FUNCTION>
<FUNCTION>
<NAME>bonobo_value_set_unknown</NAME>
<RETURNS>void  </RETURNS>
GValue                      *value,const Bonobo_Unknown         unknown
</FUNCTION>
<FUNCTION>
<NAME>bonobo_value_set_corba_any</NAME>
<RETURNS>void  </RETURNS>
GValue                      *value,const CORBA_any             *any
</FUNCTION>
<FUNCTION>
<NAME>bonobo_value_set_corba_typecode</NAME>
<RETURNS>void  </RETURNS>
GValue                      *value,const CORBA_TypeCode         tc
</FUNCTION>
<FUNCTION>
<NAME>bonobo_value_set_corba_environment</NAME>
<RETURNS>void  </RETURNS>
GValue                      *value,const CORBA_Environment     *ev
</FUNCTION>
<FUNCTION>
<NAME>bonobo_closure_invoke_va_list</NAME>
<RETURNS>void  </RETURNS>
GClosure            *closure,GValue              *return_value,va_list              var_args
</FUNCTION>
<FUNCTION>
<NAME>bonobo_closure_invoke</NAME>
<RETURNS>void  </RETURNS>
GClosure            *closure,GType                return_type,...
</FUNCTION>
<FUNCTION>
<NAME>bonobo_closure_store</NAME>
<RETURNS>GClosure  *</RETURNS>
GClosure            *closure,GClosureMarshal      default_marshal
</FUNCTION>
<MACRO>
<NAME>BONOBO_BOILERPLATE</NAME>
#define BONOBO_BOILERPLATE(type, type_as_function, corba_type,		\
			   parent_type, parent_type_macro,		\
			   register_type_macro)				\
static void type_as_function ## _class_init    (type ## Class *klass);	\
static void type_as_function ## _instance_init (type          *object);	\
static parent_type ## Class *parent_class = NULL;			\
static void								\
type_as_function ## _class_init_trampoline (gpointer klass,		\
					    gpointer data)		\
{									\
	parent_class = g_type_class_ref (parent_type_macro);		\
	type_as_function ## _class_init (klass);			\
}									\
GType									\
type_as_function ## _get_type (void)					\
{									\
	static GType object_type = 0;					\
	if (object_type == 0) {						\
		static const GTypeInfo object_info = {			\
		    sizeof (type ## Class),				\
		    NULL,		/* base_init */			\
		    NULL,		/* base_finalize */		\
		    type_as_function ## _class_init_trampoline,		\
		    NULL,		/* class_finalize */		\
		    NULL,               /* class_data */		\
		    sizeof (type),					\
		    0,                  /* n_preallocs */		\
		    (GInstanceInitFunc) type_as_function ## _instance_init \
		};							\
		object_type = register_type_macro			\
			(type, type_as_function, corba_type,		\
			 parent_type, parent_type_macro);		\
	}								\
	return object_type;						\
}
</MACRO>
<MACRO>
<NAME>BONOBO_CALL_PARENT</NAME>
#define BONOBO_CALL_PARENT(parent_class_cast, name, args)		\
	((parent_class_cast(parent_class)->name != NULL) ?		\
	 parent_class_cast(parent_class)->name args : (void)0)
</MACRO>
<MACRO>
<NAME>BONOBO_CALL_PARENT_WITH_DEFAULT</NAME>
#define BONOBO_CALL_PARENT_WITH_DEFAULT(parent_class_cast,		\
					name, args, def_return)		\
	((parent_class_cast(parent_class)->name != NULL) ?		\
	 parent_class_cast(parent_class)->name args : def_return)
</MACRO>
<MACRO>
<NAME>BONOBO_CLASS_BOILERPLATE</NAME>
#define BONOBO_CLASS_BOILERPLATE(type, type_as_function,		\
				 parent_type, parent_type_macro)	\
	BONOBO_BOILERPLATE(type, type_as_function, type,		\
			   parent_type, parent_type_macro,		\
			   BONOBO_REGISTER_TYPE)
</MACRO>
<MACRO>
<NAME>BONOBO_REGISTER_TYPE</NAME>
#define BONOBO_REGISTER_TYPE(type, type_as_function, corba_type,	\
			     parent_type, parent_type_macro)		\
	bonobo_type_unique (parent_type_macro, NULL, NULL, 0,		\
			    &object_info, #type)
</MACRO>
<MACRO>
<NAME>BONOBO_CLASS_BOILERPLATE_FULL</NAME>
#define BONOBO_CLASS_BOILERPLATE_FULL(type, type_as_function,		\
				      corba_type,			\
				      parent_type, parent_type_macro)	\
	BONOBO_BOILERPLATE(type, type_as_function, corba_type,		\
			   parent_type, parent_type_macro,		\
			   BONOBO_REGISTER_TYPE_FULL)
</MACRO>
<MACRO>
<NAME>BONOBO_REGISTER_TYPE_FULL</NAME>
#define BONOBO_REGISTER_TYPE_FULL(type, type_as_function, corba_type,	\
				  parent_type, parent_type_macro)	\
	bonobo_type_unique (parent_type_macro,				\
			    POA_##corba_type##__init,			\
			    POA_##corba_type##__fini,			\
			    G_STRUCT_OFFSET (type##Class, epv),		\
			    &object_info, #type)
</MACRO>
