<Sopwith> Well, it all has to be activated by an AID eventually.
<Sopwith> Like I said in e-mail, solve the defaults issue.
<Sopwith> then if the activation routines receive an IID instead of an AID, they will have a defined method of turning it into an AID
<mjs> Would it be reasonable to use the same defaults that are used when you activate with a query?
<Sopwith> a query doesn't haave defaults, because it is picking a specific item, which has all the AID fields associated with it.
<mjs> Ah
<mjs> I guess I'm not sure how this works
<mjs> When I do a query, I don't specify any of the AID fields. And the .oafinfo file only has the IID
<Sopwith> yes
<mjs> So I don't understand where the other AID fields come from in that case
<Sopwith> object directories run on specific hosts as specific users with a set domain...
<mjs> OK, but I do a query on an activation context, right?
<mjs> So how does it pick the default object directory?
<Sopwith> right
<Sopwith> it looks through all of them
<mjs> Ah
<Sopwith> ...whichever one has the records that match the query...
<mjs> Is there any specification about the order it tries them in?
<Sopwith> The order is determined by the 'selection_order' parameter to the activation-query
<mjs> Ah
<mjs> Hmmm
<mjs> Maybe it would make sense for activating by IID to work like a qeury then
<mjs> you do some sort of "has this IID" query instead of having fixed defaults
<Sopwith> no... should define defaults for the various fields (and use them in the query too, as lower-priority selection order things)
<Sopwith> not fixed as in compile-time
<mjs> yeah, I know, fixed at runtime based on your username and host
<mjs> I just don't understand why "I want an object with this IID" is particularly a different request than "I want an object that implements this IDL interface"
<Sopwith> well, it is better to have them well-defined rather than rely on non-deterministic behaviour.
<Sopwith> It's not different.
<Sopwith> I'm saying that this problem of ambiguity extends to both activate by IID and activate by any other query
<mjs> OK
<mjs> So you are right that there should be defaults that are preferences of lower priority than the specified selection order
<mjs> That makes things reasonable in the common case
<Sopwith> yes.
<mjs> I would get the reasonable defaults are the current username, the current hostname, and `session' respectively
<mjs> Actually, scratch that. Maybe using `localhost' is better than trying to come up with the hostname
<Sopwith> ok, so write that down somewhere :)
<Sopwith> well, there needs to be a canonical way of referring to a specific host, which is usually FQDN, not 'localhost'
<Sopwith> special-casing 'localhost' will make things that much more painful
<mjs> Sopwith: I'm taking notes
<mjs> Sopwith: a non-networked machine may not have an FQDN
<mjs> That's what led me to consider `localhost'

<mjs> So anyway, having these defaults covers normal queries.
<mjs> Should activating by IID just use the defaults, or should it check all known ObjectDirectories, but using those defaults as a selection order condition?
<Sopwith> probably the latter.
<Sopwith> really need to come up with a metric for the distance to various ODs.
<mjs> It seems like it might be good to be able to express "has this IID" as a condition in the query language; then you can just build on top of the existing query mechanism to do that
<mjs> as far as distance metric goes:
<Sopwith> It's easy to do that.
<mjs> How about just looking for equality in some order, i.e. machine has highest priority, then user, then whatever that last part of the AID is
<mjs> Can you suggest where in the code I should look to go about doing that query?
<Sopwith> ac-corba.c
