* Simple Moniker Arguments

	Sometimes you want to pass "arguments" to a component.
	Consider the componetn with the following OAFIID:

	OAFIID:GNOME_FileSelector

	You might want to be able to set configuration options from
	its moniker name, without having to ever use the property bag
	API.

	For example:

		OAFIID:GNOME_FileSelector!AcceptMimeTypes=image/*

** Implementing it.

	Create a BonoboItemHandler.  This component will let you do
	argument parsing of any kind.  

	You have to provide two functions: enumObjects (this can be
	empty) and getObject.

	The getObject function will be called when the moniker
	mechanism is trying to resolve a set of arguments to your
	function.

	Like this:

	Bonobo_Unknown 
	getObject (BonoboItemHandler *h, const char *item_name,
		   gboolean only_if_exists, gpointer data,
	 	   CORBA_Environment *ev)
	{
		MyData *m = data;

		if (strcmp (item_name, "friendly") == 0){
			m->friendly = true;
		}

		/* we just return ourselves */
		return bonobo_object_corba_objref (h);
	}

	So basically during the `getObject' operation you will be
	given a chance to process the `item_name' string which is
	basically like a command line argument (for the sake of
	explaining this) and based on this information you can
	customize your component.

** Sample functions

	Sometimes you will want to specify a bunch of options to
	configure your component, like this:

	OAFIID:MyComponent!visible=true;image=blah.png

	So we are separating the various options with semi-colons
	here.  To simplify your code, we have provided a couple of
	functions that given the following string:

		visible=true;image=blah.png

	Will return a GList split with BonoboItemOptions:

	GSList *l, *x;

	x = bonobo_item_option_parse ("visible=true;image=blah.png");

	for (l = x; l != null; l++){
		BonoboItemOption *io = l->data;

		printf ("Key=%s, Value=%s\n", io->key, io->value);
	}
	bonobo_item_option_free (x);

